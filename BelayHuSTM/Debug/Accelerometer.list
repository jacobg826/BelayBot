
Accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800855c  0800855c  0001855c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008578  08008578  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008578  08008578  00018578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008580  08008580  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  20000090  08008618  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  08008618  00020920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edf4  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e53  00000000  00000000  0003eeb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001848  00000000  00000000  00042d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016a8  00000000  00000000  00044550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025a12  00000000  00000000  00045bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001591d  00000000  00000000  0006b60a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4e86  00000000  00000000  00080f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00155dad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006874  00000000  00000000  00155e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008544 	.word	0x08008544

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008544 	.word	0x08008544

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <write_reg>:
 *
 * 			num:bytes:	number of bytes to send to the device
 *
 * 	return:	none
 */
void write_reg(SPI_HandleTypeDef* h, char* data, int num_bytes) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2108      	movs	r1, #8
 80004d8:	4809      	ldr	r0, [pc, #36]	; (8000500 <write_reg+0x38>)
 80004da:	f001 f943 	bl	8001764 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(h, (unsigned char*)data, num_bytes, 100);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	b29a      	uxth	r2, r3
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	68b9      	ldr	r1, [r7, #8]
 80004e6:	68f8      	ldr	r0, [r7, #12]
 80004e8:	f004 fa06 	bl	80048f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2108      	movs	r1, #8
 80004f0:	4803      	ldr	r0, [pc, #12]	; (8000500 <write_reg+0x38>)
 80004f2:	f001 f937 	bl	8001764 <HAL_GPIO_WritePin>
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <read_reg>:
 * 						subsequent bytes are read from the next sequential address after
 * 						reg_addr
 *
 * 	return: none
 */
void read_reg(SPI_HandleTypeDef* h, int reg_addr, char* store_data, int num_bytes) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
 8000510:	603b      	str	r3, [r7, #0]
	char data = READ | reg_addr;
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	b25b      	sxtb	r3, r3
 8000516:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800051a:	b25b      	sxtb	r3, r3
 800051c:	b2db      	uxtb	r3, r3
 800051e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2108      	movs	r1, #8
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <read_reg+0x54>)
 8000526:	f001 f91d 	bl	8001764 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(h, (unsigned char*)&data, REG_SIZE, 100);
 800052a:	f107 0117 	add.w	r1, r7, #23
 800052e:	2364      	movs	r3, #100	; 0x64
 8000530:	2201      	movs	r2, #1
 8000532:	68f8      	ldr	r0, [r7, #12]
 8000534:	f004 f9e0 	bl	80048f8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(h, (unsigned char*)store_data, num_bytes, 100);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	b29a      	uxth	r2, r3
 800053c:	2364      	movs	r3, #100	; 0x64
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	68f8      	ldr	r0, [r7, #12]
 8000542:	f004 fb0d 	bl	8004b60 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2108      	movs	r1, #8
 800054a:	4803      	ldr	r0, [pc, #12]	; (8000558 <read_reg+0x54>)
 800054c:	f001 f90a 	bl	8001764 <HAL_GPIO_WritePin>
}
 8000550:	bf00      	nop
 8000552:	3718      	adds	r7, #24
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000

0800055c <accel_setup>:
 * 			h:			spi handle to send data over
 *
 *
 * 	return: none
 */
void accel_setup(SPI_HandleTypeDef* h, TIM_HandleTypeDef* t) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]

	timer_val = __HAL_TIM_GET_COUNTER(t);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056c:	b29a      	uxth	r2, r3
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <accel_setup+0x68>)
 8000570:	801a      	strh	r2, [r3, #0]

	char data[2];
	data[0] = CONTROL_REG_4;
 8000572:	2320      	movs	r3, #32
 8000574:	753b      	strb	r3, [r7, #20]
	data[1] = START_UP_SEQ;
 8000576:	2367      	movs	r3, #103	; 0x67
 8000578:	757b      	strb	r3, [r7, #21]
	write_reg(h, data, sizeof(data));
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2202      	movs	r2, #2
 8000580:	4619      	mov	r1, r3
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff ffa0 	bl	80004c8 <write_reg>

	//	calibrate the offset field of the accelerometer
	struct accel_data calibration_data;
	read_accel_data(h, &calibration_data);
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	4619      	mov	r1, r3
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 f820 	bl	80005d4 <read_accel_data>

	x_offset = -1*calibration_data.x_data;
 8000594:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000598:	b29b      	uxth	r3, r3
 800059a:	425b      	negs	r3, r3
 800059c:	b29b      	uxth	r3, r3
 800059e:	b21a      	sxth	r2, r3
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <accel_setup+0x6c>)
 80005a2:	801a      	strh	r2, [r3, #0]
	y_offset = 0; //-1*calibration_data.y_data;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <accel_setup+0x70>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	801a      	strh	r2, [r3, #0]
	z_offset = -1*calibration_data.z_data;
 80005aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	425b      	negs	r3, r3
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	b21a      	sxth	r2, r3
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <accel_setup+0x74>)
 80005b8:	801a      	strh	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000b2 	.word	0x200000b2
 80005c8:	200000ac 	.word	0x200000ac
 80005cc:	200000ae 	.word	0x200000ae
 80005d0:	200000b0 	.word	0x200000b0

080005d4 <read_accel_data>:
 * 			data	pointer to a accel_data struct. Reads data from the X,Y, and Z registers
 * 					into the struct
 *
 * return:	none
 */
void read_accel_data(SPI_HandleTypeDef* h, struct accel_data* data) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
	char data_ready = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	73fb      	strb	r3, [r7, #15]
	read_reg(h, STATUS_REG, &data_ready, sizeof(data_ready));
 80005e2:	f107 020f 	add.w	r2, r7, #15
 80005e6:	2301      	movs	r3, #1
 80005e8:	2127      	movs	r1, #39	; 0x27
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f7ff ff8a 	bl	8000504 <read_reg>
	while (!(data_ready & NEW_DATA_MASK)) {
 80005f0:	e006      	b.n	8000600 <read_accel_data+0x2c>
		read_reg(h, STATUS_REG, &data_ready, sizeof(data_ready));
 80005f2:	f107 020f 	add.w	r2, r7, #15
 80005f6:	2301      	movs	r3, #1
 80005f8:	2127      	movs	r1, #39	; 0x27
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff ff82 	bl	8000504 <read_reg>
	while (!(data_ready & NEW_DATA_MASK)) {
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0f3      	beq.n	80005f2 <read_accel_data+0x1e>
	}
	// STM is little endian, so LOW_ADDR bit needs to be at the lower memory address,
	// which this setup does
	read_reg(h, X_LOW_ADDR, (char*)&data->x_data, sizeof(struct accel_data));
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	2306      	movs	r3, #6
 800060e:	2128      	movs	r1, #40	; 0x28
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ff77 	bl	8000504 <read_reg>
	data->x_data += x_offset;
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <read_accel_data+0x98>)
 8000620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000624:	b29b      	uxth	r3, r3
 8000626:	4413      	add	r3, r2
 8000628:	b29b      	uxth	r3, r3
 800062a:	b21a      	sxth	r2, r3
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	801a      	strh	r2, [r3, #0]
	data->y_data += y_offset;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <read_accel_data+0x9c>)
 800063a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800063e:	b29b      	uxth	r3, r3
 8000640:	4413      	add	r3, r2
 8000642:	b29b      	uxth	r3, r3
 8000644:	b21a      	sxth	r2, r3
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	805a      	strh	r2, [r3, #2]
	data->z_data += z_offset;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000650:	b29a      	uxth	r2, r3
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <read_accel_data+0xa0>)
 8000654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000658:	b29b      	uxth	r3, r3
 800065a:	4413      	add	r3, r2
 800065c:	b29b      	uxth	r3, r3
 800065e:	b21a      	sxth	r2, r3
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	809a      	strh	r2, [r3, #4]
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200000ac 	.word	0x200000ac
 8000670:	200000ae 	.word	0x200000ae
 8000674:	200000b0 	.word	0x200000b0

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fd31 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f849 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 f9e1 	bl	8000a4c <MX_GPIO_Init>
  MX_I2C1_Init();
 800068a:	f000 f8c7 	bl	800081c <MX_I2C1_Init>
  MX_I2S3_Init();
 800068e:	f000 f8f3 	bl	8000878 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000692:	f000 f921 	bl	80008d8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000696:	f007 fba5 	bl	8007de4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800069a:	f000 f9ad 	bl	80009f8 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 800069e:	f000 f987 	bl	80009b0 <MX_TIM14_Init>
  MX_TIM6_Init();
 80006a2:	f000 f94f 	bl	8000944 <MX_TIM6_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  struct accel_data data;
  	  accel_setup(&hspi1, &htim6);
 80006a6:	4917      	ldr	r1, [pc, #92]	; (8000704 <main+0x8c>)
 80006a8:	4817      	ldr	r0, [pc, #92]	; (8000708 <main+0x90>)
 80006aa:	f7ff ff57 	bl	800055c <accel_setup>
  	  HAL_TIM_Base_Start(&htim14);
 80006ae:	4817      	ldr	r0, [pc, #92]	; (800070c <main+0x94>)
 80006b0:	f004 fe3d 	bl	800532e <HAL_TIM_Base_Start>
	  uint16_t currTime = 0;
	  int notSent = 1;
	  */

	  struct packet data_packet;
	  data_packet.header[0] = 0x01;
 80006b4:	2301      	movs	r3, #1
 80006b6:	723b      	strb	r3, [r7, #8]
	  data_packet.header[1] = 0x02;
 80006b8:	2302      	movs	r3, #2
 80006ba:	727b      	strb	r3, [r7, #9]

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <main+0x98>)
 80006c4:	f001 f84e 	bl	8001764 <HAL_GPIO_WritePin>
	  while (1) {
		  	  read_accel_data(&hspi1, &data);
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	480e      	ldr	r0, [pc, #56]	; (8000708 <main+0x90>)
 80006d0:	f7ff ff80 	bl	80005d4 <read_accel_data>

		  	  data_packet.accel_data = data.y_data;
 80006d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	817b      	strh	r3, [r7, #10]
		  	  data_packet.time_stamp = 166; //get_elapsed_time(&htim6);
 80006dc:	23a6      	movs	r3, #166	; 0xa6
 80006de:	81bb      	strh	r3, [r7, #12]

		  	  char buffer[sizeof(data_packet)]; // Create a char buffer of right size

		  	  memcpy(buffer, &data_packet, sizeof(data_packet)); // Copy and convert the data
 80006e0:	463b      	mov	r3, r7
 80006e2:	f107 0208 	add.w	r2, r7, #8
 80006e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ea:	6018      	str	r0, [r3, #0]
 80006ec:	3304      	adds	r3, #4
 80006ee:	8019      	strh	r1, [r3, #0]
		  	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, sizeof(buffer), 50);
 80006f0:	4639      	mov	r1, r7
 80006f2:	2332      	movs	r3, #50	; 0x32
 80006f4:	2206      	movs	r2, #6
 80006f6:	4807      	ldr	r0, [pc, #28]	; (8000714 <main+0x9c>)
 80006f8:	f004 ffa7 	bl	800564a <HAL_UART_Transmit>
		  	  //HAL_UART_Transmit(&huart2, (uint8_t*)&data_packet, sizeof(data_packet), 50);

		 	  HAL_Delay(10);
 80006fc:	200a      	movs	r0, #10
 80006fe:	f000 fd63 	bl	80011c8 <HAL_Delay>
	  while (1) {
 8000702:	e7e1      	b.n	80006c8 <main+0x50>
 8000704:	2000011c 	.word	0x2000011c
 8000708:	2000015c 	.word	0x2000015c
 800070c:	200001f4 	.word	0x200001f4
 8000710:	40020c00 	.word	0x40020c00
 8000714:	200001b4 	.word	0x200001b4

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b098      	sub	sp, #96	; 0x60
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000722:	2230      	movs	r2, #48	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f007 fe4a 	bl	80083c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b31      	ldr	r3, [pc, #196]	; (8000814 <SystemClock_Config+0xfc>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	4a30      	ldr	r2, [pc, #192]	; (8000814 <SystemClock_Config+0xfc>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	; 0x40
 800075a:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <SystemClock_Config+0xfc>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <SystemClock_Config+0x100>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <SystemClock_Config+0x100>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <SystemClock_Config+0x100>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000782:	2301      	movs	r3, #1
 8000784:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000790:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000796:	2308      	movs	r3, #8
 8000798:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800079a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800079e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a4:	2307      	movs	r3, #7
 80007a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fa9f 	bl	8003cf0 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80007b8:	f000 fa46 	bl	8000c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	2105      	movs	r1, #5
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fcf8 	bl	80041d0 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007e6:	f000 fa2f 	bl	8000c48 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007ea:	2301      	movs	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80007ee:	23c0      	movs	r3, #192	; 0xc0
 80007f0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 feda 	bl	80045b4 <HAL_RCCEx_PeriphCLKConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000806:	f000 fa1f 	bl	8000c48 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3760      	adds	r7, #96	; 0x60
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_I2C1_Init+0x50>)
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <MX_I2C1_Init+0x54>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_I2C1_Init+0x50>)
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_I2C1_Init+0x58>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_I2C1_Init+0x50>)
 800083a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_I2C1_Init+0x50>)
 800085a:	f002 fc71 	bl	8003140 <HAL_I2C_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000864:	f000 f9f0 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000c8 	.word	0x200000c8
 8000870:	40005400 	.word	0x40005400
 8000874:	000186a0 	.word	0x000186a0

08000878 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_I2S3_Init+0x54>)
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <MX_I2S3_Init+0x58>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_I2S3_Init+0x54>)
 8000884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000888:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_I2S3_Init+0x54>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_I2S3_Init+0x54>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_I2S3_Init+0x54>)
 8000898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_I2S3_Init+0x54>)
 80008a0:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <MX_I2S3_Init+0x5c>)
 80008a2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_I2S3_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_I2S3_Init+0x54>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_I2S3_Init+0x54>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_I2S3_Init+0x54>)
 80008b8:	f002 fd7a 	bl	80033b0 <HAL_I2S_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008c2:	f000 f9c1 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000234 	.word	0x20000234
 80008d0:	40003c00 	.word	0x40003c00
 80008d4:	00017700 	.word	0x00017700

080008d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_SPI1_Init+0x64>)
 80008de:	4a18      	ldr	r2, [pc, #96]	; (8000940 <MX_SPI1_Init+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_SPI1_Init+0x64>)
 80008e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_SPI1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_SPI1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_SPI1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_SPI1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_SPI1_Init+0x64>)
 8000904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000908:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_SPI1_Init+0x64>)
 800090c:	2230      	movs	r2, #48	; 0x30
 800090e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_SPI1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_SPI1_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_SPI1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_SPI1_Init+0x64>)
 8000924:	220a      	movs	r2, #10
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_SPI1_Init+0x64>)
 800092a:	f003 ff81 	bl	8004830 <HAL_SPI_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000934:	f000 f988 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000015c 	.word	0x2000015c
 8000940:	40013000 	.word	0x40013000

08000944 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_TIM6_Init+0x64>)
 8000954:	4a15      	ldr	r2, [pc, #84]	; (80009ac <MX_TIM6_Init+0x68>)
 8000956:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_TIM6_Init+0x64>)
 800095a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800095e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_TIM6_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_TIM6_Init+0x64>)
 8000968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800096c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_TIM6_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <MX_TIM6_Init+0x64>)
 8000976:	f004 fcaf 	bl	80052d8 <HAL_TIM_Base_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000980:	f000 f962 	bl	8000c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_TIM6_Init+0x64>)
 8000992:	f004 fd91 	bl	80054b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800099c:	f000 f954 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000011c 	.word	0x2000011c
 80009ac:	40001000 	.word	0x40001000

080009b0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_TIM14_Init+0x40>)
 80009b6:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <MX_TIM14_Init+0x44>)
 80009b8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_TIM14_Init+0x40>)
 80009bc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009c0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_TIM14_Init+0x40>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_TIM14_Init+0x40>)
 80009ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ce:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_TIM14_Init+0x40>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_TIM14_Init+0x40>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_TIM14_Init+0x40>)
 80009de:	f004 fc7b 	bl	80052d8 <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80009e8:	f000 f92e 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200001f4 	.word	0x200001f4
 80009f4:	40002000 	.word	0x40002000

080009f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_USART2_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f004 fdbe 	bl	80055b0 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f905 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200001b4 	.word	0x200001b4
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b71      	ldr	r3, [pc, #452]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a70      	ldr	r2, [pc, #448]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000a6c:	f043 0310 	orr.w	r3, r3, #16
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b6e      	ldr	r3, [pc, #440]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	4b6a      	ldr	r3, [pc, #424]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a69      	ldr	r2, [pc, #420]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b67      	ldr	r3, [pc, #412]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b63      	ldr	r3, [pc, #396]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a62      	ldr	r2, [pc, #392]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b60      	ldr	r3, [pc, #384]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b5c      	ldr	r3, [pc, #368]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a5b      	ldr	r2, [pc, #364]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b59      	ldr	r3, [pc, #356]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b55      	ldr	r3, [pc, #340]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a54      	ldr	r2, [pc, #336]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b52      	ldr	r3, [pc, #328]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b4e      	ldr	r3, [pc, #312]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a4d      	ldr	r2, [pc, #308]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b4b      	ldr	r3, [pc, #300]	; (8000c2c <MX_GPIO_Init+0x1e0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	4848      	ldr	r0, [pc, #288]	; (8000c30 <MX_GPIO_Init+0x1e4>)
 8000b10:	f000 fe28 	bl	8001764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2101      	movs	r1, #1
 8000b18:	4846      	ldr	r0, [pc, #280]	; (8000c34 <MX_GPIO_Init+0x1e8>)
 8000b1a:	f000 fe23 	bl	8001764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b24:	4844      	ldr	r0, [pc, #272]	; (8000c38 <MX_GPIO_Init+0x1ec>)
 8000b26:	f000 fe1d 	bl	8001764 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b2a:	2308      	movs	r3, #8
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	483b      	ldr	r0, [pc, #236]	; (8000c30 <MX_GPIO_Init+0x1e4>)
 8000b42:	f000 fc75 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4835      	ldr	r0, [pc, #212]	; (8000c34 <MX_GPIO_Init+0x1e8>)
 8000b5e:	f000 fc67 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b62:	2308      	movs	r3, #8
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b72:	2305      	movs	r3, #5
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	482d      	ldr	r0, [pc, #180]	; (8000c34 <MX_GPIO_Init+0x1e8>)
 8000b7e:	f000 fc57 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <MX_GPIO_Init+0x1f0>)
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	482a      	ldr	r0, [pc, #168]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000b96:	f000 fc4b 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4825      	ldr	r0, [pc, #148]	; (8000c44 <MX_GPIO_Init+0x1f8>)
 8000bae:	f000 fc3f 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc4:	2305      	movs	r3, #5
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	481d      	ldr	r0, [pc, #116]	; (8000c44 <MX_GPIO_Init+0x1f8>)
 8000bd0:	f000 fc2e 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bd4:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bd8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	4812      	ldr	r0, [pc, #72]	; (8000c38 <MX_GPIO_Init+0x1ec>)
 8000bee:	f000 fc1f 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bf2:	2320      	movs	r3, #32
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <MX_GPIO_Init+0x1ec>)
 8000c06:	f000 fc13 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_GPIO_Init+0x1f0>)
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <MX_GPIO_Init+0x1e4>)
 8000c1e:	f000 fc07 	bl	8001430 <HAL_GPIO_Init>

}
 8000c22:	bf00      	nop
 8000c24:	3730      	adds	r7, #48	; 0x30
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40020800 	.word	0x40020800
 8000c38:	40020c00 	.word	0x40020c00
 8000c3c:	10120000 	.word	0x10120000
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020400 	.word	0x40020400

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <Error_Handler+0x6>

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c8e:	2007      	movs	r0, #7
 8000c90:	f000 fb8c 	bl	80013ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <HAL_I2C_MspInit+0x84>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12c      	bne.n	8000d1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cde:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce4:	2312      	movs	r3, #18
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <HAL_I2C_MspInit+0x8c>)
 8000cfc:	f000 fb98 	bl	8001430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40005400 	.word	0x40005400
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020400 	.word	0x40020400

08000d30 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <HAL_I2S_MspInit+0xc0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d14a      	bne.n	8000de8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <HAL_I2S_MspInit+0xc4>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a26      	ldr	r2, [pc, #152]	; (8000df4 <HAL_I2S_MspInit+0xc4>)
 8000d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <HAL_I2S_MspInit+0xc4>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_I2S_MspInit+0xc4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a1f      	ldr	r2, [pc, #124]	; (8000df4 <HAL_I2S_MspInit+0xc4>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_I2S_MspInit+0xc4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_I2S_MspInit+0xc4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a18      	ldr	r2, [pc, #96]	; (8000df4 <HAL_I2S_MspInit+0xc4>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <HAL_I2S_MspInit+0xc4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000da6:	2310      	movs	r3, #16
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db6:	2306      	movs	r3, #6
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <HAL_I2S_MspInit+0xc8>)
 8000dc2:	f000 fb35 	bl	8001430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dc6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd8:	2306      	movs	r3, #6
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4806      	ldr	r0, [pc, #24]	; (8000dfc <HAL_I2S_MspInit+0xcc>)
 8000de4:	f000 fb24 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40003c00 	.word	0x40003c00
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40020800 	.word	0x40020800

08000e00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <HAL_SPI_MspInit+0x84>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12b      	bne.n	8000e7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e5a:	23e0      	movs	r3, #224	; 0xe0
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <HAL_SPI_MspInit+0x8c>)
 8000e76:	f000 fadb 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40013000 	.word	0x40013000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <HAL_TIM_Base_MspInit+0x64>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10e      	bne.n	8000ec0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_TIM_Base_MspInit+0x68>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <HAL_TIM_Base_MspInit+0x68>)
 8000eac:	f043 0310 	orr.w	r3, r3, #16
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_TIM_Base_MspInit+0x68>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000ebe:	e012      	b.n	8000ee6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM14)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <HAL_TIM_Base_MspInit+0x6c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d10d      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_TIM_Base_MspInit+0x68>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <HAL_TIM_Base_MspInit+0x68>)
 8000ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <HAL_TIM_Base_MspInit+0x68>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40001000 	.word	0x40001000
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40002000 	.word	0x40002000

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <HAL_UART_MspInit+0x84>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d12b      	bne.n	8000f7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_UART_MspInit+0x8c>)
 8000f76:	f000 fa5b 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40004400 	.word	0x40004400
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f8d4 	bl	8001188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <OTG_FS_IRQHandler+0x10>)
 8000fea:	f000 fe63 	bl	8001cb4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000658 	.word	0x20000658

08000ff8 <_sbrk>:
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
 8001028:	f007 f990 	bl	800834c <__errno>
 800102c:	4602      	mov	r2, r0
 800102e:	230c      	movs	r3, #12
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20020000 	.word	0x20020000
 8001058:	00000400 	.word	0x00000400
 800105c:	200000b4 	.word	0x200000b4
 8001060:	20000920 	.word	0x20000920

08001064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <SystemInit+0x28>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a07      	ldr	r2, [pc, #28]	; (800108c <SystemInit+0x28>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <SystemInit+0x28>)
 800107a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800107e:	609a      	str	r2, [r3, #8]
#endif
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <Reset_Handler>:
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c8 <LoopFillZerobss+0x14>
 8001094:	2100      	movs	r1, #0
 8001096:	e003      	b.n	80010a0 <LoopCopyDataInit>

08001098 <CopyDataInit>:
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <LoopFillZerobss+0x18>)
 800109a:	585b      	ldr	r3, [r3, r1]
 800109c:	5043      	str	r3, [r0, r1]
 800109e:	3104      	adds	r1, #4

080010a0 <LoopCopyDataInit>:
 80010a0:	480b      	ldr	r0, [pc, #44]	; (80010d0 <LoopFillZerobss+0x1c>)
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <LoopFillZerobss+0x20>)
 80010a4:	1842      	adds	r2, r0, r1
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d3f6      	bcc.n	8001098 <CopyDataInit>
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <LoopFillZerobss+0x24>)
 80010ac:	e002      	b.n	80010b4 <LoopFillZerobss>

080010ae <FillZerobss>:
 80010ae:	2300      	movs	r3, #0
 80010b0:	f842 3b04 	str.w	r3, [r2], #4

080010b4 <LoopFillZerobss>:
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <LoopFillZerobss+0x28>)
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3f9      	bcc.n	80010ae <FillZerobss>
 80010ba:	f7ff ffd3 	bl	8001064 <SystemInit>
 80010be:	f007 f94b 	bl	8008358 <__libc_init_array>
 80010c2:	f7ff fad9 	bl	8000678 <main>
 80010c6:	4770      	bx	lr
 80010c8:	20020000 	.word	0x20020000
 80010cc:	08008588 	.word	0x08008588
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000090 	.word	0x20000090
 80010d8:	20000090 	.word	0x20000090
 80010dc:	20000920 	.word	0x20000920

080010e0 <ADC_IRQHandler>:
 80010e0:	e7fe      	b.n	80010e0 <ADC_IRQHandler>
	...

080010e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <HAL_Init+0x40>)
 80010ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_Init+0x40>)
 80010fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_Init+0x40>)
 8001106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110c:	2003      	movs	r0, #3
 800110e:	f000 f94d 	bl	80013ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001112:	2000      	movs	r0, #0
 8001114:	f000 f808 	bl	8001128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001118:	f7ff fd9a 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023c00 	.word	0x40023c00

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x54>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x58>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f965 	bl	8001416 <HAL_SYSTICK_Config>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e00e      	b.n	8001174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d80a      	bhi.n	8001172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115c:	2200      	movs	r2, #0
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f000 f92d 	bl	80013c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_InitTick+0x5c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e000      	b.n	8001174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000000 	.word	0x20000000
 8001180:	20000008 	.word	0x20000008
 8001184:	20000004 	.word	0x20000004

08001188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x20>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x24>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_IncTick+0x24>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008
 80011ac:	2000027c 	.word	0x2000027c

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	2000027c 	.word	0x2000027c

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_Delay+0x40>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffde 	bl	80011b0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000008 	.word	0x20000008

0800120c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123e:	4a04      	ldr	r2, [pc, #16]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <__NVIC_GetPriorityGrouping+0x18>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0307 	and.w	r3, r3, #7
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db0b      	blt.n	800129a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	4907      	ldr	r1, [pc, #28]	; (80012a8 <__NVIC_EnableIRQ+0x38>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db0a      	blt.n	80012d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	490c      	ldr	r1, [pc, #48]	; (80012f8 <__NVIC_SetPriority+0x4c>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d4:	e00a      	b.n	80012ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4908      	ldr	r1, [pc, #32]	; (80012fc <__NVIC_SetPriority+0x50>)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	3b04      	subs	r3, #4
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	761a      	strb	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2b04      	cmp	r3, #4
 800131c:	bf28      	it	cs
 800131e:	2304      	movcs	r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	2b06      	cmp	r3, #6
 8001328:	d902      	bls.n	8001330 <NVIC_EncodePriority+0x30>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b03      	subs	r3, #3
 800132e:	e000      	b.n	8001332 <NVIC_EncodePriority+0x32>
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001348:	f04f 31ff 	mov.w	r1, #4294967295
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	4313      	orrs	r3, r2
         );
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001378:	d301      	bcc.n	800137e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137a:	2301      	movs	r3, #1
 800137c:	e00f      	b.n	800139e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <SysTick_Config+0x40>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001386:	210f      	movs	r1, #15
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f7ff ff8e 	bl	80012ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <SysTick_Config+0x40>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <SysTick_Config+0x40>)
 8001398:	2207      	movs	r2, #7
 800139a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	e000e010 	.word	0xe000e010

080013ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff29 	bl	800120c <__NVIC_SetPriorityGrouping>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d4:	f7ff ff3e 	bl	8001254 <__NVIC_GetPriorityGrouping>
 80013d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff ff8e 	bl	8001300 <NVIC_EncodePriority>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff5d 	bl	80012ac <__NVIC_SetPriority>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff31 	bl	8001270 <__NVIC_EnableIRQ>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffa2 	bl	8001368 <SysTick_Config>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	e16b      	b.n	8001724 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	429a      	cmp	r2, r3
 8001466:	f040 815a 	bne.w	800171e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d00b      	beq.n	800148a <HAL_GPIO_Init+0x5a>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800147e:	2b11      	cmp	r3, #17
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b12      	cmp	r3, #18
 8001488:	d130      	bne.n	80014ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	f003 0201 	and.w	r2, r3, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0xfc>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b12      	cmp	r3, #18
 800152a:	d123      	bne.n	8001574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	08da      	lsrs	r2, r3, #3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3208      	adds	r2, #8
 8001534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	08da      	lsrs	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3208      	adds	r2, #8
 800156e:	69b9      	ldr	r1, [r7, #24]
 8001570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0203 	and.w	r2, r3, #3
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80b4 	beq.w	800171e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <HAL_GPIO_Init+0x308>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a5e      	ldr	r2, [pc, #376]	; (8001738 <HAL_GPIO_Init+0x308>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b5c      	ldr	r3, [pc, #368]	; (8001738 <HAL_GPIO_Init+0x308>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d2:	4a5a      	ldr	r2, [pc, #360]	; (800173c <HAL_GPIO_Init+0x30c>)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a51      	ldr	r2, [pc, #324]	; (8001740 <HAL_GPIO_Init+0x310>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d02b      	beq.n	8001656 <HAL_GPIO_Init+0x226>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a50      	ldr	r2, [pc, #320]	; (8001744 <HAL_GPIO_Init+0x314>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d025      	beq.n	8001652 <HAL_GPIO_Init+0x222>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4f      	ldr	r2, [pc, #316]	; (8001748 <HAL_GPIO_Init+0x318>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d01f      	beq.n	800164e <HAL_GPIO_Init+0x21e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4e      	ldr	r2, [pc, #312]	; (800174c <HAL_GPIO_Init+0x31c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d019      	beq.n	800164a <HAL_GPIO_Init+0x21a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4d      	ldr	r2, [pc, #308]	; (8001750 <HAL_GPIO_Init+0x320>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0x216>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4c      	ldr	r2, [pc, #304]	; (8001754 <HAL_GPIO_Init+0x324>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00d      	beq.n	8001642 <HAL_GPIO_Init+0x212>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4b      	ldr	r2, [pc, #300]	; (8001758 <HAL_GPIO_Init+0x328>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d007      	beq.n	800163e <HAL_GPIO_Init+0x20e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4a      	ldr	r2, [pc, #296]	; (800175c <HAL_GPIO_Init+0x32c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_GPIO_Init+0x20a>
 8001636:	2307      	movs	r3, #7
 8001638:	e00e      	b.n	8001658 <HAL_GPIO_Init+0x228>
 800163a:	2308      	movs	r3, #8
 800163c:	e00c      	b.n	8001658 <HAL_GPIO_Init+0x228>
 800163e:	2306      	movs	r3, #6
 8001640:	e00a      	b.n	8001658 <HAL_GPIO_Init+0x228>
 8001642:	2305      	movs	r3, #5
 8001644:	e008      	b.n	8001658 <HAL_GPIO_Init+0x228>
 8001646:	2304      	movs	r3, #4
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x228>
 800164a:	2303      	movs	r3, #3
 800164c:	e004      	b.n	8001658 <HAL_GPIO_Init+0x228>
 800164e:	2302      	movs	r3, #2
 8001650:	e002      	b.n	8001658 <HAL_GPIO_Init+0x228>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_GPIO_Init+0x228>
 8001656:	2300      	movs	r3, #0
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	f002 0203 	and.w	r2, r2, #3
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	4093      	lsls	r3, r2
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001668:	4934      	ldr	r1, [pc, #208]	; (800173c <HAL_GPIO_Init+0x30c>)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001676:	4b3a      	ldr	r3, [pc, #232]	; (8001760 <HAL_GPIO_Init+0x330>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800169a:	4a31      	ldr	r2, [pc, #196]	; (8001760 <HAL_GPIO_Init+0x330>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016a0:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <HAL_GPIO_Init+0x330>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c4:	4a26      	ldr	r2, [pc, #152]	; (8001760 <HAL_GPIO_Init+0x330>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ca:	4b25      	ldr	r3, [pc, #148]	; (8001760 <HAL_GPIO_Init+0x330>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ee:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <HAL_GPIO_Init+0x330>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <HAL_GPIO_Init+0x330>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001718:	4a11      	ldr	r2, [pc, #68]	; (8001760 <HAL_GPIO_Init+0x330>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3301      	adds	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	f67f ae90 	bls.w	800144c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800172c:	bf00      	nop
 800172e:	3724      	adds	r7, #36	; 0x24
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40023800 	.word	0x40023800
 800173c:	40013800 	.word	0x40013800
 8001740:	40020000 	.word	0x40020000
 8001744:	40020400 	.word	0x40020400
 8001748:	40020800 	.word	0x40020800
 800174c:	40020c00 	.word	0x40020c00
 8001750:	40021000 	.word	0x40021000
 8001754:	40021400 	.word	0x40021400
 8001758:	40021800 	.word	0x40021800
 800175c:	40021c00 	.word	0x40021c00
 8001760:	40013c00 	.word	0x40013c00

08001764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
 8001770:	4613      	mov	r3, r2
 8001772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001774:	787b      	ldrb	r3, [r7, #1]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001780:	e003      	b.n	800178a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001782:	887b      	ldrh	r3, [r7, #2]
 8001784:	041a      	lsls	r2, r3, #16
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	619a      	str	r2, [r3, #24]
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001798:	b08f      	sub	sp, #60	; 0x3c
 800179a:	af0a      	add	r7, sp, #40	; 0x28
 800179c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e054      	b.n	8001852 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d106      	bne.n	80017c8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f006 fb62 	bl	8007e8c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2203      	movs	r2, #3
 80017cc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f004 fc00 	bl	8005fec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	687e      	ldr	r6, [r7, #4]
 80017f4:	466d      	mov	r5, sp
 80017f6:	f106 0410 	add.w	r4, r6, #16
 80017fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001802:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001806:	e885 0003 	stmia.w	r5, {r0, r1}
 800180a:	1d33      	adds	r3, r6, #4
 800180c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800180e:	6838      	ldr	r0, [r7, #0]
 8001810:	f004 fb7a 	bl	8005f08 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2101      	movs	r1, #1
 800181a:	4618      	mov	r0, r3
 800181c:	f004 fbf7 	bl	800600e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	687e      	ldr	r6, [r7, #4]
 8001828:	466d      	mov	r5, sp
 800182a:	f106 0410 	add.w	r4, r6, #16
 800182e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001836:	e894 0003 	ldmia.w	r4, {r0, r1}
 800183a:	e885 0003 	stmia.w	r5, {r0, r1}
 800183e:	1d33      	adds	r3, r6, #4
 8001840:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001842:	6838      	ldr	r0, [r7, #0]
 8001844:	f004 fd0a 	bl	800625c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800185a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800185a:	b590      	push	{r4, r7, lr}
 800185c:	b089      	sub	sp, #36	; 0x24
 800185e:	af04      	add	r7, sp, #16
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	4608      	mov	r0, r1
 8001864:	4611      	mov	r1, r2
 8001866:	461a      	mov	r2, r3
 8001868:	4603      	mov	r3, r0
 800186a:	70fb      	strb	r3, [r7, #3]
 800186c:	460b      	mov	r3, r1
 800186e:	70bb      	strb	r3, [r7, #2]
 8001870:	4613      	mov	r3, r2
 8001872:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_HCD_HC_Init+0x28>
 800187e:	2302      	movs	r3, #2
 8001880:	e07f      	b.n	8001982 <HAL_HCD_HC_Init+0x128>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	333d      	adds	r3, #61	; 0x3d
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	3338      	adds	r3, #56	; 0x38
 80018ae:	787a      	ldrb	r2, [r7, #1]
 80018b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	3340      	adds	r3, #64	; 0x40
 80018c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018c4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	440b      	add	r3, r1
 80018d4:	3339      	adds	r3, #57	; 0x39
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	333f      	adds	r3, #63	; 0x3f
 80018ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	78bb      	ldrb	r3, [r7, #2]
 80018f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018f8:	b2d8      	uxtb	r0, r3
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	333a      	adds	r3, #58	; 0x3a
 8001908:	4602      	mov	r2, r0
 800190a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800190c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001910:	2b00      	cmp	r3, #0
 8001912:	da0a      	bge.n	800192a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	333b      	adds	r3, #59	; 0x3b
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e009      	b.n	800193e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	333b      	adds	r3, #59	; 0x3b
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800193e:	78fa      	ldrb	r2, [r7, #3]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	333c      	adds	r3, #60	; 0x3c
 800194e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001952:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	787c      	ldrb	r4, [r7, #1]
 800195a:	78ba      	ldrb	r2, [r7, #2]
 800195c:	78f9      	ldrb	r1, [r7, #3]
 800195e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	f897 3020 	ldrb.w	r3, [r7, #32]
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	4623      	mov	r3, r4
 8001970:	f004 fdb4 	bl	80064dc <USB_HC_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bd90      	pop	{r4, r7, pc}

0800198a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_HCD_HC_Halt+0x1e>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e00f      	b.n	80019c8 <HAL_HCD_HC_Halt+0x3e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f004 fff0 	bl	800699e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	4603      	mov	r3, r0
 80019e0:	70fb      	strb	r3, [r7, #3]
 80019e2:	460b      	mov	r3, r1
 80019e4:	70bb      	strb	r3, [r7, #2]
 80019e6:	4613      	mov	r3, r2
 80019e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	440b      	add	r3, r1
 80019f8:	333b      	adds	r3, #59	; 0x3b
 80019fa:	78ba      	ldrb	r2, [r7, #2]
 80019fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	333f      	adds	r3, #63	; 0x3f
 8001a0e:	787a      	ldrb	r2, [r7, #1]
 8001a10:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a12:	7c3b      	ldrb	r3, [r7, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d114      	bne.n	8001a42 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	3342      	adds	r3, #66	; 0x42
 8001a28:	2203      	movs	r2, #3
 8001a2a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	333d      	adds	r3, #61	; 0x3d
 8001a3c:	7f3a      	ldrb	r2, [r7, #28]
 8001a3e:	701a      	strb	r2, [r3, #0]
 8001a40:	e009      	b.n	8001a56 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	3342      	adds	r3, #66	; 0x42
 8001a52:	2202      	movs	r2, #2
 8001a54:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a56:	787b      	ldrb	r3, [r7, #1]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	f200 80d6 	bhi.w	8001c0a <HAL_HCD_HC_SubmitRequest+0x23a>
 8001a5e:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001a75 	.word	0x08001a75
 8001a68:	08001bf5 	.word	0x08001bf5
 8001a6c:	08001ae1 	.word	0x08001ae1
 8001a70:	08001b6b 	.word	0x08001b6b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a74:	7c3b      	ldrb	r3, [r7, #16]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	f040 80c9 	bne.w	8001c0e <HAL_HCD_HC_SubmitRequest+0x23e>
 8001a7c:	78bb      	ldrb	r3, [r7, #2]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 80c5 	bne.w	8001c0e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001a84:	8b3b      	ldrh	r3, [r7, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	440b      	add	r3, r1
 8001a98:	3351      	adds	r3, #81	; 0x51
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	3351      	adds	r3, #81	; 0x51
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10a      	bne.n	8001aca <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3342      	adds	r3, #66	; 0x42
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ac8:	e0a1      	b.n	8001c0e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aca:	78fa      	ldrb	r2, [r7, #3]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	3342      	adds	r3, #66	; 0x42
 8001ada:	2202      	movs	r2, #2
 8001adc:	701a      	strb	r2, [r3, #0]
      break;
 8001ade:	e096      	b.n	8001c0e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ae0:	78bb      	ldrb	r3, [r7, #2]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d120      	bne.n	8001b28 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	3351      	adds	r3, #81	; 0x51
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10a      	bne.n	8001b12 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	3342      	adds	r3, #66	; 0x42
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b10:	e07e      	b.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	3342      	adds	r3, #66	; 0x42
 8001b22:	2202      	movs	r2, #2
 8001b24:	701a      	strb	r2, [r3, #0]
      break;
 8001b26:	e073      	b.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	3350      	adds	r3, #80	; 0x50
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10a      	bne.n	8001b54 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3342      	adds	r3, #66	; 0x42
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
      break;
 8001b52:	e05d      	b.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	3342      	adds	r3, #66	; 0x42
 8001b64:	2202      	movs	r2, #2
 8001b66:	701a      	strb	r2, [r3, #0]
      break;
 8001b68:	e052      	b.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b6a:	78bb      	ldrb	r3, [r7, #2]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d120      	bne.n	8001bb2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	3351      	adds	r3, #81	; 0x51
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10a      	bne.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	3342      	adds	r3, #66	; 0x42
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b9a:	e039      	b.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	3342      	adds	r3, #66	; 0x42
 8001bac:	2202      	movs	r2, #2
 8001bae:	701a      	strb	r2, [r3, #0]
      break;
 8001bb0:	e02e      	b.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3350      	adds	r3, #80	; 0x50
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10a      	bne.n	8001bde <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3342      	adds	r3, #66	; 0x42
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
      break;
 8001bdc:	e018      	b.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bde:	78fa      	ldrb	r2, [r7, #3]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	3342      	adds	r3, #66	; 0x42
 8001bee:	2202      	movs	r2, #2
 8001bf0:	701a      	strb	r2, [r3, #0]
      break;
 8001bf2:	e00d      	b.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	3342      	adds	r3, #66	; 0x42
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
      break;
 8001c08:	e002      	b.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001c0a:	bf00      	nop
 8001c0c:	e000      	b.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001c0e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	3344      	adds	r3, #68	; 0x44
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c24:	78fa      	ldrb	r2, [r7, #3]
 8001c26:	8b39      	ldrh	r1, [r7, #24]
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4403      	add	r3, r0
 8001c34:	3348      	adds	r3, #72	; 0x48
 8001c36:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c38:	78fa      	ldrb	r2, [r7, #3]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	335c      	adds	r3, #92	; 0x5c
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	334c      	adds	r3, #76	; 0x4c
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3339      	adds	r3, #57	; 0x39
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	440b      	add	r3, r1
 8001c82:	335d      	adds	r3, #93	; 0x5d
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	78fa      	ldrb	r2, [r7, #3]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	3338      	adds	r3, #56	; 0x38
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	18d1      	adds	r1, r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f004 fd24 	bl	80066f0 <USB_HC_StartXfer>
 8001ca8:	4603      	mov	r3, r0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop

08001cb4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 fa83 	bl	80061d6 <USB_GetMode>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	f040 80ef 	bne.w	8001eb6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 fa67 	bl	80061b0 <USB_ReadInterrupts>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80e5 	beq.w	8001eb4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 fa5e 	bl	80061b0 <USB_ReadInterrupts>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cfe:	d104      	bne.n	8001d0a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f004 fa4e 	bl	80061b0 <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d1e:	d104      	bne.n	8001d2a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 fa3e 	bl	80061b0 <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d3e:	d104      	bne.n	8001d4a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 fa2e 	bl	80061b0 <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d103      	bne.n	8001d66 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2202      	movs	r2, #2
 8001d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f004 fa20 	bl	80061b0 <USB_ReadInterrupts>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d7a:	d115      	bne.n	8001da8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d84:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d108      	bne.n	8001da8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f006 f8f6 	bl	8007f88 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2101      	movs	r1, #1
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 fb16 	bl	80063d4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f004 f9ff 	bl	80061b0 <USB_ReadInterrupts>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d102      	bne.n	8001dc4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f001 f94a 	bl	8003058 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 f9f1 	bl	80061b0 <USB_ReadInterrupts>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d106      	bne.n	8001de6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f006 f8b9 	bl	8007f50 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2208      	movs	r2, #8
 8001de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f004 f9e0 	bl	80061b0 <USB_ReadInterrupts>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dfa:	d138      	bne.n	8001e6e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f004 fdbb 	bl	800697c <USB_HC_ReadInterrupt>
 8001e06:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e025      	b.n	8001e5a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d018      	beq.n	8001e54 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e38:	d106      	bne.n	8001e48 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f8b3 	bl	8001fac <HCD_HC_IN_IRQHandler>
 8001e46:	e005      	b.n	8001e54 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fce1 	bl	8002816 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d3d4      	bcc.n	8001e0e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 f99c 	bl	80061b0 <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d101      	bne.n	8001e86 <HAL_HCD_IRQHandler+0x1d2>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_HCD_IRQHandler+0x1d4>
 8001e86:	2300      	movs	r3, #0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d014      	beq.n	8001eb6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0210 	bic.w	r2, r2, #16
 8001e9a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f001 f82f 	bl	8002f00 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699a      	ldr	r2, [r3, #24]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0210 	orr.w	r2, r2, #16
 8001eb0:	619a      	str	r2, [r3, #24]
 8001eb2:	e000      	b.n	8001eb6 <HAL_HCD_IRQHandler+0x202>
      return;
 8001eb4:	bf00      	nop
    }
  }
}
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_HCD_Start+0x16>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e013      	b.n	8001efa <HAL_HCD_Start+0x3e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 f873 	bl	8005fca <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2101      	movs	r1, #1
 8001eea:	4618      	mov	r0, r3
 8001eec:	f004 faac 	bl	8006448 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_HCD_Stop+0x16>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e00d      	b.n	8001f34 <HAL_HCD_Stop+0x32>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f004 fe75 	bl	8006c14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	335c      	adds	r3, #92	; 0x5c
 8001f58:	781b      	ldrb	r3, [r3, #0]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	334c      	adds	r3, #76	; 0x4c
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 fa8c 	bl	80064ba <USB_GetCurrentFrame>
 8001fa2:	4603      	mov	r3, r0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d119      	bne.n	8002010 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe8:	461a      	mov	r2, r3
 8001fea:	2304      	movs	r3, #4
 8001fec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	0151      	lsls	r1, r2, #5
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	440a      	add	r2, r1
 8002004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	60d3      	str	r3, [r2, #12]
 800200e:	e0ce      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002026:	d12c      	bne.n	8002082 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002034:	461a      	mov	r2, r3
 8002036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800203a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	335d      	adds	r3, #93	; 0x5d
 800204c:	2207      	movs	r2, #7
 800204e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	0151      	lsls	r1, r2, #5
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	440a      	add	r2, r1
 8002066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800206a:	f043 0302 	orr.w	r3, r3, #2
 800206e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f004 fc8f 	bl	800699e <USB_HC_Halt>
 8002080:	e095      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4413      	add	r3, r2
 800208a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b20      	cmp	r3, #32
 8002096:	d109      	bne.n	80020ac <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a4:	461a      	mov	r2, r3
 80020a6:	2320      	movs	r3, #32
 80020a8:	6093      	str	r3, [r2, #8]
 80020aa:	e080      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d134      	bne.n	800212c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	0151      	lsls	r1, r2, #5
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	440a      	add	r2, r1
 80020d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	335d      	adds	r3, #93	; 0x5d
 80020f2:	2205      	movs	r2, #5
 80020f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002102:	461a      	mov	r2, r3
 8002104:	2310      	movs	r3, #16
 8002106:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	461a      	mov	r2, r3
 8002116:	2308      	movs	r3, #8
 8002118:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f004 fc3a 	bl	800699e <USB_HC_Halt>
 800212a:	e040      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002142:	d134      	bne.n	80021ae <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	0151      	lsls	r1, r2, #5
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	440a      	add	r2, r1
 800215a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f004 fc15 	bl	800699e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	461a      	mov	r2, r3
 8002182:	2310      	movs	r3, #16
 8002184:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	335d      	adds	r3, #93	; 0x5d
 8002196:	2208      	movs	r2, #8
 8002198:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	461a      	mov	r2, r3
 80021a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ac:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c4:	d122      	bne.n	800220c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	0151      	lsls	r1, r2, #5
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	440a      	add	r2, r1
 80021dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 fbd4 	bl	800699e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	461a      	mov	r2, r3
 8002204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002208:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800220a:	e300      	b.n	800280e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	f040 80fd 	bne.w	800241e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01b      	beq.n	8002264 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	3348      	adds	r3, #72	; 0x48
 800223c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	0159      	lsls	r1, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	440b      	add	r3, r1
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002250:	1ad1      	subs	r1, r2, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4403      	add	r3, r0
 8002260:	334c      	adds	r3, #76	; 0x4c
 8002262:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	335d      	adds	r3, #93	; 0x5d
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	3358      	adds	r3, #88	; 0x58
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	2301      	movs	r3, #1
 800229c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	333f      	adds	r3, #63	; 0x3f
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	440b      	add	r3, r1
 80022c2:	333f      	adds	r3, #63	; 0x3f
 80022c4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d121      	bne.n	800230e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	0151      	lsls	r1, r2, #5
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	440a      	add	r2, r1
 80022e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f004 fb52 	bl	800699e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	461a      	mov	r2, r3
 8002308:	2310      	movs	r3, #16
 800230a:	6093      	str	r3, [r2, #8]
 800230c:	e070      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	440b      	add	r3, r1
 800231c:	333f      	adds	r3, #63	; 0x3f
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d12a      	bne.n	800237a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4413      	add	r3, r2
 800232c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	0151      	lsls	r1, r2, #5
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	440a      	add	r2, r1
 800233a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800233e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002342:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	335c      	adds	r3, #92	; 0x5c
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	b2d8      	uxtb	r0, r3
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	335c      	adds	r3, #92	; 0x5c
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	4601      	mov	r1, r0
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f005 fe16 	bl	8007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002378:	e03a      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	333f      	adds	r3, #63	; 0x3f
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d12f      	bne.n	80023f0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	335c      	adds	r3, #92	; 0x5c
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	440b      	add	r3, r1
 80023b2:	3350      	adds	r3, #80	; 0x50
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f083 0301 	eor.w	r3, r3, #1
 80023ba:	b2d8      	uxtb	r0, r3
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	3350      	adds	r3, #80	; 0x50
 80023cc:	4602      	mov	r2, r0
 80023ce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	b2d8      	uxtb	r0, r3
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	335c      	adds	r3, #92	; 0x5c
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	4601      	mov	r1, r0
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f005 fdda 	bl	8007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	3350      	adds	r3, #80	; 0x50
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	f083 0301 	eor.w	r3, r3, #1
 8002406:	b2d8      	uxtb	r0, r3
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	3350      	adds	r3, #80	; 0x50
 8002418:	4602      	mov	r2, r0
 800241a:	701a      	strb	r2, [r3, #0]
}
 800241c:	e1f7      	b.n	800280e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4413      	add	r3, r2
 8002426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b02      	cmp	r3, #2
 8002432:	f040 811a 	bne.w	800266a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	0151      	lsls	r1, r2, #5
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	440a      	add	r2, r1
 800244c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002450:	f023 0302 	bic.w	r3, r3, #2
 8002454:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	335d      	adds	r3, #93	; 0x5d
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d10a      	bne.n	8002482 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	335c      	adds	r3, #92	; 0x5c
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	e0d9      	b.n	8002636 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	335d      	adds	r3, #93	; 0x5d
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d10a      	bne.n	80024ae <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	335c      	adds	r3, #92	; 0x5c
 80024a8:	2205      	movs	r2, #5
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e0c3      	b.n	8002636 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	335d      	adds	r3, #93	; 0x5d
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b06      	cmp	r3, #6
 80024c2:	d00a      	beq.n	80024da <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	440b      	add	r3, r1
 80024d2:	335d      	adds	r3, #93	; 0x5d
 80024d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d156      	bne.n	8002588 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	3358      	adds	r3, #88	; 0x58
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	1c59      	adds	r1, r3, #1
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4403      	add	r3, r0
 80024fc:	3358      	adds	r3, #88	; 0x58
 80024fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	440b      	add	r3, r1
 800250e:	3358      	adds	r3, #88	; 0x58
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d914      	bls.n	8002540 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	3358      	adds	r3, #88	; 0x58
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	335c      	adds	r3, #92	; 0x5c
 800253a:	2204      	movs	r2, #4
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e009      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	335c      	adds	r3, #92	; 0x5c
 8002550:	2202      	movs	r2, #2
 8002552:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4413      	add	r3, r2
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800256a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002572:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e056      	b.n	8002636 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	335d      	adds	r3, #93	; 0x5d
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d123      	bne.n	80025e6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	335c      	adds	r3, #92	; 0x5c
 80025ae:	2202      	movs	r2, #2
 80025b0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025c8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025d0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	461a      	mov	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	e027      	b.n	8002636 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	335d      	adds	r3, #93	; 0x5d
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b07      	cmp	r3, #7
 80025fa:	d11c      	bne.n	8002636 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	3358      	adds	r3, #88	; 0x58
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	1c59      	adds	r1, r3, #1
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4403      	add	r3, r0
 800261e:	3358      	adds	r3, #88	; 0x58
 8002620:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	335c      	adds	r3, #92	; 0x5c
 8002632:	2204      	movs	r2, #4
 8002634:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	461a      	mov	r2, r3
 8002644:	2302      	movs	r3, #2
 8002646:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	b2d8      	uxtb	r0, r3
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	440b      	add	r3, r1
 800265a:	335c      	adds	r3, #92	; 0x5c
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	4601      	mov	r1, r0
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f005 fc9e 	bl	8007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002668:	e0d1      	b.n	800280e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267c:	2b80      	cmp	r3, #128	; 0x80
 800267e:	d13e      	bne.n	80026fe <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	0151      	lsls	r1, r2, #5
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	440a      	add	r2, r1
 8002696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800269a:	f043 0302 	orr.w	r3, r3, #2
 800269e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	3358      	adds	r3, #88	; 0x58
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	1c59      	adds	r1, r3, #1
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4403      	add	r3, r0
 80026c2:	3358      	adds	r3, #88	; 0x58
 80026c4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	440b      	add	r3, r1
 80026d4:	335d      	adds	r3, #93	; 0x5d
 80026d6:	2206      	movs	r2, #6
 80026d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 f95a 	bl	800699e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	461a      	mov	r2, r3
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	6093      	str	r3, [r2, #8]
}
 80026fc:	e087      	b.n	800280e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b10      	cmp	r3, #16
 8002712:	d17c      	bne.n	800280e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	333f      	adds	r3, #63	; 0x3f
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b03      	cmp	r3, #3
 8002728:	d122      	bne.n	8002770 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	3358      	adds	r3, #88	; 0x58
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	0151      	lsls	r1, r2, #5
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	440a      	add	r2, r1
 8002754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f004 f918 	bl	800699e <USB_HC_Halt>
 800276e:	e045      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	440b      	add	r3, r1
 800277e:	333f      	adds	r3, #63	; 0x3f
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	333f      	adds	r3, #63	; 0x3f
 8002796:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002798:	2b02      	cmp	r3, #2
 800279a:	d12f      	bne.n	80027fc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	3358      	adds	r3, #88	; 0x58
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d121      	bne.n	80027fc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	335d      	adds	r3, #93	; 0x5d
 80027c8:	2203      	movs	r2, #3
 80027ca:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	0151      	lsls	r1, r2, #5
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	440a      	add	r2, r1
 80027e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 f8d1 	bl	800699e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	461a      	mov	r2, r3
 800280a:	2310      	movs	r3, #16
 800280c:	6093      	str	r3, [r2, #8]
}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	460b      	mov	r3, r1
 8002820:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4413      	add	r3, r2
 8002838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b04      	cmp	r3, #4
 8002844:	d119      	bne.n	800287a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4413      	add	r3, r2
 800284e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002852:	461a      	mov	r2, r3
 8002854:	2304      	movs	r3, #4
 8002856:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	0151      	lsls	r1, r2, #5
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	440a      	add	r2, r1
 800286e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002872:	f043 0302 	orr.w	r3, r3, #2
 8002876:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002878:	e33e      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b20      	cmp	r3, #32
 800288e:	d141      	bne.n	8002914 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	461a      	mov	r2, r3
 800289e:	2320      	movs	r3, #32
 80028a0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	333d      	adds	r3, #61	; 0x3d
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	f040 831f 	bne.w	8002ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	333d      	adds	r3, #61	; 0x3d
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	335c      	adds	r3, #92	; 0x5c
 80028de:	2202      	movs	r2, #2
 80028e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	0151      	lsls	r1, r2, #5
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	440a      	add	r2, r1
 80028f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f004 f846 	bl	800699e <USB_HC_Halt>
}
 8002912:	e2f1      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d13f      	bne.n	80029aa <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	335d      	adds	r3, #93	; 0x5d
 800293a:	2204      	movs	r2, #4
 800293c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	333d      	adds	r3, #61	; 0x3d
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	3358      	adds	r3, #88	; 0x58
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	0151      	lsls	r1, r2, #5
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	440a      	add	r2, r1
 800297c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f004 f804 	bl	800699e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a2:	461a      	mov	r2, r3
 80029a4:	2340      	movs	r3, #64	; 0x40
 80029a6:	6093      	str	r3, [r2, #8]
}
 80029a8:	e2a6      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c0:	d122      	bne.n	8002a08 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	0151      	lsls	r1, r2, #5
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	440a      	add	r2, r1
 80029d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 ffd6 	bl	800699e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	461a      	mov	r2, r3
 8002a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a04:	6093      	str	r3, [r2, #8]
}
 8002a06:	e277      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d135      	bne.n	8002a8a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3358      	adds	r3, #88	; 0x58
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	0151      	lsls	r1, r2, #5
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	440a      	add	r2, r1
 8002a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 ff9e 	bl	800699e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2301      	movs	r3, #1
 8002a72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	335d      	adds	r3, #93	; 0x5d
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
}
 8002a88:	e236      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d12b      	bne.n	8002af8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	2308      	movs	r3, #8
 8002ab0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	0151      	lsls	r1, r2, #5
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	440a      	add	r2, r1
 8002ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f003 ff5e 	bl	800699e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	335d      	adds	r3, #93	; 0x5d
 8002af2:	2205      	movs	r2, #5
 8002af4:	701a      	strb	r2, [r3, #0]
}
 8002af6:	e1ff      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	2b10      	cmp	r3, #16
 8002b0c:	d155      	bne.n	8002bba <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3358      	adds	r3, #88	; 0x58
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	335d      	adds	r3, #93	; 0x5d
 8002b32:	2203      	movs	r2, #3
 8002b34:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	440b      	add	r3, r1
 8002b44:	333d      	adds	r3, #61	; 0x3d
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d114      	bne.n	8002b76 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	440b      	add	r3, r1
 8002b5a:	333c      	adds	r3, #60	; 0x3c
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	333d      	adds	r3, #61	; 0x3d
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	0151      	lsls	r1, r2, #5
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	440a      	add	r2, r1
 8002b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 fefc 	bl	800699e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2310      	movs	r3, #16
 8002bb6:	6093      	str	r3, [r2, #8]
}
 8002bb8:	e19e      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	2b80      	cmp	r3, #128	; 0x80
 8002bce:	d12b      	bne.n	8002c28 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	0151      	lsls	r1, r2, #5
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	440a      	add	r2, r1
 8002be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bea:	f043 0302 	orr.w	r3, r3, #2
 8002bee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f003 fecf 	bl	800699e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	335d      	adds	r3, #93	; 0x5d
 8002c10:	2206      	movs	r2, #6
 8002c12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c20:	461a      	mov	r2, r3
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	6093      	str	r3, [r2, #8]
}
 8002c26:	e167      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3e:	d135      	bne.n	8002cac <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	0151      	lsls	r1, r2, #5
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	440a      	add	r2, r1
 8002c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c5a:	f043 0302 	orr.w	r3, r3, #2
 8002c5e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 fe97 	bl	800699e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2310      	movs	r3, #16
 8002c80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	335d      	adds	r3, #93	; 0x5d
 8002ca6:	2208      	movs	r2, #8
 8002ca8:	701a      	strb	r2, [r3, #0]
}
 8002caa:	e125      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	f040 811a 	bne.w	8002ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	0151      	lsls	r1, r2, #5
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	440a      	add	r2, r1
 8002cda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cde:	f023 0302 	bic.w	r3, r3, #2
 8002ce2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	335d      	adds	r3, #93	; 0x5d
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d137      	bne.n	8002d6a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	335c      	adds	r3, #92	; 0x5c
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	333f      	adds	r3, #63	; 0x3f
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d00b      	beq.n	8002d3c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	333f      	adds	r3, #63	; 0x3f
 8002d34:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	f040 80c5 	bne.w	8002ec6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	3351      	adds	r3, #81	; 0x51
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	f083 0301 	eor.w	r3, r3, #1
 8002d52:	b2d8      	uxtb	r0, r3
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	3351      	adds	r3, #81	; 0x51
 8002d64:	4602      	mov	r2, r0
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	e0ad      	b.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	335d      	adds	r3, #93	; 0x5d
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d10a      	bne.n	8002d96 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	335c      	adds	r3, #92	; 0x5c
 8002d90:	2202      	movs	r2, #2
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e097      	b.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	335d      	adds	r3, #93	; 0x5d
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d10a      	bne.n	8002dc2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	335c      	adds	r3, #92	; 0x5c
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e081      	b.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	335d      	adds	r3, #93	; 0x5d
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d10a      	bne.n	8002dee <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	335c      	adds	r3, #92	; 0x5c
 8002de8:	2205      	movs	r2, #5
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e06b      	b.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	440b      	add	r3, r1
 8002dfc:	335d      	adds	r3, #93	; 0x5d
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b06      	cmp	r3, #6
 8002e02:	d00a      	beq.n	8002e1a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	335d      	adds	r3, #93	; 0x5d
 8002e14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d155      	bne.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	440b      	add	r3, r1
 8002e28:	3358      	adds	r3, #88	; 0x58
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	1c59      	adds	r1, r3, #1
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4403      	add	r3, r0
 8002e3c:	3358      	adds	r3, #88	; 0x58
 8002e3e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3358      	adds	r3, #88	; 0x58
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d914      	bls.n	8002e80 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	440b      	add	r3, r1
 8002e64:	3358      	adds	r3, #88	; 0x58
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	335c      	adds	r3, #92	; 0x5c
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	e009      	b.n	8002e94 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	335c      	adds	r3, #92	; 0x5c
 8002e90:	2202      	movs	r2, #2
 8002e92:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eaa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eb2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	b2d8      	uxtb	r0, r3
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	335c      	adds	r3, #92	; 0x5c
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4601      	mov	r1, r0
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f005 f856 	bl	8007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ef8:	bf00      	nop
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	; 0x28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	0c5b      	lsrs	r3, r3, #17
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f34:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d003      	beq.n	8002f44 <HCD_RXQLVL_IRQHandler+0x44>
 8002f3c:	2b05      	cmp	r3, #5
 8002f3e:	f000 8082 	beq.w	8003046 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f42:	e083      	b.n	800304c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d07f      	beq.n	800304a <HCD_RXQLVL_IRQHandler+0x14a>
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	3344      	adds	r3, #68	; 0x44
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d074      	beq.n	800304a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	3344      	adds	r3, #68	; 0x44
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f003 f8ef 	bl	800615e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3344      	adds	r3, #68	; 0x44
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	18d1      	adds	r1, r2, r3
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4403      	add	r3, r0
 8002fa4:	3344      	adds	r3, #68	; 0x44
 8002fa6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	440b      	add	r3, r1
 8002fb6:	334c      	adds	r3, #76	; 0x4c
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	18d1      	adds	r1, r2, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4403      	add	r3, r0
 8002fcc:	334c      	adds	r3, #76	; 0x4c
 8002fce:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HCD_RXQLVL_IRQHandler+0x154>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d031      	beq.n	800304a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ffc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003004:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	4413      	add	r3, r2
 800300e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	440b      	add	r3, r1
 8003026:	3350      	adds	r3, #80	; 0x50
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	f083 0301 	eor.w	r3, r3, #1
 800302e:	b2d8      	uxtb	r0, r3
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	3350      	adds	r3, #80	; 0x50
 8003040:	4602      	mov	r2, r0
 8003042:	701a      	strb	r2, [r3, #0]
      break;
 8003044:	e001      	b.n	800304a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800304a:	bf00      	nop
  }
}
 800304c:	bf00      	nop
 800304e:	3728      	adds	r7, #40	; 0x28
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	1ff80000 	.word	0x1ff80000

08003058 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003084:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b02      	cmp	r3, #2
 800308e:	d10b      	bne.n	80030a8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d102      	bne.n	80030a0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f004 ff66 	bl	8007f6c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f043 0302 	orr.w	r3, r3, #2
 80030a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d132      	bne.n	8003118 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f043 0308 	orr.w	r3, r3, #8
 80030b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d126      	bne.n	8003112 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d113      	bne.n	80030f4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80030d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030d6:	d106      	bne.n	80030e6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2102      	movs	r1, #2
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 f978 	bl	80063d4 <USB_InitFSLSPClkSel>
 80030e4:	e011      	b.n	800310a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2101      	movs	r1, #1
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 f971 	bl	80063d4 <USB_InitFSLSPClkSel>
 80030f2:	e00a      	b.n	800310a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003102:	461a      	mov	r2, r3
 8003104:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003108:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f004 ff58 	bl	8007fc0 <HAL_HCD_PortEnabled_Callback>
 8003110:	e002      	b.n	8003118 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f004 ff62 	bl	8007fdc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b20      	cmp	r3, #32
 8003120:	d103      	bne.n	800312a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f043 0320 	orr.w	r3, r3, #32
 8003128:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	6013      	str	r3, [r2, #0]
}
 8003136:	bf00      	nop
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e11f      	b.n	8003392 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd fd9a 	bl	8000ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2224      	movs	r2, #36	; 0x24
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031a4:	f001 f9de 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 80031a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4a7b      	ldr	r2, [pc, #492]	; (800339c <HAL_I2C_Init+0x25c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d807      	bhi.n	80031c4 <HAL_I2C_Init+0x84>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4a7a      	ldr	r2, [pc, #488]	; (80033a0 <HAL_I2C_Init+0x260>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	bf94      	ite	ls
 80031bc:	2301      	movls	r3, #1
 80031be:	2300      	movhi	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	e006      	b.n	80031d2 <HAL_I2C_Init+0x92>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4a77      	ldr	r2, [pc, #476]	; (80033a4 <HAL_I2C_Init+0x264>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	bf94      	ite	ls
 80031cc:	2301      	movls	r3, #1
 80031ce:	2300      	movhi	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0db      	b.n	8003392 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a72      	ldr	r2, [pc, #456]	; (80033a8 <HAL_I2C_Init+0x268>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0c9b      	lsrs	r3, r3, #18
 80031e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4a64      	ldr	r2, [pc, #400]	; (800339c <HAL_I2C_Init+0x25c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d802      	bhi.n	8003214 <HAL_I2C_Init+0xd4>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	3301      	adds	r3, #1
 8003212:	e009      	b.n	8003228 <HAL_I2C_Init+0xe8>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800321a:	fb02 f303 	mul.w	r3, r2, r3
 800321e:	4a63      	ldr	r2, [pc, #396]	; (80033ac <HAL_I2C_Init+0x26c>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	099b      	lsrs	r3, r3, #6
 8003226:	3301      	adds	r3, #1
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	430b      	orrs	r3, r1
 800322e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800323a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4956      	ldr	r1, [pc, #344]	; (800339c <HAL_I2C_Init+0x25c>)
 8003244:	428b      	cmp	r3, r1
 8003246:	d80d      	bhi.n	8003264 <HAL_I2C_Init+0x124>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1e59      	subs	r1, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	fbb1 f3f3 	udiv	r3, r1, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325c:	2b04      	cmp	r3, #4
 800325e:	bf38      	it	cc
 8003260:	2304      	movcc	r3, #4
 8003262:	e04f      	b.n	8003304 <HAL_I2C_Init+0x1c4>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d111      	bne.n	8003290 <HAL_I2C_Init+0x150>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1e58      	subs	r0, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6859      	ldr	r1, [r3, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	440b      	add	r3, r1
 800327a:	fbb0 f3f3 	udiv	r3, r0, r3
 800327e:	3301      	adds	r3, #1
 8003280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e012      	b.n	80032b6 <HAL_I2C_Init+0x176>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1e58      	subs	r0, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	0099      	lsls	r1, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Init+0x17e>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e022      	b.n	8003304 <HAL_I2C_Init+0x1c4>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10e      	bne.n	80032e4 <HAL_I2C_Init+0x1a4>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1e58      	subs	r0, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6859      	ldr	r1, [r3, #4]
 80032ce:	460b      	mov	r3, r1
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	440b      	add	r3, r1
 80032d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d8:	3301      	adds	r3, #1
 80032da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032e2:	e00f      	b.n	8003304 <HAL_I2C_Init+0x1c4>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1e58      	subs	r0, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	0099      	lsls	r1, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	6809      	ldr	r1, [r1, #0]
 8003308:	4313      	orrs	r3, r2
 800330a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69da      	ldr	r2, [r3, #28]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003332:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6911      	ldr	r1, [r2, #16]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68d2      	ldr	r2, [r2, #12]
 800333e:	4311      	orrs	r1, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	430b      	orrs	r3, r1
 8003346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	000186a0 	.word	0x000186a0
 80033a0:	001e847f 	.word	0x001e847f
 80033a4:	003d08ff 	.word	0x003d08ff
 80033a8:	431bde83 	.word	0x431bde83
 80033ac:	10624dd3 	.word	0x10624dd3

080033b0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e128      	b.n	8003614 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a90      	ldr	r2, [pc, #576]	; (800361c <HAL_I2S_Init+0x26c>)
 80033da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7fd fca7 	bl	8000d30 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033f8:	f023 030f 	bic.w	r3, r3, #15
 80033fc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2202      	movs	r2, #2
 8003404:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d060      	beq.n	80034d0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003416:	2310      	movs	r3, #16
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	e001      	b.n	8003420 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800341c:	2320      	movs	r3, #32
 800341e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b20      	cmp	r3, #32
 8003426:	d802      	bhi.n	800342e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800342e:	2001      	movs	r0, #1
 8003430:	f001 f9a2 	bl	8004778 <HAL_RCCEx_GetPeriphCLKFreq>
 8003434:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343e:	d125      	bne.n	800348c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d010      	beq.n	800346a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	461a      	mov	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	3305      	adds	r3, #5
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	e01f      	b.n	80034aa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	fbb2 f2f3 	udiv	r2, r2, r3
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	461a      	mov	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	fbb2 f3f3 	udiv	r3, r2, r3
 8003486:	3305      	adds	r3, #5
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	e00e      	b.n	80034aa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	fbb2 f2f3 	udiv	r2, r2, r3
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	461a      	mov	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	3305      	adds	r3, #5
 80034a8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4a5c      	ldr	r2, [pc, #368]	; (8003620 <HAL_I2S_Init+0x270>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	08db      	lsrs	r3, r3, #3
 80034b4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	e003      	b.n	80034d8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80034d0:	2302      	movs	r3, #2
 80034d2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d902      	bls.n	80034e4 <HAL_I2S_Init+0x134>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	2bff      	cmp	r3, #255	; 0xff
 80034e2:	d907      	bls.n	80034f4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	f043 0210 	orr.w	r2, r3, #16
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e08f      	b.n	8003614 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	ea42 0103 	orr.w	r1, r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	430a      	orrs	r2, r1
 8003506:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003512:	f023 030f 	bic.w	r3, r3, #15
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6851      	ldr	r1, [r2, #4]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6892      	ldr	r2, [r2, #8]
 800351e:	4311      	orrs	r1, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	68d2      	ldr	r2, [r2, #12]
 8003524:	4311      	orrs	r1, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6992      	ldr	r2, [r2, #24]
 800352a:	430a      	orrs	r2, r1
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003536:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d161      	bne.n	8003604 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a38      	ldr	r2, [pc, #224]	; (8003624 <HAL_I2S_Init+0x274>)
 8003544:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a37      	ldr	r2, [pc, #220]	; (8003628 <HAL_I2S_Init+0x278>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d101      	bne.n	8003554 <HAL_I2S_Init+0x1a4>
 8003550:	4b36      	ldr	r3, [pc, #216]	; (800362c <HAL_I2S_Init+0x27c>)
 8003552:	e001      	b.n	8003558 <HAL_I2S_Init+0x1a8>
 8003554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	4932      	ldr	r1, [pc, #200]	; (8003628 <HAL_I2S_Init+0x278>)
 8003560:	428a      	cmp	r2, r1
 8003562:	d101      	bne.n	8003568 <HAL_I2S_Init+0x1b8>
 8003564:	4a31      	ldr	r2, [pc, #196]	; (800362c <HAL_I2S_Init+0x27c>)
 8003566:	e001      	b.n	800356c <HAL_I2S_Init+0x1bc>
 8003568:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800356c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003570:	f023 030f 	bic.w	r3, r3, #15
 8003574:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <HAL_I2S_Init+0x278>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_I2S_Init+0x1d4>
 8003580:	4b2a      	ldr	r3, [pc, #168]	; (800362c <HAL_I2S_Init+0x27c>)
 8003582:	e001      	b.n	8003588 <HAL_I2S_Init+0x1d8>
 8003584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003588:	2202      	movs	r2, #2
 800358a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a25      	ldr	r2, [pc, #148]	; (8003628 <HAL_I2S_Init+0x278>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_I2S_Init+0x1ea>
 8003596:	4b25      	ldr	r3, [pc, #148]	; (800362c <HAL_I2S_Init+0x27c>)
 8003598:	e001      	b.n	800359e <HAL_I2S_Init+0x1ee>
 800359a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035aa:	d003      	beq.n	80035b4 <HAL_I2S_Init+0x204>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d103      	bne.n	80035bc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80035b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	e001      	b.n	80035c0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	b299      	uxth	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80035d6:	4303      	orrs	r3, r0
 80035d8:	b29b      	uxth	r3, r3
 80035da:	430b      	orrs	r3, r1
 80035dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80035de:	4313      	orrs	r3, r2
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	897b      	ldrh	r3, [r7, #10]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035ec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a0d      	ldr	r2, [pc, #52]	; (8003628 <HAL_I2S_Init+0x278>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d101      	bne.n	80035fc <HAL_I2S_Init+0x24c>
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <HAL_I2S_Init+0x27c>)
 80035fa:	e001      	b.n	8003600 <HAL_I2S_Init+0x250>
 80035fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003600:	897a      	ldrh	r2, [r7, #10]
 8003602:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	08003727 	.word	0x08003727
 8003620:	cccccccd 	.word	0xcccccccd
 8003624:	0800383d 	.word	0x0800383d
 8003628:	40003800 	.word	0x40003800
 800362c:	40003400 	.word	0x40003400

08003630 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	881a      	ldrh	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c9a      	adds	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10e      	bne.n	80036c0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ffb8 	bl	8003630 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	b292      	uxth	r2, r2
 80036dc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	1c9a      	adds	r2, r3, #2
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10e      	bne.n	800371e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800370e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff93 	bl	8003644 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b04      	cmp	r3, #4
 8003740:	d13a      	bne.n	80037b8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b01      	cmp	r3, #1
 800374a:	d109      	bne.n	8003760 <I2S_IRQHandler+0x3a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d102      	bne.n	8003760 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ffb4 	bl	80036c8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d126      	bne.n	80037b8 <I2S_IRQHandler+0x92>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b20      	cmp	r3, #32
 8003776:	d11f      	bne.n	80037b8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003786:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003788:	2300      	movs	r3, #0
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f043 0202 	orr.w	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ff50 	bl	8003658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d136      	bne.n	8003832 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d109      	bne.n	80037e2 <I2S_IRQHandler+0xbc>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d102      	bne.n	80037e2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff45 	bl	800366c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d122      	bne.n	8003832 <I2S_IRQHandler+0x10c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d11b      	bne.n	8003832 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003808:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f043 0204 	orr.w	r2, r3, #4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff ff13 	bl	8003658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4aa2      	ldr	r2, [pc, #648]	; (8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003856:	4ba2      	ldr	r3, [pc, #648]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003858:	e001      	b.n	800385e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800385a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a9b      	ldr	r2, [pc, #620]	; (8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d101      	bne.n	8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003874:	4b9a      	ldr	r3, [pc, #616]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003876:	e001      	b.n	800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003888:	d004      	beq.n	8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f040 8099 	bne.w	80039c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b02      	cmp	r3, #2
 800389c:	d107      	bne.n	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f925 	bl	8003af8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d107      	bne.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f9c8 	bl	8003c58 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d13a      	bne.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d035      	beq.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a7e      	ldr	r2, [pc, #504]	; (8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80038e6:	4b7e      	ldr	r3, [pc, #504]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038e8:	e001      	b.n	80038ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80038ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4979      	ldr	r1, [pc, #484]	; (8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038f6:	428b      	cmp	r3, r1
 80038f8:	d101      	bne.n	80038fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038fa:	4b79      	ldr	r3, [pc, #484]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038fc:	e001      	b.n	8003902 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003902:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003906:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003916:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f043 0202 	orr.w	r2, r3, #2
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff fe88 	bl	8003658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b08      	cmp	r3, #8
 8003950:	f040 80be 	bne.w	8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80b8 	beq.w	8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800396e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a59      	ldr	r2, [pc, #356]	; (8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d101      	bne.n	800397e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800397a:	4b59      	ldr	r3, [pc, #356]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800397c:	e001      	b.n	8003982 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800397e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4954      	ldr	r1, [pc, #336]	; (8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800398a:	428b      	cmp	r3, r1
 800398c:	d101      	bne.n	8003992 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800398e:	4b54      	ldr	r3, [pc, #336]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003990:	e001      	b.n	8003996 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003996:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800399a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800399c:	2300      	movs	r3, #0
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f043 0204 	orr.w	r2, r3, #4
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff fe4a 	bl	8003658 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039c4:	e084      	b.n	8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d107      	bne.n	80039e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8be 	bl	8003b5c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d107      	bne.n	80039fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f8fd 	bl	8003bf4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d12f      	bne.n	8003a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d02a      	beq.n	8003a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a1c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a2e      	ldr	r2, [pc, #184]	; (8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d101      	bne.n	8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a28:	4b2d      	ldr	r3, [pc, #180]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a2a:	e001      	b.n	8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4929      	ldr	r1, [pc, #164]	; (8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	d101      	bne.n	8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a3c:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a3e:	e001      	b.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	f043 0202 	orr.w	r2, r3, #2
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fdfa 	bl	8003658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d131      	bne.n	8003ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d02c      	beq.n	8003ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a17      	ldr	r2, [pc, #92]	; (8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d101      	bne.n	8003a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a82:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a84:	e001      	b.n	8003a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4912      	ldr	r1, [pc, #72]	; (8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a92:	428b      	cmp	r3, r1
 8003a94:	d101      	bne.n	8003a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a98:	e001      	b.n	8003a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003a9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aa2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ab2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac0:	f043 0204 	orr.w	r2, r3, #4
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff fdc5 	bl	8003658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ace:	e000      	b.n	8003ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ad0:	bf00      	nop
}
 8003ad2:	bf00      	nop
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40003800 	.word	0x40003800
 8003ae0:	40003400 	.word	0x40003400

08003ae4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	1c99      	adds	r1, r3, #2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6251      	str	r1, [r2, #36]	; 0x24
 8003b0a:	881a      	ldrh	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d113      	bne.n	8003b52 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d106      	bne.n	8003b52 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff ffc9 	bl	8003ae4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c99      	adds	r1, r3, #2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6251      	str	r1, [r2, #36]	; 0x24
 8003b6e:	8819      	ldrh	r1, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <I2SEx_TxISR_I2SExt+0x90>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d101      	bne.n	8003b7e <I2SEx_TxISR_I2SExt+0x22>
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <I2SEx_TxISR_I2SExt+0x94>)
 8003b7c:	e001      	b.n	8003b82 <I2SEx_TxISR_I2SExt+0x26>
 8003b7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b82:	460a      	mov	r2, r1
 8003b84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d121      	bne.n	8003be2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <I2SEx_TxISR_I2SExt+0x90>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d101      	bne.n	8003bac <I2SEx_TxISR_I2SExt+0x50>
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <I2SEx_TxISR_I2SExt+0x94>)
 8003baa:	e001      	b.n	8003bb0 <I2SEx_TxISR_I2SExt+0x54>
 8003bac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	490d      	ldr	r1, [pc, #52]	; (8003bec <I2SEx_TxISR_I2SExt+0x90>)
 8003bb8:	428b      	cmp	r3, r1
 8003bba:	d101      	bne.n	8003bc0 <I2SEx_TxISR_I2SExt+0x64>
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <I2SEx_TxISR_I2SExt+0x94>)
 8003bbe:	e001      	b.n	8003bc4 <I2SEx_TxISR_I2SExt+0x68>
 8003bc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bc8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff ff81 	bl	8003ae4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40003800 	.word	0x40003800
 8003bf0:	40003400 	.word	0x40003400

08003bf4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68d8      	ldr	r0, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	1c99      	adds	r1, r3, #2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c0c:	b282      	uxth	r2, r0
 8003c0e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d113      	bne.n	8003c50 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c36:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff ff4a 	bl	8003ae4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <I2SEx_RxISR_I2SExt+0x90>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <I2SEx_RxISR_I2SExt+0x16>
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <I2SEx_RxISR_I2SExt+0x94>)
 8003c6c:	e001      	b.n	8003c72 <I2SEx_RxISR_I2SExt+0x1a>
 8003c6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c72:	68d8      	ldr	r0, [r3, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	1c99      	adds	r1, r3, #2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c7e:	b282      	uxth	r2, r0
 8003c80:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d121      	bne.n	8003cde <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a12      	ldr	r2, [pc, #72]	; (8003ce8 <I2SEx_RxISR_I2SExt+0x90>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d101      	bne.n	8003ca8 <I2SEx_RxISR_I2SExt+0x50>
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <I2SEx_RxISR_I2SExt+0x94>)
 8003ca6:	e001      	b.n	8003cac <I2SEx_RxISR_I2SExt+0x54>
 8003ca8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	490d      	ldr	r1, [pc, #52]	; (8003ce8 <I2SEx_RxISR_I2SExt+0x90>)
 8003cb4:	428b      	cmp	r3, r1
 8003cb6:	d101      	bne.n	8003cbc <I2SEx_RxISR_I2SExt+0x64>
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <I2SEx_RxISR_I2SExt+0x94>)
 8003cba:	e001      	b.n	8003cc0 <I2SEx_RxISR_I2SExt+0x68>
 8003cbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cc4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d106      	bne.n	8003cde <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ff03 	bl	8003ae4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40003800 	.word	0x40003800
 8003cec:	40003400 	.word	0x40003400

08003cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e25b      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d075      	beq.n	8003dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d0e:	4ba3      	ldr	r3, [pc, #652]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d00c      	beq.n	8003d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1a:	4ba0      	ldr	r3, [pc, #640]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d112      	bne.n	8003d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d26:	4b9d      	ldr	r3, [pc, #628]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d32:	d10b      	bne.n	8003d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d34:	4b99      	ldr	r3, [pc, #612]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d05b      	beq.n	8003df8 <HAL_RCC_OscConfig+0x108>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d157      	bne.n	8003df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e236      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d54:	d106      	bne.n	8003d64 <HAL_RCC_OscConfig+0x74>
 8003d56:	4b91      	ldr	r3, [pc, #580]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a90      	ldr	r2, [pc, #576]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	e01d      	b.n	8003da0 <HAL_RCC_OscConfig+0xb0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x98>
 8003d6e:	4b8b      	ldr	r3, [pc, #556]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a8a      	ldr	r2, [pc, #552]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b88      	ldr	r3, [pc, #544]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a87      	ldr	r2, [pc, #540]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e00b      	b.n	8003da0 <HAL_RCC_OscConfig+0xb0>
 8003d88:	4b84      	ldr	r3, [pc, #528]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a83      	ldr	r2, [pc, #524]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b81      	ldr	r3, [pc, #516]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a80      	ldr	r2, [pc, #512]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d013      	beq.n	8003dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fd fa02 	bl	80011b0 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fd f9fe 	bl	80011b0 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e1fb      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	4b76      	ldr	r3, [pc, #472]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0xc0>
 8003dce:	e014      	b.n	8003dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd f9ee 	bl	80011b0 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fd f9ea 	bl	80011b0 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e1e7      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	4b6c      	ldr	r3, [pc, #432]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0xe8>
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d063      	beq.n	8003ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e06:	4b65      	ldr	r3, [pc, #404]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e12:	4b62      	ldr	r3, [pc, #392]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d11c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e1e:	4b5f      	ldr	r3, [pc, #380]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d116      	bne.n	8003e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2a:	4b5c      	ldr	r3, [pc, #368]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_RCC_OscConfig+0x152>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e1bb      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e42:	4b56      	ldr	r3, [pc, #344]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4952      	ldr	r1, [pc, #328]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e56:	e03a      	b.n	8003ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e60:	4b4f      	ldr	r3, [pc, #316]	; (8003fa0 <HAL_RCC_OscConfig+0x2b0>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fd f9a3 	bl	80011b0 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e6e:	f7fd f99f 	bl	80011b0 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e19c      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e80:	4b46      	ldr	r3, [pc, #280]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	4b43      	ldr	r3, [pc, #268]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4940      	ldr	r1, [pc, #256]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]
 8003ea0:	e015      	b.n	8003ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea2:	4b3f      	ldr	r3, [pc, #252]	; (8003fa0 <HAL_RCC_OscConfig+0x2b0>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fd f982 	bl	80011b0 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb0:	f7fd f97e 	bl	80011b0 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e17b      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec2:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d030      	beq.n	8003f3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d016      	beq.n	8003f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee2:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <HAL_RCC_OscConfig+0x2b4>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee8:	f7fd f962 	bl	80011b0 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef0:	f7fd f95e 	bl	80011b0 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e15b      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f02:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x200>
 8003f0e:	e015      	b.n	8003f3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f10:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <HAL_RCC_OscConfig+0x2b4>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f16:	f7fd f94b 	bl	80011b0 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f1e:	f7fd f947 	bl	80011b0 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e144      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f30:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f0      	bne.n	8003f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80a0 	beq.w	800408a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f4e:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10f      	bne.n	8003f7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f76:	2301      	movs	r3, #1
 8003f78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_RCC_OscConfig+0x2b8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d121      	bne.n	8003fca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f86:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <HAL_RCC_OscConfig+0x2b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <HAL_RCC_OscConfig+0x2b8>)
 8003f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f92:	f7fd f90d 	bl	80011b0 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f98:	e011      	b.n	8003fbe <HAL_RCC_OscConfig+0x2ce>
 8003f9a:	bf00      	nop
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	42470000 	.word	0x42470000
 8003fa4:	42470e80 	.word	0x42470e80
 8003fa8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fac:	f7fd f900 	bl	80011b0 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0fd      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbe:	4b81      	ldr	r3, [pc, #516]	; (80041c4 <HAL_RCC_OscConfig+0x4d4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x2f0>
 8003fd2:	4b7d      	ldr	r3, [pc, #500]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	4a7c      	ldr	r2, [pc, #496]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fde:	e01c      	b.n	800401a <HAL_RCC_OscConfig+0x32a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b05      	cmp	r3, #5
 8003fe6:	d10c      	bne.n	8004002 <HAL_RCC_OscConfig+0x312>
 8003fe8:	4b77      	ldr	r3, [pc, #476]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a76      	ldr	r2, [pc, #472]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8003fee:	f043 0304 	orr.w	r3, r3, #4
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff4:	4b74      	ldr	r3, [pc, #464]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4a73      	ldr	r2, [pc, #460]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8004000:	e00b      	b.n	800401a <HAL_RCC_OscConfig+0x32a>
 8004002:	4b71      	ldr	r3, [pc, #452]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004006:	4a70      	ldr	r2, [pc, #448]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	6713      	str	r3, [r2, #112]	; 0x70
 800400e:	4b6e      	ldr	r3, [pc, #440]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a6d      	ldr	r2, [pc, #436]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8004014:	f023 0304 	bic.w	r3, r3, #4
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d015      	beq.n	800404e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004022:	f7fd f8c5 	bl	80011b0 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004028:	e00a      	b.n	8004040 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800402a:	f7fd f8c1 	bl	80011b0 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	f241 3288 	movw	r2, #5000	; 0x1388
 8004038:	4293      	cmp	r3, r2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e0bc      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004040:	4b61      	ldr	r3, [pc, #388]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0ee      	beq.n	800402a <HAL_RCC_OscConfig+0x33a>
 800404c:	e014      	b.n	8004078 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404e:	f7fd f8af 	bl	80011b0 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004054:	e00a      	b.n	800406c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004056:	f7fd f8ab 	bl	80011b0 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	; 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e0a6      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406c:	4b56      	ldr	r3, [pc, #344]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1ee      	bne.n	8004056 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d105      	bne.n	800408a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800407e:	4b52      	ldr	r3, [pc, #328]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	4a51      	ldr	r2, [pc, #324]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8004084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004088:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8092 	beq.w	80041b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004094:	4b4c      	ldr	r3, [pc, #304]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	2b08      	cmp	r3, #8
 800409e:	d05c      	beq.n	800415a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d141      	bne.n	800412c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a8:	4b48      	ldr	r3, [pc, #288]	; (80041cc <HAL_RCC_OscConfig+0x4dc>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ae:	f7fd f87f 	bl	80011b0 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b6:	f7fd f87b 	bl	80011b0 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e078      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c8:	4b3f      	ldr	r3, [pc, #252]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f0      	bne.n	80040b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	019b      	lsls	r3, r3, #6
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	041b      	lsls	r3, r3, #16
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	061b      	lsls	r3, r3, #24
 80040f8:	4933      	ldr	r1, [pc, #204]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040fe:	4b33      	ldr	r3, [pc, #204]	; (80041cc <HAL_RCC_OscConfig+0x4dc>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004104:	f7fd f854 	bl	80011b0 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410c:	f7fd f850 	bl	80011b0 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e04d      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411e:	4b2a      	ldr	r3, [pc, #168]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x41c>
 800412a:	e045      	b.n	80041b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412c:	4b27      	ldr	r3, [pc, #156]	; (80041cc <HAL_RCC_OscConfig+0x4dc>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7fd f83d 	bl	80011b0 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413a:	f7fd f839 	bl	80011b0 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e036      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414c:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x44a>
 8004158:	e02e      	b.n	80041b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e029      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004166:	4b18      	ldr	r3, [pc, #96]	; (80041c8 <HAL_RCC_OscConfig+0x4d8>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	429a      	cmp	r2, r3
 8004178:	d11c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d115      	bne.n	80041b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800418e:	4013      	ands	r3, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004194:	4293      	cmp	r3, r2
 8004196:	d10d      	bne.n	80041b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d106      	bne.n	80041b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40007000 	.word	0x40007000
 80041c8:	40023800 	.word	0x40023800
 80041cc:	42470060 	.word	0x42470060

080041d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0cc      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e4:	4b68      	ldr	r3, [pc, #416]	; (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d90c      	bls.n	800420c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b65      	ldr	r3, [pc, #404]	; (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fa:	4b63      	ldr	r3, [pc, #396]	; (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0b8      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d020      	beq.n	800425a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004224:	4b59      	ldr	r3, [pc, #356]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	4a58      	ldr	r2, [pc, #352]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800422e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800423c:	4b53      	ldr	r3, [pc, #332]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a52      	ldr	r2, [pc, #328]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004248:	4b50      	ldr	r3, [pc, #320]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	494d      	ldr	r1, [pc, #308]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d044      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d107      	bne.n	800427e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426e:	4b47      	ldr	r3, [pc, #284]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d119      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e07f      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d003      	beq.n	800428e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800428a:	2b03      	cmp	r3, #3
 800428c:	d107      	bne.n	800429e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428e:	4b3f      	ldr	r3, [pc, #252]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e06f      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429e:	4b3b      	ldr	r3, [pc, #236]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e067      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ae:	4b37      	ldr	r3, [pc, #220]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f023 0203 	bic.w	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4934      	ldr	r1, [pc, #208]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c0:	f7fc ff76 	bl	80011b0 <HAL_GetTick>
 80042c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	e00a      	b.n	80042de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c8:	f7fc ff72 	bl	80011b0 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e04f      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	4b2b      	ldr	r3, [pc, #172]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 020c 	and.w	r2, r3, #12
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d1eb      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042f0:	4b25      	ldr	r3, [pc, #148]	; (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d20c      	bcs.n	8004318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b22      	ldr	r3, [pc, #136]	; (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004306:	4b20      	ldr	r3, [pc, #128]	; (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e032      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004324:	4b19      	ldr	r3, [pc, #100]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4916      	ldr	r1, [pc, #88]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	4313      	orrs	r3, r2
 8004334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	490e      	ldr	r1, [pc, #56]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004356:	f000 f821 	bl	800439c <HAL_RCC_GetSysClockFreq>
 800435a:	4601      	mov	r1, r0
 800435c:	4b0b      	ldr	r3, [pc, #44]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004368:	5cd3      	ldrb	r3, [r2, r3]
 800436a:	fa21 f303 	lsr.w	r3, r1, r3
 800436e:	4a09      	ldr	r2, [pc, #36]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004372:	4b09      	ldr	r3, [pc, #36]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fc fed6 	bl	8001128 <HAL_InitTick>

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40023c00 	.word	0x40023c00
 800438c:	40023800 	.word	0x40023800
 8004390:	08008560 	.word	0x08008560
 8004394:	20000000 	.word	0x20000000
 8004398:	20000004 	.word	0x20000004

0800439c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800439c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	607b      	str	r3, [r7, #4]
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	2300      	movs	r3, #0
 80043ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043b2:	4b63      	ldr	r3, [pc, #396]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d007      	beq.n	80043ce <HAL_RCC_GetSysClockFreq+0x32>
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d008      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x38>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f040 80b4 	bne.w	8004530 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043c8:	4b5e      	ldr	r3, [pc, #376]	; (8004544 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043ca:	60bb      	str	r3, [r7, #8]
       break;
 80043cc:	e0b3      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ce:	4b5e      	ldr	r3, [pc, #376]	; (8004548 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80043d0:	60bb      	str	r3, [r7, #8]
      break;
 80043d2:	e0b0      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d4:	4b5a      	ldr	r3, [pc, #360]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043de:	4b58      	ldr	r3, [pc, #352]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d04a      	beq.n	8004480 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ea:	4b55      	ldr	r3, [pc, #340]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	099b      	lsrs	r3, r3, #6
 80043f0:	f04f 0400 	mov.w	r4, #0
 80043f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	ea03 0501 	and.w	r5, r3, r1
 8004400:	ea04 0602 	and.w	r6, r4, r2
 8004404:	4629      	mov	r1, r5
 8004406:	4632      	mov	r2, r6
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	f04f 0400 	mov.w	r4, #0
 8004410:	0154      	lsls	r4, r2, #5
 8004412:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004416:	014b      	lsls	r3, r1, #5
 8004418:	4619      	mov	r1, r3
 800441a:	4622      	mov	r2, r4
 800441c:	1b49      	subs	r1, r1, r5
 800441e:	eb62 0206 	sbc.w	r2, r2, r6
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	f04f 0400 	mov.w	r4, #0
 800442a:	0194      	lsls	r4, r2, #6
 800442c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004430:	018b      	lsls	r3, r1, #6
 8004432:	1a5b      	subs	r3, r3, r1
 8004434:	eb64 0402 	sbc.w	r4, r4, r2
 8004438:	f04f 0100 	mov.w	r1, #0
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	00e2      	lsls	r2, r4, #3
 8004442:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004446:	00d9      	lsls	r1, r3, #3
 8004448:	460b      	mov	r3, r1
 800444a:	4614      	mov	r4, r2
 800444c:	195b      	adds	r3, r3, r5
 800444e:	eb44 0406 	adc.w	r4, r4, r6
 8004452:	f04f 0100 	mov.w	r1, #0
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	0262      	lsls	r2, r4, #9
 800445c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004460:	0259      	lsls	r1, r3, #9
 8004462:	460b      	mov	r3, r1
 8004464:	4614      	mov	r4, r2
 8004466:	4618      	mov	r0, r3
 8004468:	4621      	mov	r1, r4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f04f 0400 	mov.w	r4, #0
 8004470:	461a      	mov	r2, r3
 8004472:	4623      	mov	r3, r4
 8004474:	f7fb fea8 	bl	80001c8 <__aeabi_uldivmod>
 8004478:	4603      	mov	r3, r0
 800447a:	460c      	mov	r4, r1
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	e049      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004480:	4b2f      	ldr	r3, [pc, #188]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	099b      	lsrs	r3, r3, #6
 8004486:	f04f 0400 	mov.w	r4, #0
 800448a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	ea03 0501 	and.w	r5, r3, r1
 8004496:	ea04 0602 	and.w	r6, r4, r2
 800449a:	4629      	mov	r1, r5
 800449c:	4632      	mov	r2, r6
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	0154      	lsls	r4, r2, #5
 80044a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044ac:	014b      	lsls	r3, r1, #5
 80044ae:	4619      	mov	r1, r3
 80044b0:	4622      	mov	r2, r4
 80044b2:	1b49      	subs	r1, r1, r5
 80044b4:	eb62 0206 	sbc.w	r2, r2, r6
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	f04f 0400 	mov.w	r4, #0
 80044c0:	0194      	lsls	r4, r2, #6
 80044c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044c6:	018b      	lsls	r3, r1, #6
 80044c8:	1a5b      	subs	r3, r3, r1
 80044ca:	eb64 0402 	sbc.w	r4, r4, r2
 80044ce:	f04f 0100 	mov.w	r1, #0
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	00e2      	lsls	r2, r4, #3
 80044d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044dc:	00d9      	lsls	r1, r3, #3
 80044de:	460b      	mov	r3, r1
 80044e0:	4614      	mov	r4, r2
 80044e2:	195b      	adds	r3, r3, r5
 80044e4:	eb44 0406 	adc.w	r4, r4, r6
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	02a2      	lsls	r2, r4, #10
 80044f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80044f6:	0299      	lsls	r1, r3, #10
 80044f8:	460b      	mov	r3, r1
 80044fa:	4614      	mov	r4, r2
 80044fc:	4618      	mov	r0, r3
 80044fe:	4621      	mov	r1, r4
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f04f 0400 	mov.w	r4, #0
 8004506:	461a      	mov	r2, r3
 8004508:	4623      	mov	r3, r4
 800450a:	f7fb fe5d 	bl	80001c8 <__aeabi_uldivmod>
 800450e:	4603      	mov	r3, r0
 8004510:	460c      	mov	r4, r1
 8004512:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	3301      	adds	r3, #1
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	60bb      	str	r3, [r7, #8]
      break;
 800452e:	e002      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004530:	4b04      	ldr	r3, [pc, #16]	; (8004544 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004532:	60bb      	str	r3, [r7, #8]
      break;
 8004534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004536:	68bb      	ldr	r3, [r7, #8]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004540:	40023800 	.word	0x40023800
 8004544:	00f42400 	.word	0x00f42400
 8004548:	007a1200 	.word	0x007a1200

0800454c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004550:	4b03      	ldr	r3, [pc, #12]	; (8004560 <HAL_RCC_GetHCLKFreq+0x14>)
 8004552:	681b      	ldr	r3, [r3, #0]
}
 8004554:	4618      	mov	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20000000 	.word	0x20000000

08004564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004568:	f7ff fff0 	bl	800454c <HAL_RCC_GetHCLKFreq>
 800456c:	4601      	mov	r1, r0
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	0a9b      	lsrs	r3, r3, #10
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4a03      	ldr	r2, [pc, #12]	; (8004588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800457a:	5cd3      	ldrb	r3, [r2, r3]
 800457c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004580:	4618      	mov	r0, r3
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40023800 	.word	0x40023800
 8004588:	08008570 	.word	0x08008570

0800458c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004590:	f7ff ffdc 	bl	800454c <HAL_RCC_GetHCLKFreq>
 8004594:	4601      	mov	r1, r0
 8004596:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	0b5b      	lsrs	r3, r3, #13
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	4a03      	ldr	r2, [pc, #12]	; (80045b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a2:	5cd3      	ldrb	r3, [r2, r3]
 80045a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40023800 	.word	0x40023800
 80045b0:	08008570 	.word	0x08008570

080045b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d035      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045dc:	4b62      	ldr	r3, [pc, #392]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045e2:	f7fc fde5 	bl	80011b0 <HAL_GetTick>
 80045e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045ea:	f7fc fde1 	bl	80011b0 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0b0      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045fc:	4b5b      	ldr	r3, [pc, #364]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f0      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	019a      	lsls	r2, r3, #6
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	071b      	lsls	r3, r3, #28
 8004614:	4955      	ldr	r1, [pc, #340]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800461c:	4b52      	ldr	r3, [pc, #328]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800461e:	2201      	movs	r2, #1
 8004620:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004622:	f7fc fdc5 	bl	80011b0 <HAL_GetTick>
 8004626:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004628:	e008      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800462a:	f7fc fdc1 	bl	80011b0 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e090      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800463c:	4b4b      	ldr	r3, [pc, #300]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 8083 	beq.w	800475c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	4b44      	ldr	r3, [pc, #272]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	4a43      	ldr	r2, [pc, #268]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004664:	6413      	str	r3, [r2, #64]	; 0x40
 8004666:	4b41      	ldr	r3, [pc, #260]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004672:	4b3f      	ldr	r3, [pc, #252]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a3e      	ldr	r2, [pc, #248]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800467c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800467e:	f7fc fd97 	bl	80011b0 <HAL_GetTick>
 8004682:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004686:	f7fc fd93 	bl	80011b0 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e062      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004698:	4b35      	ldr	r3, [pc, #212]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046a4:	4b31      	ldr	r3, [pc, #196]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02f      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d028      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046c2:	4b2a      	ldr	r3, [pc, #168]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046cc:	4b29      	ldr	r3, [pc, #164]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046d2:	4b28      	ldr	r3, [pc, #160]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046d8:	4a24      	ldr	r2, [pc, #144]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046de:	4b23      	ldr	r3, [pc, #140]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d114      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fc fd61 	bl	80011b0 <HAL_GetTick>
 80046ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f0:	e00a      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f2:	f7fc fd5d 	bl	80011b0 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004700:	4293      	cmp	r3, r2
 8004702:	d901      	bls.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e02a      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004708:	4b18      	ldr	r3, [pc, #96]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0ee      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004720:	d10d      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004722:	4b12      	ldr	r3, [pc, #72]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004736:	490d      	ldr	r1, [pc, #52]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004738:	4313      	orrs	r3, r2
 800473a:	608b      	str	r3, [r1, #8]
 800473c:	e005      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800473e:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	4a0a      	ldr	r2, [pc, #40]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004744:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004748:	6093      	str	r3, [r2, #8]
 800474a:	4b08      	ldr	r3, [pc, #32]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800474c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004756:	4905      	ldr	r1, [pc, #20]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004758:	4313      	orrs	r3, r2
 800475a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	42470068 	.word	0x42470068
 800476c:	40023800 	.word	0x40023800
 8004770:	40007000 	.word	0x40007000
 8004774:	42470e40 	.word	0x42470e40

08004778 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d13d      	bne.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004796:	4b22      	ldr	r3, [pc, #136]	; (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800479e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d004      	beq.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d12f      	bne.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047aa:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047ac:	617b      	str	r3, [r7, #20]
          break;
 80047ae:	e02f      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047b0:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047bc:	d108      	bne.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047be:	4b18      	ldr	r3, [pc, #96]	; (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c6:	4a18      	ldr	r2, [pc, #96]	; (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	e007      	b.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047d0:	4b13      	ldr	r3, [pc, #76]	; (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d8:	4a14      	ldr	r2, [pc, #80]	; (800482c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047da:	fbb2 f3f3 	udiv	r3, r2, r3
 80047de:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047e0:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80047e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047f4:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80047f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fa:	0f1b      	lsrs	r3, r3, #28
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	617b      	str	r3, [r7, #20]
          break;
 8004808:	e002      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
          break;
 800480e:	bf00      	nop
        }
      }
      break;
 8004810:	bf00      	nop
    }
  }
  return frequency;
 8004812:	697b      	ldr	r3, [r7, #20]
}
 8004814:	4618      	mov	r0, r3
 8004816:	371c      	adds	r7, #28
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	40023800 	.word	0x40023800
 8004824:	00bb8000 	.word	0x00bb8000
 8004828:	007a1200 	.word	0x007a1200
 800482c:	00f42400 	.word	0x00f42400

08004830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e056      	b.n	80048f0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d106      	bne.n	8004862 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7fc facf 	bl	8000e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004878:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	ea42 0103 	orr.w	r1, r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	0c1b      	lsrs	r3, r3, #16
 80048c0:	f003 0104 	and.w	r1, r3, #4
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_SPI_Transmit+0x22>
 8004916:	2302      	movs	r3, #2
 8004918:	e11e      	b.n	8004b58 <HAL_SPI_Transmit+0x260>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004922:	f7fc fc45 	bl	80011b0 <HAL_GetTick>
 8004926:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d002      	beq.n	800493e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004938:	2302      	movs	r3, #2
 800493a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800493c:	e103      	b.n	8004b46 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_SPI_Transmit+0x52>
 8004944:	88fb      	ldrh	r3, [r7, #6]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d102      	bne.n	8004950 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800494e:	e0fa      	b.n	8004b46 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2203      	movs	r2, #3
 8004954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	88fa      	ldrh	r2, [r7, #6]
 8004968:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	88fa      	ldrh	r2, [r7, #6]
 800496e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004996:	d107      	bne.n	80049a8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b40      	cmp	r3, #64	; 0x40
 80049b4:	d007      	beq.n	80049c6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ce:	d14b      	bne.n	8004a68 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_SPI_Transmit+0xe6>
 80049d8:	8afb      	ldrh	r3, [r7, #22]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d13e      	bne.n	8004a5c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	881a      	ldrh	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	1c9a      	adds	r2, r3, #2
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a02:	e02b      	b.n	8004a5c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d112      	bne.n	8004a38 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	881a      	ldrh	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	1c9a      	adds	r2, r3, #2
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a36:	e011      	b.n	8004a5c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a38:	f7fc fbba 	bl	80011b0 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d803      	bhi.n	8004a50 <HAL_SPI_Transmit+0x158>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4e:	d102      	bne.n	8004a56 <HAL_SPI_Transmit+0x15e>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d102      	bne.n	8004a5c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a5a:	e074      	b.n	8004b46 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ce      	bne.n	8004a04 <HAL_SPI_Transmit+0x10c>
 8004a66:	e04c      	b.n	8004b02 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <HAL_SPI_Transmit+0x17e>
 8004a70:	8afb      	ldrh	r3, [r7, #22]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d140      	bne.n	8004af8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	7812      	ldrb	r2, [r2, #0]
 8004a82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a9c:	e02c      	b.n	8004af8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d113      	bne.n	8004ad4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	7812      	ldrb	r2, [r2, #0]
 8004ab8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ad2:	e011      	b.n	8004af8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ad4:	f7fc fb6c 	bl	80011b0 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d803      	bhi.n	8004aec <HAL_SPI_Transmit+0x1f4>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aea:	d102      	bne.n	8004af2 <HAL_SPI_Transmit+0x1fa>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004af6:	e026      	b.n	8004b46 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1cd      	bne.n	8004a9e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	6839      	ldr	r1, [r7, #0]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fba4 	bl	8005254 <SPI_EndRxTxTransaction>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	e000      	b.n	8004b46 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004b44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b56:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b7c:	d112      	bne.n	8004ba4 <HAL_SPI_Receive+0x44>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10e      	bne.n	8004ba4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2204      	movs	r2, #4
 8004b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b8e:	88fa      	ldrh	r2, [r7, #6]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f8e9 	bl	8004d72 <HAL_SPI_TransmitReceive>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	e0e2      	b.n	8004d6a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_SPI_Receive+0x52>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e0db      	b.n	8004d6a <HAL_SPI_Receive+0x20a>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bba:	f7fc faf9 	bl	80011b0 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d002      	beq.n	8004bd2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bd0:	e0c2      	b.n	8004d58 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_SPI_Receive+0x7e>
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004be2:	e0b9      	b.n	8004d58 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2204      	movs	r2, #4
 8004be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	88fa      	ldrh	r2, [r7, #6]
 8004c02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2a:	d107      	bne.n	8004c3c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c3a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d007      	beq.n	8004c5a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d162      	bne.n	8004d28 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c62:	e02e      	b.n	8004cc2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d115      	bne.n	8004c9e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f103 020c 	add.w	r2, r3, #12
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	7812      	ldrb	r2, [r2, #0]
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c9c:	e011      	b.n	8004cc2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c9e:	f7fc fa87 	bl	80011b0 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d803      	bhi.n	8004cb6 <HAL_SPI_Receive+0x156>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d102      	bne.n	8004cbc <HAL_SPI_Receive+0x15c>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d102      	bne.n	8004cc2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cc0:	e04a      	b.n	8004d58 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1cb      	bne.n	8004c64 <HAL_SPI_Receive+0x104>
 8004ccc:	e031      	b.n	8004d32 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d113      	bne.n	8004d04 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	b292      	uxth	r2, r2
 8004ce8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	1c9a      	adds	r2, r3, #2
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d02:	e011      	b.n	8004d28 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d04:	f7fc fa54 	bl	80011b0 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d803      	bhi.n	8004d1c <HAL_SPI_Receive+0x1bc>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d102      	bne.n	8004d22 <HAL_SPI_Receive+0x1c2>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d26:	e017      	b.n	8004d58 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1cd      	bne.n	8004cce <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fa27 	bl	800518a <SPI_EndRxTransaction>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	75fb      	strb	r3, [r7, #23]
 8004d54:	e000      	b.n	8004d58 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004d56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b08c      	sub	sp, #48	; 0x30
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	607a      	str	r2, [r7, #4]
 8004d7e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d80:	2301      	movs	r3, #1
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_SPI_TransmitReceive+0x26>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e18a      	b.n	80050ae <HAL_SPI_TransmitReceive+0x33c>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004da0:	f7fc fa06 	bl	80011b0 <HAL_GetTick>
 8004da4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004db6:	887b      	ldrh	r3, [r7, #2]
 8004db8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d00f      	beq.n	8004de2 <HAL_SPI_TransmitReceive+0x70>
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc8:	d107      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x68>
 8004dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d003      	beq.n	8004de2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004de0:	e15b      	b.n	800509a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_SPI_TransmitReceive+0x82>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_SPI_TransmitReceive+0x82>
 8004dee:	887b      	ldrh	r3, [r7, #2]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d103      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004dfa:	e14e      	b.n	800509a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d003      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2205      	movs	r2, #5
 8004e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	887a      	ldrh	r2, [r7, #2]
 8004e20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	887a      	ldrh	r2, [r7, #2]
 8004e26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	887a      	ldrh	r2, [r7, #2]
 8004e32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	887a      	ldrh	r2, [r7, #2]
 8004e38:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d007      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e6c:	d178      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_SPI_TransmitReceive+0x10a>
 8004e76:	8b7b      	ldrh	r3, [r7, #26]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d166      	bne.n	8004f4a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e80:	881a      	ldrh	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	1c9a      	adds	r2, r3, #2
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea0:	e053      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d11b      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x176>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d016      	beq.n	8004ee8 <HAL_SPI_TransmitReceive+0x176>
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d113      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	881a      	ldrh	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	1c9a      	adds	r2, r3, #2
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d119      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x1b8>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d014      	beq.n	8004f2a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	b292      	uxth	r2, r2
 8004f0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	1c9a      	adds	r2, r3, #2
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f26:	2301      	movs	r3, #1
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f2a:	f7fc f941 	bl	80011b0 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d807      	bhi.n	8004f4a <HAL_SPI_TransmitReceive+0x1d8>
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d003      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f48:	e0a7      	b.n	800509a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1a6      	bne.n	8004ea2 <HAL_SPI_TransmitReceive+0x130>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1a1      	bne.n	8004ea2 <HAL_SPI_TransmitReceive+0x130>
 8004f5e:	e07c      	b.n	800505a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_SPI_TransmitReceive+0x1fc>
 8004f68:	8b7b      	ldrh	r3, [r7, #26]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d16b      	bne.n	8005046 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f94:	e057      	b.n	8005046 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d11c      	bne.n	8004fde <HAL_SPI_TransmitReceive+0x26c>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d017      	beq.n	8004fde <HAL_SPI_TransmitReceive+0x26c>
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d114      	bne.n	8004fde <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	7812      	ldrb	r2, [r2, #0]
 8004fc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d119      	bne.n	8005020 <HAL_SPI_TransmitReceive+0x2ae>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d014      	beq.n	8005020 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800501c:	2301      	movs	r3, #1
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005020:	f7fc f8c6 	bl	80011b0 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800502c:	429a      	cmp	r2, r3
 800502e:	d803      	bhi.n	8005038 <HAL_SPI_TransmitReceive+0x2c6>
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d102      	bne.n	800503e <HAL_SPI_TransmitReceive+0x2cc>
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	2b00      	cmp	r3, #0
 800503c:	d103      	bne.n	8005046 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005044:	e029      	b.n	800509a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1a2      	bne.n	8004f96 <HAL_SPI_TransmitReceive+0x224>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d19d      	bne.n	8004f96 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800505a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f8f8 	bl	8005254 <SPI_EndRxTxTransaction>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d006      	beq.n	8005078 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005076:	e010      	b.n	800509a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	e000      	b.n	800509a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005098:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3730      	adds	r7, #48	; 0x30
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	4613      	mov	r3, r2
 80050c4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c6:	e04c      	b.n	8005162 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	d048      	beq.n	8005162 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80050d0:	f7fc f86e 	bl	80011b0 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d902      	bls.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d13d      	bne.n	8005162 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050fe:	d111      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005108:	d004      	beq.n	8005114 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005112:	d107      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512c:	d10f      	bne.n	800514e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800514c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e00f      	b.n	8005182 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4013      	ands	r3, r2
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	429a      	cmp	r2, r3
 8005170:	bf0c      	ite	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	2300      	movne	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	79fb      	ldrb	r3, [r7, #7]
 800517c:	429a      	cmp	r2, r3
 800517e:	d1a3      	bne.n	80050c8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b086      	sub	sp, #24
 800518e:	af02      	add	r7, sp, #8
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800519e:	d111      	bne.n	80051c4 <SPI_EndRxTransaction+0x3a>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a8:	d004      	beq.n	80051b4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b2:	d107      	bne.n	80051c4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051cc:	d12a      	bne.n	8005224 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d6:	d012      	beq.n	80051fe <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2200      	movs	r2, #0
 80051e0:	2180      	movs	r1, #128	; 0x80
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff ff67 	bl	80050b6 <SPI_WaitFlagStateUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d02d      	beq.n	800524a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f2:	f043 0220 	orr.w	r2, r3, #32
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e026      	b.n	800524c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2200      	movs	r2, #0
 8005206:	2101      	movs	r1, #1
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f7ff ff54 	bl	80050b6 <SPI_WaitFlagStateUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01a      	beq.n	800524a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e013      	b.n	800524c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2200      	movs	r2, #0
 800522c:	2101      	movs	r1, #1
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f7ff ff41 	bl	80050b6 <SPI_WaitFlagStateUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d007      	beq.n	800524a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523e:	f043 0220 	orr.w	r2, r3, #32
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e000      	b.n	800524c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005260:	4b1b      	ldr	r3, [pc, #108]	; (80052d0 <SPI_EndRxTxTransaction+0x7c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1b      	ldr	r2, [pc, #108]	; (80052d4 <SPI_EndRxTxTransaction+0x80>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	0d5b      	lsrs	r3, r3, #21
 800526c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005270:	fb02 f303 	mul.w	r3, r2, r3
 8005274:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800527e:	d112      	bne.n	80052a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2200      	movs	r2, #0
 8005288:	2180      	movs	r1, #128	; 0x80
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f7ff ff13 	bl	80050b6 <SPI_WaitFlagStateUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d016      	beq.n	80052c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529a:	f043 0220 	orr.w	r2, r3, #32
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e00f      	b.n	80052c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052bc:	2b80      	cmp	r3, #128	; 0x80
 80052be:	d0f2      	beq.n	80052a6 <SPI_EndRxTxTransaction+0x52>
 80052c0:	e000      	b.n	80052c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80052c2:	bf00      	nop
  }

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000000 	.word	0x20000000
 80052d4:	165e9f81 	.word	0x165e9f81

080052d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e01d      	b.n	8005326 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fb fdc6 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3304      	adds	r3, #4
 8005314:	4619      	mov	r1, r3
 8005316:	4610      	mov	r0, r2
 8005318:	f000 f82e 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2202      	movs	r2, #2
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b06      	cmp	r3, #6
 800534e:	d007      	beq.n	8005360 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a40      	ldr	r2, [pc, #256]	; (800548c <TIM_Base_SetConfig+0x114>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d013      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005396:	d00f      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a3d      	ldr	r2, [pc, #244]	; (8005490 <TIM_Base_SetConfig+0x118>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00b      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a3c      	ldr	r2, [pc, #240]	; (8005494 <TIM_Base_SetConfig+0x11c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d007      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a3b      	ldr	r2, [pc, #236]	; (8005498 <TIM_Base_SetConfig+0x120>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d003      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a3a      	ldr	r2, [pc, #232]	; (800549c <TIM_Base_SetConfig+0x124>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d108      	bne.n	80053ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2f      	ldr	r2, [pc, #188]	; (800548c <TIM_Base_SetConfig+0x114>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d02b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d8:	d027      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a2c      	ldr	r2, [pc, #176]	; (8005490 <TIM_Base_SetConfig+0x118>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d023      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2b      	ldr	r2, [pc, #172]	; (8005494 <TIM_Base_SetConfig+0x11c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01f      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a2a      	ldr	r2, [pc, #168]	; (8005498 <TIM_Base_SetConfig+0x120>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d01b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a29      	ldr	r2, [pc, #164]	; (800549c <TIM_Base_SetConfig+0x124>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d017      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a28      	ldr	r2, [pc, #160]	; (80054a0 <TIM_Base_SetConfig+0x128>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a27      	ldr	r2, [pc, #156]	; (80054a4 <TIM_Base_SetConfig+0x12c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00f      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a26      	ldr	r2, [pc, #152]	; (80054a8 <TIM_Base_SetConfig+0x130>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a25      	ldr	r2, [pc, #148]	; (80054ac <TIM_Base_SetConfig+0x134>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d007      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a24      	ldr	r2, [pc, #144]	; (80054b0 <TIM_Base_SetConfig+0x138>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a23      	ldr	r2, [pc, #140]	; (80054b4 <TIM_Base_SetConfig+0x13c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d108      	bne.n	800543c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a0a      	ldr	r2, [pc, #40]	; (800548c <TIM_Base_SetConfig+0x114>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_Base_SetConfig+0xf8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a0c      	ldr	r2, [pc, #48]	; (800549c <TIM_Base_SetConfig+0x124>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d103      	bne.n	8005478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	615a      	str	r2, [r3, #20]
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010000 	.word	0x40010000
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800
 8005498:	40000c00 	.word	0x40000c00
 800549c:	40010400 	.word	0x40010400
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40014400 	.word	0x40014400
 80054a8:	40014800 	.word	0x40014800
 80054ac:	40001800 	.word	0x40001800
 80054b0:	40001c00 	.word	0x40001c00
 80054b4:	40002000 	.word	0x40002000

080054b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e05a      	b.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a21      	ldr	r2, [pc, #132]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d022      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551c:	d01d      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d018      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1b      	ldr	r2, [pc, #108]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d013      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1a      	ldr	r2, [pc, #104]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00e      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a18      	ldr	r2, [pc, #96]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d009      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a17      	ldr	r2, [pc, #92]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d004      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a15      	ldr	r2, [pc, #84]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d10c      	bne.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	4313      	orrs	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40010000 	.word	0x40010000
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800
 80055a0:	40000c00 	.word	0x40000c00
 80055a4:	40010400 	.word	0x40010400
 80055a8:	40014000 	.word	0x40014000
 80055ac:	40001800 	.word	0x40001800

080055b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e03f      	b.n	8005642 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fb fc92 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2224      	movs	r2, #36	; 0x24
 80055e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f90b 	bl	8005810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695a      	ldr	r2, [r3, #20]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b088      	sub	sp, #32
 800564e:	af02      	add	r7, sp, #8
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	4613      	mov	r3, r2
 8005658:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b20      	cmp	r3, #32
 8005668:	f040 8083 	bne.w	8005772 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_UART_Transmit+0x2e>
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e07b      	b.n	8005774 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_UART_Transmit+0x40>
 8005686:	2302      	movs	r3, #2
 8005688:	e074      	b.n	8005774 <HAL_UART_Transmit+0x12a>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2221      	movs	r2, #33	; 0x21
 800569c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80056a0:	f7fb fd86 	bl	80011b0 <HAL_GetTick>
 80056a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	88fa      	ldrh	r2, [r7, #6]
 80056aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80056ba:	e042      	b.n	8005742 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d2:	d122      	bne.n	800571a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2200      	movs	r2, #0
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f84c 	bl	800577c <UART_WaitOnFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e042      	b.n	8005774 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005700:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d103      	bne.n	8005712 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	3302      	adds	r3, #2
 800570e:	60bb      	str	r3, [r7, #8]
 8005710:	e017      	b.n	8005742 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	3301      	adds	r3, #1
 8005716:	60bb      	str	r3, [r7, #8]
 8005718:	e013      	b.n	8005742 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2200      	movs	r2, #0
 8005722:	2180      	movs	r1, #128	; 0x80
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f829 	bl	800577c <UART_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e01f      	b.n	8005774 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	60ba      	str	r2, [r7, #8]
 800573a:	781a      	ldrb	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1b7      	bne.n	80056bc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2200      	movs	r2, #0
 8005754:	2140      	movs	r1, #64	; 0x40
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f810 	bl	800577c <UART_WaitOnFlagUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e006      	b.n	8005774 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e000      	b.n	8005774 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005772:	2302      	movs	r3, #2
  }
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578c:	e02c      	b.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d028      	beq.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d007      	beq.n	80057ac <UART_WaitOnFlagUntilTimeout+0x30>
 800579c:	f7fb fd08 	bl	80011b0 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d21d      	bcs.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695a      	ldr	r2, [r3, #20]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0201 	bic.w	r2, r2, #1
 80057ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e00f      	b.n	8005808 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4013      	ands	r3, r2
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	bf0c      	ite	eq
 80057f8:	2301      	moveq	r3, #1
 80057fa:	2300      	movne	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	461a      	mov	r2, r3
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	429a      	cmp	r2, r3
 8005804:	d0c3      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005852:	f023 030c 	bic.w	r3, r3, #12
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	68f9      	ldr	r1, [r7, #12]
 800585c:	430b      	orrs	r3, r1
 800585e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800587e:	f040 818b 	bne.w	8005b98 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4ac1      	ldr	r2, [pc, #772]	; (8005b8c <UART_SetConfig+0x37c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d005      	beq.n	8005898 <UART_SetConfig+0x88>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4abf      	ldr	r2, [pc, #764]	; (8005b90 <UART_SetConfig+0x380>)
 8005892:	4293      	cmp	r3, r2
 8005894:	f040 80bd 	bne.w	8005a12 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005898:	f7fe fe78 	bl	800458c <HAL_RCC_GetPCLK2Freq>
 800589c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	461d      	mov	r5, r3
 80058a2:	f04f 0600 	mov.w	r6, #0
 80058a6:	46a8      	mov	r8, r5
 80058a8:	46b1      	mov	r9, r6
 80058aa:	eb18 0308 	adds.w	r3, r8, r8
 80058ae:	eb49 0409 	adc.w	r4, r9, r9
 80058b2:	4698      	mov	r8, r3
 80058b4:	46a1      	mov	r9, r4
 80058b6:	eb18 0805 	adds.w	r8, r8, r5
 80058ba:	eb49 0906 	adc.w	r9, r9, r6
 80058be:	f04f 0100 	mov.w	r1, #0
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058d2:	4688      	mov	r8, r1
 80058d4:	4691      	mov	r9, r2
 80058d6:	eb18 0005 	adds.w	r0, r8, r5
 80058da:	eb49 0106 	adc.w	r1, r9, r6
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	461d      	mov	r5, r3
 80058e4:	f04f 0600 	mov.w	r6, #0
 80058e8:	196b      	adds	r3, r5, r5
 80058ea:	eb46 0406 	adc.w	r4, r6, r6
 80058ee:	461a      	mov	r2, r3
 80058f0:	4623      	mov	r3, r4
 80058f2:	f7fa fc69 	bl	80001c8 <__aeabi_uldivmod>
 80058f6:	4603      	mov	r3, r0
 80058f8:	460c      	mov	r4, r1
 80058fa:	461a      	mov	r2, r3
 80058fc:	4ba5      	ldr	r3, [pc, #660]	; (8005b94 <UART_SetConfig+0x384>)
 80058fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	461d      	mov	r5, r3
 800590c:	f04f 0600 	mov.w	r6, #0
 8005910:	46a9      	mov	r9, r5
 8005912:	46b2      	mov	sl, r6
 8005914:	eb19 0309 	adds.w	r3, r9, r9
 8005918:	eb4a 040a 	adc.w	r4, sl, sl
 800591c:	4699      	mov	r9, r3
 800591e:	46a2      	mov	sl, r4
 8005920:	eb19 0905 	adds.w	r9, r9, r5
 8005924:	eb4a 0a06 	adc.w	sl, sl, r6
 8005928:	f04f 0100 	mov.w	r1, #0
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005934:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005938:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800593c:	4689      	mov	r9, r1
 800593e:	4692      	mov	sl, r2
 8005940:	eb19 0005 	adds.w	r0, r9, r5
 8005944:	eb4a 0106 	adc.w	r1, sl, r6
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	461d      	mov	r5, r3
 800594e:	f04f 0600 	mov.w	r6, #0
 8005952:	196b      	adds	r3, r5, r5
 8005954:	eb46 0406 	adc.w	r4, r6, r6
 8005958:	461a      	mov	r2, r3
 800595a:	4623      	mov	r3, r4
 800595c:	f7fa fc34 	bl	80001c8 <__aeabi_uldivmod>
 8005960:	4603      	mov	r3, r0
 8005962:	460c      	mov	r4, r1
 8005964:	461a      	mov	r2, r3
 8005966:	4b8b      	ldr	r3, [pc, #556]	; (8005b94 <UART_SetConfig+0x384>)
 8005968:	fba3 1302 	umull	r1, r3, r3, r2
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	2164      	movs	r1, #100	; 0x64
 8005970:	fb01 f303 	mul.w	r3, r1, r3
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	3332      	adds	r3, #50	; 0x32
 800597a:	4a86      	ldr	r2, [pc, #536]	; (8005b94 <UART_SetConfig+0x384>)
 800597c:	fba2 2303 	umull	r2, r3, r2, r3
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005988:	4498      	add	r8, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	461d      	mov	r5, r3
 800598e:	f04f 0600 	mov.w	r6, #0
 8005992:	46a9      	mov	r9, r5
 8005994:	46b2      	mov	sl, r6
 8005996:	eb19 0309 	adds.w	r3, r9, r9
 800599a:	eb4a 040a 	adc.w	r4, sl, sl
 800599e:	4699      	mov	r9, r3
 80059a0:	46a2      	mov	sl, r4
 80059a2:	eb19 0905 	adds.w	r9, r9, r5
 80059a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80059aa:	f04f 0100 	mov.w	r1, #0
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059be:	4689      	mov	r9, r1
 80059c0:	4692      	mov	sl, r2
 80059c2:	eb19 0005 	adds.w	r0, r9, r5
 80059c6:	eb4a 0106 	adc.w	r1, sl, r6
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	461d      	mov	r5, r3
 80059d0:	f04f 0600 	mov.w	r6, #0
 80059d4:	196b      	adds	r3, r5, r5
 80059d6:	eb46 0406 	adc.w	r4, r6, r6
 80059da:	461a      	mov	r2, r3
 80059dc:	4623      	mov	r3, r4
 80059de:	f7fa fbf3 	bl	80001c8 <__aeabi_uldivmod>
 80059e2:	4603      	mov	r3, r0
 80059e4:	460c      	mov	r4, r1
 80059e6:	461a      	mov	r2, r3
 80059e8:	4b6a      	ldr	r3, [pc, #424]	; (8005b94 <UART_SetConfig+0x384>)
 80059ea:	fba3 1302 	umull	r1, r3, r3, r2
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	2164      	movs	r1, #100	; 0x64
 80059f2:	fb01 f303 	mul.w	r3, r1, r3
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	3332      	adds	r3, #50	; 0x32
 80059fc:	4a65      	ldr	r2, [pc, #404]	; (8005b94 <UART_SetConfig+0x384>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	f003 0207 	and.w	r2, r3, #7
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4442      	add	r2, r8
 8005a0e:	609a      	str	r2, [r3, #8]
 8005a10:	e26f      	b.n	8005ef2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a12:	f7fe fda7 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 8005a16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	461d      	mov	r5, r3
 8005a1c:	f04f 0600 	mov.w	r6, #0
 8005a20:	46a8      	mov	r8, r5
 8005a22:	46b1      	mov	r9, r6
 8005a24:	eb18 0308 	adds.w	r3, r8, r8
 8005a28:	eb49 0409 	adc.w	r4, r9, r9
 8005a2c:	4698      	mov	r8, r3
 8005a2e:	46a1      	mov	r9, r4
 8005a30:	eb18 0805 	adds.w	r8, r8, r5
 8005a34:	eb49 0906 	adc.w	r9, r9, r6
 8005a38:	f04f 0100 	mov.w	r1, #0
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a4c:	4688      	mov	r8, r1
 8005a4e:	4691      	mov	r9, r2
 8005a50:	eb18 0005 	adds.w	r0, r8, r5
 8005a54:	eb49 0106 	adc.w	r1, r9, r6
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	461d      	mov	r5, r3
 8005a5e:	f04f 0600 	mov.w	r6, #0
 8005a62:	196b      	adds	r3, r5, r5
 8005a64:	eb46 0406 	adc.w	r4, r6, r6
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4623      	mov	r3, r4
 8005a6c:	f7fa fbac 	bl	80001c8 <__aeabi_uldivmod>
 8005a70:	4603      	mov	r3, r0
 8005a72:	460c      	mov	r4, r1
 8005a74:	461a      	mov	r2, r3
 8005a76:	4b47      	ldr	r3, [pc, #284]	; (8005b94 <UART_SetConfig+0x384>)
 8005a78:	fba3 2302 	umull	r2, r3, r3, r2
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	461d      	mov	r5, r3
 8005a86:	f04f 0600 	mov.w	r6, #0
 8005a8a:	46a9      	mov	r9, r5
 8005a8c:	46b2      	mov	sl, r6
 8005a8e:	eb19 0309 	adds.w	r3, r9, r9
 8005a92:	eb4a 040a 	adc.w	r4, sl, sl
 8005a96:	4699      	mov	r9, r3
 8005a98:	46a2      	mov	sl, r4
 8005a9a:	eb19 0905 	adds.w	r9, r9, r5
 8005a9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005aa2:	f04f 0100 	mov.w	r1, #0
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ab2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ab6:	4689      	mov	r9, r1
 8005ab8:	4692      	mov	sl, r2
 8005aba:	eb19 0005 	adds.w	r0, r9, r5
 8005abe:	eb4a 0106 	adc.w	r1, sl, r6
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	461d      	mov	r5, r3
 8005ac8:	f04f 0600 	mov.w	r6, #0
 8005acc:	196b      	adds	r3, r5, r5
 8005ace:	eb46 0406 	adc.w	r4, r6, r6
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4623      	mov	r3, r4
 8005ad6:	f7fa fb77 	bl	80001c8 <__aeabi_uldivmod>
 8005ada:	4603      	mov	r3, r0
 8005adc:	460c      	mov	r4, r1
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4b2c      	ldr	r3, [pc, #176]	; (8005b94 <UART_SetConfig+0x384>)
 8005ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	2164      	movs	r1, #100	; 0x64
 8005aea:	fb01 f303 	mul.w	r3, r1, r3
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	3332      	adds	r3, #50	; 0x32
 8005af4:	4a27      	ldr	r2, [pc, #156]	; (8005b94 <UART_SetConfig+0x384>)
 8005af6:	fba2 2303 	umull	r2, r3, r2, r3
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b02:	4498      	add	r8, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	461d      	mov	r5, r3
 8005b08:	f04f 0600 	mov.w	r6, #0
 8005b0c:	46a9      	mov	r9, r5
 8005b0e:	46b2      	mov	sl, r6
 8005b10:	eb19 0309 	adds.w	r3, r9, r9
 8005b14:	eb4a 040a 	adc.w	r4, sl, sl
 8005b18:	4699      	mov	r9, r3
 8005b1a:	46a2      	mov	sl, r4
 8005b1c:	eb19 0905 	adds.w	r9, r9, r5
 8005b20:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b24:	f04f 0100 	mov.w	r1, #0
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b38:	4689      	mov	r9, r1
 8005b3a:	4692      	mov	sl, r2
 8005b3c:	eb19 0005 	adds.w	r0, r9, r5
 8005b40:	eb4a 0106 	adc.w	r1, sl, r6
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	461d      	mov	r5, r3
 8005b4a:	f04f 0600 	mov.w	r6, #0
 8005b4e:	196b      	adds	r3, r5, r5
 8005b50:	eb46 0406 	adc.w	r4, r6, r6
 8005b54:	461a      	mov	r2, r3
 8005b56:	4623      	mov	r3, r4
 8005b58:	f7fa fb36 	bl	80001c8 <__aeabi_uldivmod>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	461a      	mov	r2, r3
 8005b62:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <UART_SetConfig+0x384>)
 8005b64:	fba3 1302 	umull	r1, r3, r3, r2
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	2164      	movs	r1, #100	; 0x64
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	3332      	adds	r3, #50	; 0x32
 8005b76:	4a07      	ldr	r2, [pc, #28]	; (8005b94 <UART_SetConfig+0x384>)
 8005b78:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7c:	095b      	lsrs	r3, r3, #5
 8005b7e:	f003 0207 	and.w	r2, r3, #7
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4442      	add	r2, r8
 8005b88:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005b8a:	e1b2      	b.n	8005ef2 <UART_SetConfig+0x6e2>
 8005b8c:	40011000 	.word	0x40011000
 8005b90:	40011400 	.word	0x40011400
 8005b94:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4ad7      	ldr	r2, [pc, #860]	; (8005efc <UART_SetConfig+0x6ec>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d005      	beq.n	8005bae <UART_SetConfig+0x39e>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4ad6      	ldr	r2, [pc, #856]	; (8005f00 <UART_SetConfig+0x6f0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	f040 80d1 	bne.w	8005d50 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bae:	f7fe fced 	bl	800458c <HAL_RCC_GetPCLK2Freq>
 8005bb2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	469a      	mov	sl, r3
 8005bb8:	f04f 0b00 	mov.w	fp, #0
 8005bbc:	46d0      	mov	r8, sl
 8005bbe:	46d9      	mov	r9, fp
 8005bc0:	eb18 0308 	adds.w	r3, r8, r8
 8005bc4:	eb49 0409 	adc.w	r4, r9, r9
 8005bc8:	4698      	mov	r8, r3
 8005bca:	46a1      	mov	r9, r4
 8005bcc:	eb18 080a 	adds.w	r8, r8, sl
 8005bd0:	eb49 090b 	adc.w	r9, r9, fp
 8005bd4:	f04f 0100 	mov.w	r1, #0
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005be0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005be4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005be8:	4688      	mov	r8, r1
 8005bea:	4691      	mov	r9, r2
 8005bec:	eb1a 0508 	adds.w	r5, sl, r8
 8005bf0:	eb4b 0609 	adc.w	r6, fp, r9
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	f04f 0400 	mov.w	r4, #0
 8005c06:	0094      	lsls	r4, r2, #2
 8005c08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c0c:	008b      	lsls	r3, r1, #2
 8005c0e:	461a      	mov	r2, r3
 8005c10:	4623      	mov	r3, r4
 8005c12:	4628      	mov	r0, r5
 8005c14:	4631      	mov	r1, r6
 8005c16:	f7fa fad7 	bl	80001c8 <__aeabi_uldivmod>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4bb8      	ldr	r3, [pc, #736]	; (8005f04 <UART_SetConfig+0x6f4>)
 8005c22:	fba3 2302 	umull	r2, r3, r3, r2
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	469b      	mov	fp, r3
 8005c30:	f04f 0c00 	mov.w	ip, #0
 8005c34:	46d9      	mov	r9, fp
 8005c36:	46e2      	mov	sl, ip
 8005c38:	eb19 0309 	adds.w	r3, r9, r9
 8005c3c:	eb4a 040a 	adc.w	r4, sl, sl
 8005c40:	4699      	mov	r9, r3
 8005c42:	46a2      	mov	sl, r4
 8005c44:	eb19 090b 	adds.w	r9, r9, fp
 8005c48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c4c:	f04f 0100 	mov.w	r1, #0
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c60:	4689      	mov	r9, r1
 8005c62:	4692      	mov	sl, r2
 8005c64:	eb1b 0509 	adds.w	r5, fp, r9
 8005c68:	eb4c 060a 	adc.w	r6, ip, sl
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	4619      	mov	r1, r3
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	f04f 0300 	mov.w	r3, #0
 8005c7a:	f04f 0400 	mov.w	r4, #0
 8005c7e:	0094      	lsls	r4, r2, #2
 8005c80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c84:	008b      	lsls	r3, r1, #2
 8005c86:	461a      	mov	r2, r3
 8005c88:	4623      	mov	r3, r4
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	4631      	mov	r1, r6
 8005c8e:	f7fa fa9b 	bl	80001c8 <__aeabi_uldivmod>
 8005c92:	4603      	mov	r3, r0
 8005c94:	460c      	mov	r4, r1
 8005c96:	461a      	mov	r2, r3
 8005c98:	4b9a      	ldr	r3, [pc, #616]	; (8005f04 <UART_SetConfig+0x6f4>)
 8005c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	2164      	movs	r1, #100	; 0x64
 8005ca2:	fb01 f303 	mul.w	r3, r1, r3
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	3332      	adds	r3, #50	; 0x32
 8005cac:	4a95      	ldr	r2, [pc, #596]	; (8005f04 <UART_SetConfig+0x6f4>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cb8:	4498      	add	r8, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	469b      	mov	fp, r3
 8005cbe:	f04f 0c00 	mov.w	ip, #0
 8005cc2:	46d9      	mov	r9, fp
 8005cc4:	46e2      	mov	sl, ip
 8005cc6:	eb19 0309 	adds.w	r3, r9, r9
 8005cca:	eb4a 040a 	adc.w	r4, sl, sl
 8005cce:	4699      	mov	r9, r3
 8005cd0:	46a2      	mov	sl, r4
 8005cd2:	eb19 090b 	adds.w	r9, r9, fp
 8005cd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005cda:	f04f 0100 	mov.w	r1, #0
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ce6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cee:	4689      	mov	r9, r1
 8005cf0:	4692      	mov	sl, r2
 8005cf2:	eb1b 0509 	adds.w	r5, fp, r9
 8005cf6:	eb4c 060a 	adc.w	r6, ip, sl
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	4619      	mov	r1, r3
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	f04f 0400 	mov.w	r4, #0
 8005d0c:	0094      	lsls	r4, r2, #2
 8005d0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d12:	008b      	lsls	r3, r1, #2
 8005d14:	461a      	mov	r2, r3
 8005d16:	4623      	mov	r3, r4
 8005d18:	4628      	mov	r0, r5
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	f7fa fa54 	bl	80001c8 <__aeabi_uldivmod>
 8005d20:	4603      	mov	r3, r0
 8005d22:	460c      	mov	r4, r1
 8005d24:	461a      	mov	r2, r3
 8005d26:	4b77      	ldr	r3, [pc, #476]	; (8005f04 <UART_SetConfig+0x6f4>)
 8005d28:	fba3 1302 	umull	r1, r3, r3, r2
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	2164      	movs	r1, #100	; 0x64
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	3332      	adds	r3, #50	; 0x32
 8005d3a:	4a72      	ldr	r2, [pc, #456]	; (8005f04 <UART_SetConfig+0x6f4>)
 8005d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	f003 020f 	and.w	r2, r3, #15
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4442      	add	r2, r8
 8005d4c:	609a      	str	r2, [r3, #8]
 8005d4e:	e0d0      	b.n	8005ef2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d50:	f7fe fc08 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 8005d54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	469a      	mov	sl, r3
 8005d5a:	f04f 0b00 	mov.w	fp, #0
 8005d5e:	46d0      	mov	r8, sl
 8005d60:	46d9      	mov	r9, fp
 8005d62:	eb18 0308 	adds.w	r3, r8, r8
 8005d66:	eb49 0409 	adc.w	r4, r9, r9
 8005d6a:	4698      	mov	r8, r3
 8005d6c:	46a1      	mov	r9, r4
 8005d6e:	eb18 080a 	adds.w	r8, r8, sl
 8005d72:	eb49 090b 	adc.w	r9, r9, fp
 8005d76:	f04f 0100 	mov.w	r1, #0
 8005d7a:	f04f 0200 	mov.w	r2, #0
 8005d7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d8a:	4688      	mov	r8, r1
 8005d8c:	4691      	mov	r9, r2
 8005d8e:	eb1a 0508 	adds.w	r5, sl, r8
 8005d92:	eb4b 0609 	adc.w	r6, fp, r9
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	f04f 0400 	mov.w	r4, #0
 8005da8:	0094      	lsls	r4, r2, #2
 8005daa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dae:	008b      	lsls	r3, r1, #2
 8005db0:	461a      	mov	r2, r3
 8005db2:	4623      	mov	r3, r4
 8005db4:	4628      	mov	r0, r5
 8005db6:	4631      	mov	r1, r6
 8005db8:	f7fa fa06 	bl	80001c8 <__aeabi_uldivmod>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4b50      	ldr	r3, [pc, #320]	; (8005f04 <UART_SetConfig+0x6f4>)
 8005dc4:	fba3 2302 	umull	r2, r3, r3, r2
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	469b      	mov	fp, r3
 8005dd2:	f04f 0c00 	mov.w	ip, #0
 8005dd6:	46d9      	mov	r9, fp
 8005dd8:	46e2      	mov	sl, ip
 8005dda:	eb19 0309 	adds.w	r3, r9, r9
 8005dde:	eb4a 040a 	adc.w	r4, sl, sl
 8005de2:	4699      	mov	r9, r3
 8005de4:	46a2      	mov	sl, r4
 8005de6:	eb19 090b 	adds.w	r9, r9, fp
 8005dea:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005dee:	f04f 0100 	mov.w	r1, #0
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e02:	4689      	mov	r9, r1
 8005e04:	4692      	mov	sl, r2
 8005e06:	eb1b 0509 	adds.w	r5, fp, r9
 8005e0a:	eb4c 060a 	adc.w	r6, ip, sl
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	4619      	mov	r1, r3
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	f04f 0400 	mov.w	r4, #0
 8005e20:	0094      	lsls	r4, r2, #2
 8005e22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e26:	008b      	lsls	r3, r1, #2
 8005e28:	461a      	mov	r2, r3
 8005e2a:	4623      	mov	r3, r4
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	4631      	mov	r1, r6
 8005e30:	f7fa f9ca 	bl	80001c8 <__aeabi_uldivmod>
 8005e34:	4603      	mov	r3, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4b32      	ldr	r3, [pc, #200]	; (8005f04 <UART_SetConfig+0x6f4>)
 8005e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	2164      	movs	r1, #100	; 0x64
 8005e44:	fb01 f303 	mul.w	r3, r1, r3
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	3332      	adds	r3, #50	; 0x32
 8005e4e:	4a2d      	ldr	r2, [pc, #180]	; (8005f04 <UART_SetConfig+0x6f4>)
 8005e50:	fba2 2303 	umull	r2, r3, r2, r3
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e5a:	4498      	add	r8, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	469b      	mov	fp, r3
 8005e60:	f04f 0c00 	mov.w	ip, #0
 8005e64:	46d9      	mov	r9, fp
 8005e66:	46e2      	mov	sl, ip
 8005e68:	eb19 0309 	adds.w	r3, r9, r9
 8005e6c:	eb4a 040a 	adc.w	r4, sl, sl
 8005e70:	4699      	mov	r9, r3
 8005e72:	46a2      	mov	sl, r4
 8005e74:	eb19 090b 	adds.w	r9, r9, fp
 8005e78:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e7c:	f04f 0100 	mov.w	r1, #0
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e90:	4689      	mov	r9, r1
 8005e92:	4692      	mov	sl, r2
 8005e94:	eb1b 0509 	adds.w	r5, fp, r9
 8005e98:	eb4c 060a 	adc.w	r6, ip, sl
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	f04f 0400 	mov.w	r4, #0
 8005eae:	0094      	lsls	r4, r2, #2
 8005eb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005eb4:	008b      	lsls	r3, r1, #2
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	4623      	mov	r3, r4
 8005eba:	4628      	mov	r0, r5
 8005ebc:	4631      	mov	r1, r6
 8005ebe:	f7fa f983 	bl	80001c8 <__aeabi_uldivmod>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <UART_SetConfig+0x6f4>)
 8005eca:	fba3 1302 	umull	r1, r3, r3, r2
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	2164      	movs	r1, #100	; 0x64
 8005ed2:	fb01 f303 	mul.w	r3, r1, r3
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	3332      	adds	r3, #50	; 0x32
 8005edc:	4a09      	ldr	r2, [pc, #36]	; (8005f04 <UART_SetConfig+0x6f4>)
 8005ede:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	f003 020f 	and.w	r2, r3, #15
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4442      	add	r2, r8
 8005eee:	609a      	str	r2, [r3, #8]
}
 8005ef0:	e7ff      	b.n	8005ef2 <UART_SetConfig+0x6e2>
 8005ef2:	bf00      	nop
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efc:	40011000 	.word	0x40011000
 8005f00:	40011400 	.word	0x40011400
 8005f04:	51eb851f 	.word	0x51eb851f

08005f08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f08:	b084      	sub	sp, #16
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	f107 001c 	add.w	r0, r7, #28
 8005f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d122      	bne.n	8005f66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d105      	bne.n	8005f5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f94a 	bl	80061f4 <USB_CoreReset>
 8005f60:	4603      	mov	r3, r0
 8005f62:	73fb      	strb	r3, [r7, #15]
 8005f64:	e01a      	b.n	8005f9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f93e 	bl	80061f4 <USB_CoreReset>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f8e:	e005      	b.n	8005f9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d10b      	bne.n	8005fba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f043 0206 	orr.w	r2, r3, #6
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f043 0220 	orr.w	r2, r3, #32
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fc6:	b004      	add	sp, #16
 8005fc8:	4770      	bx	lr

08005fca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f043 0201 	orr.w	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f023 0201 	bic.w	r2, r3, #1
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d106      	bne.n	800603a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	60da      	str	r2, [r3, #12]
 8006038:	e00b      	b.n	8006052 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800603a:	78fb      	ldrb	r3, [r7, #3]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d106      	bne.n	800604e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60da      	str	r2, [r3, #12]
 800604c:	e001      	b.n	8006052 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e003      	b.n	800605a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006052:	2032      	movs	r0, #50	; 0x32
 8006054:	f7fb f8b8 	bl	80011c8 <HAL_Delay>

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	019b      	lsls	r3, r3, #6
 8006076:	f043 0220 	orr.w	r2, r3, #32
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3301      	adds	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <USB_FlushTxFifo+0x48>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d901      	bls.n	8006090 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e006      	b.n	800609e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b20      	cmp	r3, #32
 800609a:	d0f0      	beq.n	800607e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	00030d40 	.word	0x00030d40

080060b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2210      	movs	r2, #16
 80060c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3301      	adds	r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <USB_FlushRxFifo+0x40>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d901      	bls.n	80060d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e006      	b.n	80060e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b10      	cmp	r3, #16
 80060de:	d0f0      	beq.n	80060c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	00030d40 	.word	0x00030d40

080060f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b089      	sub	sp, #36	; 0x24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	4611      	mov	r1, r2
 8006100:	461a      	mov	r2, r3
 8006102:	460b      	mov	r3, r1
 8006104:	71fb      	strb	r3, [r7, #7]
 8006106:	4613      	mov	r3, r2
 8006108:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006112:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006116:	2b00      	cmp	r3, #0
 8006118:	d11a      	bne.n	8006150 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800611a:	88bb      	ldrh	r3, [r7, #4]
 800611c:	3303      	adds	r3, #3
 800611e:	089b      	lsrs	r3, r3, #2
 8006120:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006122:	2300      	movs	r3, #0
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	e00f      	b.n	8006148 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	031a      	lsls	r2, r3, #12
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	4413      	add	r3, r2
 8006130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006134:	461a      	mov	r2, r3
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	3304      	adds	r3, #4
 8006140:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	3301      	adds	r3, #1
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	429a      	cmp	r2, r3
 800614e:	d3eb      	bcc.n	8006128 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3724      	adds	r7, #36	; 0x24
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800615e:	b480      	push	{r7}
 8006160:	b089      	sub	sp, #36	; 0x24
 8006162:	af00      	add	r7, sp, #0
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	4613      	mov	r3, r2
 800616a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	3303      	adds	r3, #3
 8006178:	089b      	lsrs	r3, r3, #2
 800617a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800617c:	2300      	movs	r3, #0
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	e00b      	b.n	800619a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	601a      	str	r2, [r3, #0]
    pDest++;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	3304      	adds	r3, #4
 8006192:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	3301      	adds	r3, #1
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d3ef      	bcc.n	8006182 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80061a2:	69fb      	ldr	r3, [r7, #28]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3724      	adds	r7, #36	; 0x24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4013      	ands	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061c8:	68fb      	ldr	r3, [r7, #12]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	f003 0301 	and.w	r3, r3, #1
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4a13      	ldr	r2, [pc, #76]	; (8006258 <USB_CoreReset+0x64>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e01b      	b.n	800624a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	daf2      	bge.n	8006200 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f043 0201 	orr.w	r2, r3, #1
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3301      	adds	r3, #1
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4a09      	ldr	r2, [pc, #36]	; (8006258 <USB_CoreReset+0x64>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d901      	bls.n	800623c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e006      	b.n	800624a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b01      	cmp	r3, #1
 8006246:	d0f0      	beq.n	800622a <USB_CoreReset+0x36>

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	00030d40 	.word	0x00030d40

0800625c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800625c:	b084      	sub	sp, #16
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	f107 001c 	add.w	r0, r7, #28
 800626a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006278:	461a      	mov	r2, r3
 800627a:	2300      	movs	r3, #0
 800627c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d018      	beq.n	80062e0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d10a      	bne.n	80062ca <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062c2:	f043 0304 	orr.w	r3, r3, #4
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	e014      	b.n	80062f4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062d8:	f023 0304 	bic.w	r3, r3, #4
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e009      	b.n	80062f4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062ee:	f023 0304 	bic.w	r3, r3, #4
 80062f2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80062f4:	2110      	movs	r1, #16
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff feb4 	bl	8006064 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff fed7 	bl	80060b0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	e015      	b.n	8006334 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4413      	add	r3, r2
 8006310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006314:	461a      	mov	r2, r3
 8006316:	f04f 33ff 	mov.w	r3, #4294967295
 800631a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4413      	add	r3, r2
 8006324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3301      	adds	r3, #1
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	429a      	cmp	r2, r3
 800633a:	d3e5      	bcc.n	8006308 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800633c:	2101      	movs	r1, #1
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f882 	bl	8006448 <USB_DriveVbus>

  HAL_Delay(200U);
 8006344:	20c8      	movs	r0, #200	; 0xc8
 8006346:	f7fa ff3f 	bl	80011c8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f04f 32ff 	mov.w	r2, #4294967295
 8006356:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800636a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a14      	ldr	r2, [pc, #80]	; (80063c0 <USB_HostInit+0x164>)
 8006370:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a13      	ldr	r2, [pc, #76]	; (80063c4 <USB_HostInit+0x168>)
 8006376:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800637a:	e009      	b.n	8006390 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2280      	movs	r2, #128	; 0x80
 8006380:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a10      	ldr	r2, [pc, #64]	; (80063c8 <USB_HostInit+0x16c>)
 8006386:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a10      	ldr	r2, [pc, #64]	; (80063cc <USB_HostInit+0x170>)
 800638c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	2b00      	cmp	r3, #0
 8006394:	d105      	bne.n	80063a2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f043 0210 	orr.w	r2, r3, #16
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <USB_HostInit+0x174>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063ba:	b004      	add	sp, #16
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	01000200 	.word	0x01000200
 80063c4:	00e00300 	.word	0x00e00300
 80063c8:	00600080 	.word	0x00600080
 80063cc:	004000e0 	.word	0x004000e0
 80063d0:	a3200008 	.word	0xa3200008

080063d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063f2:	f023 0303 	bic.w	r3, r3, #3
 80063f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	68f9      	ldr	r1, [r7, #12]
 8006408:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800640c:	4313      	orrs	r3, r2
 800640e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d107      	bne.n	8006426 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800641c:	461a      	mov	r2, r3
 800641e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006422:	6053      	str	r3, [r2, #4]
 8006424:	e009      	b.n	800643a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d106      	bne.n	800643a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006432:	461a      	mov	r2, r3
 8006434:	f241 7370 	movw	r3, #6000	; 0x1770
 8006438:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800646c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d109      	bne.n	800648c <USB_DriveVbus+0x44>
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d106      	bne.n	800648c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006486:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800648a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006496:	d109      	bne.n	80064ac <USB_DriveVbus+0x64>
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80064a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b085      	sub	sp, #20
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	b29b      	uxth	r3, r3
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	4608      	mov	r0, r1
 80064e6:	4611      	mov	r1, r2
 80064e8:	461a      	mov	r2, r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	70fb      	strb	r3, [r7, #3]
 80064ee:	460b      	mov	r3, r1
 80064f0:	70bb      	strb	r3, [r7, #2]
 80064f2:	4613      	mov	r3, r2
 80064f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4413      	add	r3, r2
 8006506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650a:	461a      	mov	r2, r3
 800650c:	f04f 33ff 	mov.w	r3, #4294967295
 8006510:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006512:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006516:	2b03      	cmp	r3, #3
 8006518:	d87e      	bhi.n	8006618 <USB_HC_Init+0x13c>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <USB_HC_Init+0x44>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006531 	.word	0x08006531
 8006524:	080065db 	.word	0x080065db
 8006528:	08006531 	.word	0x08006531
 800652c:	0800659d 	.word	0x0800659d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653c:	461a      	mov	r2, r3
 800653e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006542:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006544:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006548:	2b00      	cmp	r3, #0
 800654a:	da10      	bge.n	800656e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4413      	add	r3, r2
 8006554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	78fa      	ldrb	r2, [r7, #3]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	440a      	add	r2, r1
 8006562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800656a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800656c:	e057      	b.n	800661e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006576:	2b00      	cmp	r3, #0
 8006578:	d051      	beq.n	800661e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800657a:	78fb      	ldrb	r3, [r7, #3]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	4413      	add	r3, r2
 8006582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	78fa      	ldrb	r2, [r7, #3]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	440a      	add	r2, r1
 8006590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006594:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006598:	60d3      	str	r3, [r2, #12]
      break;
 800659a:	e040      	b.n	800661e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a8:	461a      	mov	r2, r3
 80065aa:	f240 639d 	movw	r3, #1693	; 0x69d
 80065ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	da34      	bge.n	8006622 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	78fa      	ldrb	r2, [r7, #3]
 80065c8:	0151      	lsls	r1, r2, #5
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	440a      	add	r2, r1
 80065ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80065d8:	e023      	b.n	8006622 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e6:	461a      	mov	r2, r3
 80065e8:	f240 2325 	movw	r3, #549	; 0x225
 80065ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	da17      	bge.n	8006626 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	78fa      	ldrb	r2, [r7, #3]
 8006606:	0151      	lsls	r1, r2, #5
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	440a      	add	r2, r1
 800660c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006610:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006614:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006616:	e006      	b.n	8006626 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	75fb      	strb	r3, [r7, #23]
      break;
 800661c:	e004      	b.n	8006628 <USB_HC_Init+0x14c>
      break;
 800661e:	bf00      	nop
 8006620:	e002      	b.n	8006628 <USB_HC_Init+0x14c>
      break;
 8006622:	bf00      	nop
 8006624:	e000      	b.n	8006628 <USB_HC_Init+0x14c>
      break;
 8006626:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800662e:	699a      	ldr	r2, [r3, #24]
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	2101      	movs	r1, #1
 8006638:	fa01 f303 	lsl.w	r3, r1, r3
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006642:	4313      	orrs	r3, r2
 8006644:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006652:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006656:	2b00      	cmp	r3, #0
 8006658:	da03      	bge.n	8006662 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800665a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	e001      	b.n	8006666 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006666:	f897 3020 	ldrb.w	r3, [r7, #32]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d103      	bne.n	8006676 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800666e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	e001      	b.n	800667a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800667a:	787b      	ldrb	r3, [r7, #1]
 800667c:	059b      	lsls	r3, r3, #22
 800667e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006682:	78bb      	ldrb	r3, [r7, #2]
 8006684:	02db      	lsls	r3, r3, #11
 8006686:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800668a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800668c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006690:	049b      	lsls	r3, r3, #18
 8006692:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006696:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006698:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800669a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800669e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	0159      	lsls	r1, r3, #5
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	440b      	add	r3, r1
 80066ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066b6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80066b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d10f      	bne.n	80066e0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	78fa      	ldrb	r2, [r7, #3]
 80066d0:	0151      	lsls	r1, r2, #5
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	440a      	add	r2, r1
 80066d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066de:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop

080066f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08c      	sub	sp, #48	; 0x30
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	4613      	mov	r3, r2
 80066fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800670c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006716:	2b00      	cmp	r3, #0
 8006718:	d028      	beq.n	800676c <USB_HC_StartXfer+0x7c>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	791b      	ldrb	r3, [r3, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d124      	bne.n	800676c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <USB_HC_StartXfer+0x50>
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	795b      	ldrb	r3, [r3, #5]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d107      	bne.n	8006740 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	4619      	mov	r1, r3
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 fa30 	bl	8006b9c <USB_DoPing>
      return HAL_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	e114      	b.n	800696a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d112      	bne.n	800676c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	4413      	add	r3, r2
 800674e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	0151      	lsls	r1, r2, #5
 8006758:	6a3a      	ldr	r2, [r7, #32]
 800675a:	440a      	add	r2, r1
 800675c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006760:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006764:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2200      	movs	r2, #0
 800676a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d018      	beq.n	80067a6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	8912      	ldrh	r2, [r2, #8]
 800677c:	4413      	add	r3, r2
 800677e:	3b01      	subs	r3, #1
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	8912      	ldrh	r2, [r2, #8]
 8006784:	fbb3 f3f2 	udiv	r3, r3, r2
 8006788:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800678a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800678c:	8b7b      	ldrh	r3, [r7, #26]
 800678e:	429a      	cmp	r2, r3
 8006790:	d90b      	bls.n	80067aa <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006792:	8b7b      	ldrh	r3, [r7, #26]
 8006794:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006796:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	8912      	ldrh	r2, [r2, #8]
 800679c:	fb02 f203 	mul.w	r2, r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	611a      	str	r2, [r3, #16]
 80067a4:	e001      	b.n	80067aa <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80067a6:	2301      	movs	r3, #1
 80067a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	78db      	ldrb	r3, [r3, #3]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d006      	beq.n	80067c0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80067b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	8912      	ldrh	r2, [r2, #8]
 80067b8:	fb02 f203 	mul.w	r2, r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067ca:	04d9      	lsls	r1, r3, #19
 80067cc:	4b69      	ldr	r3, [pc, #420]	; (8006974 <USB_HC_StartXfer+0x284>)
 80067ce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067d0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	7a9b      	ldrb	r3, [r3, #10]
 80067d6:	075b      	lsls	r3, r3, #29
 80067d8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067dc:	69f9      	ldr	r1, [r7, #28]
 80067de:	0148      	lsls	r0, r1, #5
 80067e0:	6a39      	ldr	r1, [r7, #32]
 80067e2:	4401      	add	r1, r0
 80067e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067e8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067ea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	68d9      	ldr	r1, [r3, #12]
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006802:	460a      	mov	r2, r1
 8006804:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	bf0c      	ite	eq
 8006816:	2301      	moveq	r3, #1
 8006818:	2300      	movne	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	4413      	add	r3, r2
 8006826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69fa      	ldr	r2, [r7, #28]
 800682e:	0151      	lsls	r1, r2, #5
 8006830:	6a3a      	ldr	r2, [r7, #32]
 8006832:	440a      	add	r2, r1
 8006834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006838:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800683c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	7e7b      	ldrb	r3, [r7, #25]
 800684e:	075b      	lsls	r3, r3, #29
 8006850:	69f9      	ldr	r1, [r7, #28]
 8006852:	0148      	lsls	r0, r1, #5
 8006854:	6a39      	ldr	r1, [r7, #32]
 8006856:	4401      	add	r1, r0
 8006858:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800685c:	4313      	orrs	r3, r2
 800685e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	4413      	add	r3, r2
 8006868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a42      	ldr	r2, [pc, #264]	; (8006978 <USB_HC_StartXfer+0x288>)
 8006870:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006872:	4b41      	ldr	r3, [pc, #260]	; (8006978 <USB_HC_StartXfer+0x288>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800687a:	4a3f      	ldr	r2, [pc, #252]	; (8006978 <USB_HC_StartXfer+0x288>)
 800687c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	78db      	ldrb	r3, [r3, #3]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d006      	beq.n	8006894 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006886:	4b3c      	ldr	r3, [pc, #240]	; (8006978 <USB_HC_StartXfer+0x288>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688e:	4a3a      	ldr	r2, [pc, #232]	; (8006978 <USB_HC_StartXfer+0x288>)
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	e005      	b.n	80068a0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006894:	4b38      	ldr	r3, [pc, #224]	; (8006978 <USB_HC_StartXfer+0x288>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800689c:	4a36      	ldr	r2, [pc, #216]	; (8006978 <USB_HC_StartXfer+0x288>)
 800689e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068a0:	4b35      	ldr	r3, [pc, #212]	; (8006978 <USB_HC_StartXfer+0x288>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068a8:	4a33      	ldr	r2, [pc, #204]	; (8006978 <USB_HC_StartXfer+0x288>)
 80068aa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b8:	461a      	mov	r2, r3
 80068ba:	4b2f      	ldr	r3, [pc, #188]	; (8006978 <USB_HC_StartXfer+0x288>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e04f      	b.n	800696a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	78db      	ldrb	r3, [r3, #3]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d14a      	bne.n	8006968 <USB_HC_StartXfer+0x278>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d046      	beq.n	8006968 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	79db      	ldrb	r3, [r3, #7]
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d830      	bhi.n	8006944 <USB_HC_StartXfer+0x254>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <USB_HC_StartXfer+0x1f8>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	080068f9 	.word	0x080068f9
 80068ec:	0800691d 	.word	0x0800691d
 80068f0:	080068f9 	.word	0x080068f9
 80068f4:	0800691d 	.word	0x0800691d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	3303      	adds	r3, #3
 80068fe:	089b      	lsrs	r3, r3, #2
 8006900:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006902:	8afa      	ldrh	r2, [r7, #22]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	b29b      	uxth	r3, r3
 800690a:	429a      	cmp	r2, r3
 800690c:	d91c      	bls.n	8006948 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	f043 0220 	orr.w	r2, r3, #32
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	619a      	str	r2, [r3, #24]
        }
        break;
 800691a:	e015      	b.n	8006948 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	3303      	adds	r3, #3
 8006922:	089b      	lsrs	r3, r3, #2
 8006924:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006926:	8afa      	ldrh	r2, [r7, #22]
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	b29b      	uxth	r3, r3
 8006932:	429a      	cmp	r2, r3
 8006934:	d90a      	bls.n	800694c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	619a      	str	r2, [r3, #24]
        }
        break;
 8006942:	e003      	b.n	800694c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006944:	bf00      	nop
 8006946:	e002      	b.n	800694e <USB_HC_StartXfer+0x25e>
        break;
 8006948:	bf00      	nop
 800694a:	e000      	b.n	800694e <USB_HC_StartXfer+0x25e>
        break;
 800694c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	68d9      	ldr	r1, [r3, #12]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	785a      	ldrb	r2, [r3, #1]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	b298      	uxth	r0, r3
 800695c:	2300      	movs	r3, #0
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	4603      	mov	r3, r0
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7ff fbc6 	bl	80060f4 <USB_WritePacket>
  }

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3728      	adds	r7, #40	; 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	1ff80000 	.word	0x1ff80000
 8006978:	200000b8 	.word	0x200000b8

0800697c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	b29b      	uxth	r3, r3
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800699e:	b480      	push	{r7}
 80069a0:	b087      	sub	sp, #28
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80069ae:	78fb      	ldrb	r3, [r7, #3]
 80069b0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	0c9b      	lsrs	r3, r3, #18
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <USB_HC_Halt+0x3a>
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d16c      	bne.n	8006ab2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	0151      	lsls	r1, r2, #5
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	440a      	add	r2, r1
 80069ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069f6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d143      	bne.n	8006a8c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	0151      	lsls	r1, r2, #5
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	440a      	add	r2, r1
 8006a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a22:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	0151      	lsls	r1, r2, #5
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	440a      	add	r2, r1
 8006a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a42:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	0151      	lsls	r1, r2, #5
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	440a      	add	r2, r1
 8006a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a62:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	3301      	adds	r3, #1
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a70:	d81d      	bhi.n	8006aae <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a88:	d0ec      	beq.n	8006a64 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a8a:	e080      	b.n	8006b8e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	0151      	lsls	r1, r2, #5
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	440a      	add	r2, r1
 8006aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aaa:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006aac:	e06f      	b.n	8006b8e <USB_HC_Halt+0x1f0>
          break;
 8006aae:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ab0:	e06d      	b.n	8006b8e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	0151      	lsls	r1, r2, #5
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006acc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ad0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d143      	bne.n	8006b6a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	0151      	lsls	r1, r2, #5
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	440a      	add	r2, r1
 8006af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b00:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b20:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	0151      	lsls	r1, r2, #5
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	440a      	add	r2, r1
 8006b38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b40:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	3301      	adds	r3, #1
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b4e:	d81d      	bhi.n	8006b8c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b66:	d0ec      	beq.n	8006b42 <USB_HC_Halt+0x1a4>
 8006b68:	e011      	b.n	8006b8e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	0151      	lsls	r1, r2, #5
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	440a      	add	r2, r1
 8006b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	e000      	b.n	8006b8e <USB_HC_Halt+0x1f0>
          break;
 8006b8c:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	371c      	adds	r7, #28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006bac:	78fb      	ldrb	r3, [r7, #3]
 8006bae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	04da      	lsls	r2, r3, #19
 8006bb8:	4b15      	ldr	r3, [pc, #84]	; (8006c10 <USB_DoPing+0x74>)
 8006bba:	4013      	ands	r3, r2
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	0151      	lsls	r1, r2, #5
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	440a      	add	r2, r1
 8006bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bcc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006be4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	1ff80000 	.word	0x1ff80000

08006c14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff f9e1 	bl	8005fec <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006c2a:	2110      	movs	r1, #16
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff fa19 	bl	8006064 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff fa3c 	bl	80060b0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c38:	2300      	movs	r3, #0
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	e01f      	b.n	8006c7e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c54:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c5c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c64:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c72:	461a      	mov	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b0f      	cmp	r3, #15
 8006c82:	d9dc      	bls.n	8006c3e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c84:	2300      	movs	r3, #0
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	e034      	b.n	8006cf4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ca0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ca8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cb0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	617b      	str	r3, [r7, #20]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cd0:	d80c      	bhi.n	8006cec <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ce8:	d0ec      	beq.n	8006cc4 <USB_StopHost+0xb0>
 8006cea:	e000      	b.n	8006cee <USB_StopHost+0xda>
        break;
 8006cec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b0f      	cmp	r3, #15
 8006cf8:	d9c7      	bls.n	8006c8a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d00:	461a      	mov	r2, r3
 8006d02:	f04f 33ff 	mov.w	r3, #4294967295
 8006d06:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff f95a 	bl	8005fca <USB_EnableGlobalInt>

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006d20:	b590      	push	{r4, r7, lr}
 8006d22:	b089      	sub	sp, #36	; 0x24
 8006d24:	af04      	add	r7, sp, #16
 8006d26:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006d28:	2301      	movs	r3, #1
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	2102      	movs	r1, #2
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fc68 	bl	8007604 <USBH_FindInterface>
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	2bff      	cmp	r3, #255	; 0xff
 8006d3c:	d002      	beq.n	8006d44 <USBH_CDC_InterfaceInit+0x24>
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d901      	bls.n	8006d48 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d44:	2302      	movs	r3, #2
 8006d46:	e13d      	b.n	8006fc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fc3d 	bl	80075cc <USBH_SelectInterface>
 8006d52:	4603      	mov	r3, r0
 8006d54:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e131      	b.n	8006fc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006d66:	2050      	movs	r0, #80	; 0x50
 8006d68:	f001 fb1a 	bl	80083a0 <malloc>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006d80:	2302      	movs	r3, #2
 8006d82:	e11f      	b.n	8006fc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006d84:	2250      	movs	r2, #80	; 0x50
 8006d86:	2100      	movs	r1, #0
 8006d88:	68b8      	ldr	r0, [r7, #8]
 8006d8a:	f001 fb19 	bl	80083c0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	211a      	movs	r1, #26
 8006d94:	fb01 f303 	mul.w	r3, r1, r3
 8006d98:	4413      	add	r3, r2
 8006d9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b25b      	sxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	da15      	bge.n	8006dd2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	211a      	movs	r1, #26
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	4413      	add	r3, r2
 8006db2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006db6:	781a      	ldrb	r2, [r3, #0]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	211a      	movs	r1, #26
 8006dc2:	fb01 f303 	mul.w	r3, r1, r3
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dcc:	881a      	ldrh	r2, [r3, #0]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 ffa0 	bl	8007d1e <USBH_AllocPipe>
 8006dde:	4603      	mov	r3, r0
 8006de0:	461a      	mov	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	7819      	ldrb	r1, [r3, #0]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	7858      	ldrb	r0, [r3, #1]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	8952      	ldrh	r2, [r2, #10]
 8006dfe:	9202      	str	r2, [sp, #8]
 8006e00:	2203      	movs	r2, #3
 8006e02:	9201      	str	r2, [sp, #4]
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	4623      	mov	r3, r4
 8006e08:	4602      	mov	r2, r0
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 ff58 	bl	8007cc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2200      	movs	r2, #0
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 fa1b 	bl	8008254 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2200      	movs	r2, #0
 8006e22:	210a      	movs	r1, #10
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fbed 	bl	8007604 <USBH_FindInterface>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	2bff      	cmp	r3, #255	; 0xff
 8006e32:	d002      	beq.n	8006e3a <USBH_CDC_InterfaceInit+0x11a>
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d901      	bls.n	8006e3e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e0c2      	b.n	8006fc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	211a      	movs	r1, #26
 8006e44:	fb01 f303 	mul.w	r3, r1, r3
 8006e48:	4413      	add	r3, r2
 8006e4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	b25b      	sxtb	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	da16      	bge.n	8006e84 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	211a      	movs	r1, #26
 8006e5c:	fb01 f303 	mul.w	r3, r1, r3
 8006e60:	4413      	add	r3, r2
 8006e62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e66:	781a      	ldrb	r2, [r3, #0]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	211a      	movs	r1, #26
 8006e72:	fb01 f303 	mul.w	r3, r1, r3
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e7c:	881a      	ldrh	r2, [r3, #0]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	835a      	strh	r2, [r3, #26]
 8006e82:	e015      	b.n	8006eb0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	211a      	movs	r1, #26
 8006e8a:	fb01 f303 	mul.w	r3, r1, r3
 8006e8e:	4413      	add	r3, r2
 8006e90:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e94:	781a      	ldrb	r2, [r3, #0]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	211a      	movs	r1, #26
 8006ea0:	fb01 f303 	mul.w	r3, r1, r3
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006eaa:	881a      	ldrh	r2, [r3, #0]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	211a      	movs	r1, #26
 8006eb6:	fb01 f303 	mul.w	r3, r1, r3
 8006eba:	4413      	add	r3, r2
 8006ebc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	b25b      	sxtb	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	da16      	bge.n	8006ef6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	211a      	movs	r1, #26
 8006ece:	fb01 f303 	mul.w	r3, r1, r3
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	211a      	movs	r1, #26
 8006ee4:	fb01 f303 	mul.w	r3, r1, r3
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006eee:	881a      	ldrh	r2, [r3, #0]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	835a      	strh	r2, [r3, #26]
 8006ef4:	e015      	b.n	8006f22 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	211a      	movs	r1, #26
 8006efc:	fb01 f303 	mul.w	r3, r1, r3
 8006f00:	4413      	add	r3, r2
 8006f02:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f06:	781a      	ldrb	r2, [r3, #0]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	211a      	movs	r1, #26
 8006f12:	fb01 f303 	mul.w	r3, r1, r3
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f1c:	881a      	ldrh	r2, [r3, #0]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	7b9b      	ldrb	r3, [r3, #14]
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fef8 	bl	8007d1e <USBH_AllocPipe>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	461a      	mov	r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	7bdb      	ldrb	r3, [r3, #15]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 feee 	bl	8007d1e <USBH_AllocPipe>
 8006f42:	4603      	mov	r3, r0
 8006f44:	461a      	mov	r2, r3
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	7b59      	ldrb	r1, [r3, #13]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	7b98      	ldrb	r0, [r3, #14]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	8b12      	ldrh	r2, [r2, #24]
 8006f62:	9202      	str	r2, [sp, #8]
 8006f64:	2202      	movs	r2, #2
 8006f66:	9201      	str	r2, [sp, #4]
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	4623      	mov	r3, r4
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fea6 	bl	8007cc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	7b19      	ldrb	r1, [r3, #12]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	7bd8      	ldrb	r0, [r3, #15]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	8b52      	ldrh	r2, [r2, #26]
 8006f8c:	9202      	str	r2, [sp, #8]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	9201      	str	r2, [sp, #4]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	4623      	mov	r3, r4
 8006f96:	4602      	mov	r2, r0
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fe91 	bl	8007cc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	7b5b      	ldrb	r3, [r3, #13]
 8006faa:	2200      	movs	r2, #0
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 f950 	bl	8008254 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	7b1b      	ldrb	r3, [r3, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 f949 	bl	8008254 <USBH_LL_SetToggle>

  return USBH_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd90      	pop	{r4, r7, pc}

08006fcc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00e      	beq.n	8007004 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fe86 	bl	8007cfe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 feb1 	bl	8007d60 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	7b1b      	ldrb	r3, [r3, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00e      	beq.n	800702a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	7b1b      	ldrb	r3, [r3, #12]
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fe73 	bl	8007cfe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	7b1b      	ldrb	r3, [r3, #12]
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fe9e 	bl	8007d60 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	7b5b      	ldrb	r3, [r3, #13]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00e      	beq.n	8007050 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	7b5b      	ldrb	r3, [r3, #13]
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fe60 	bl	8007cfe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	7b5b      	ldrb	r3, [r3, #13]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fe8b 	bl	8007d60 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00b      	beq.n	8007074 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	4618      	mov	r0, r3
 8007066:	f001 f9a3 	bl	80083b0 <free>
    phost->pActiveClass->pData = 0U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007070:	2200      	movs	r2, #0
 8007072:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3340      	adds	r3, #64	; 0x40
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f8b1 	bl	80071fe <GetLineCoding>
 800709c:	4603      	mov	r3, r0
 800709e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80070a0:	7afb      	ldrb	r3, [r7, #11]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d105      	bne.n	80070b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070ac:	2102      	movs	r1, #2
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80070b2:	7afb      	ldrb	r3, [r7, #11]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80070c4:	2301      	movs	r3, #1
 80070c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d877      	bhi.n	80071d0 <USBH_CDC_Process+0x114>
 80070e0:	a201      	add	r2, pc, #4	; (adr r2, 80070e8 <USBH_CDC_Process+0x2c>)
 80070e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e6:	bf00      	nop
 80070e8:	080070fd 	.word	0x080070fd
 80070ec:	08007103 	.word	0x08007103
 80070f0:	08007133 	.word	0x08007133
 80070f4:	080071a7 	.word	0x080071a7
 80070f8:	080071b5 	.word	0x080071b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007100:	e06d      	b.n	80071de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f897 	bl	800723c <SetLineCoding>
 800710e:	4603      	mov	r3, r0
 8007110:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d104      	bne.n	8007122 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007120:	e058      	b.n	80071d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007122:	7bbb      	ldrb	r3, [r7, #14]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d055      	beq.n	80071d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2204      	movs	r2, #4
 800712c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007130:	e050      	b.n	80071d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	3340      	adds	r3, #64	; 0x40
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f860 	bl	80071fe <GetLineCoding>
 800713e:	4603      	mov	r3, r0
 8007140:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d126      	bne.n	8007196 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800715a:	791b      	ldrb	r3, [r3, #4]
 800715c:	429a      	cmp	r2, r3
 800715e:	d13b      	bne.n	80071d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800716a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800716c:	429a      	cmp	r2, r3
 800716e:	d133      	bne.n	80071d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800717a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800717c:	429a      	cmp	r2, r3
 800717e:	d12b      	bne.n	80071d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007188:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800718a:	429a      	cmp	r2, r3
 800718c:	d124      	bne.n	80071d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f95a 	bl	8007448 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007194:	e020      	b.n	80071d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d01d      	beq.n	80071d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2204      	movs	r2, #4
 80071a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80071a4:	e018      	b.n	80071d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f867 	bl	800727a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f8dc 	bl	800736a <CDC_ProcessReception>
      break;
 80071b2:	e014      	b.n	80071de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80071b4:	2100      	movs	r1, #0
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fb0a 	bl	80077d0 <USBH_ClrFeature>
 80071bc:	4603      	mov	r3, r0
 80071be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10a      	bne.n	80071dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80071ce:	e005      	b.n	80071dc <USBH_CDC_Process+0x120>

    default:
      break;
 80071d0:	bf00      	nop
 80071d2:	e004      	b.n	80071de <USBH_CDC_Process+0x122>
      break;
 80071d4:	bf00      	nop
 80071d6:	e002      	b.n	80071de <USBH_CDC_Process+0x122>
      break;
 80071d8:	bf00      	nop
 80071da:	e000      	b.n	80071de <USBH_CDC_Process+0x122>
      break;
 80071dc:	bf00      	nop

  }

  return status;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	22a1      	movs	r2, #161	; 0xa1
 800720c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2221      	movs	r2, #33	; 0x21
 8007212:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2207      	movs	r2, #7
 8007224:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2207      	movs	r2, #7
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 faf3 	bl	8007818 <USBH_CtlReq>
 8007232:	4603      	mov	r3, r0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2221      	movs	r2, #33	; 0x21
 800724a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2220      	movs	r2, #32
 8007250:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2207      	movs	r2, #7
 8007262:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2207      	movs	r2, #7
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fad4 	bl	8007818 <USBH_CtlReq>
 8007270:	4603      	mov	r3, r0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b086      	sub	sp, #24
 800727e:	af02      	add	r7, sp, #8
 8007280:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800728c:	2300      	movs	r3, #0
 800728e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007296:	2b01      	cmp	r3, #1
 8007298:	d002      	beq.n	80072a0 <CDC_ProcessTransmission+0x26>
 800729a:	2b02      	cmp	r3, #2
 800729c:	d025      	beq.n	80072ea <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800729e:	e060      	b.n	8007362 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	8b12      	ldrh	r2, [r2, #24]
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d90c      	bls.n	80072c6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	69d9      	ldr	r1, [r3, #28]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8b1a      	ldrh	r2, [r3, #24]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	7b58      	ldrb	r0, [r3, #13]
 80072b8:	2301      	movs	r3, #1
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	4603      	mov	r3, r0
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fcbb 	bl	8007c3a <USBH_BulkSendData>
 80072c4:	e00c      	b.n	80072e0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	7b58      	ldrb	r0, [r3, #13]
 80072d4:	2301      	movs	r3, #1
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	4603      	mov	r3, r0
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fcad 	bl	8007c3a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072e8:	e03b      	b.n	8007362 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	7b5b      	ldrb	r3, [r3, #13]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 ff85 	bl	8008200 <USBH_LL_GetURBState>
 80072f6:	4603      	mov	r3, r0
 80072f8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80072fa:	7afb      	ldrb	r3, [r7, #11]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d128      	bne.n	8007352 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	8b12      	ldrh	r2, [r2, #24]
 8007308:	4293      	cmp	r3, r2
 800730a:	d90e      	bls.n	800732a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	8b12      	ldrh	r2, [r2, #24]
 8007314:	1a9a      	subs	r2, r3, r2
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	8b12      	ldrh	r2, [r2, #24]
 8007322:	441a      	add	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	61da      	str	r2, [r3, #28]
 8007328:	e002      	b.n	8007330 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	2b00      	cmp	r3, #0
 8007336:	d004      	beq.n	8007342 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007340:	e00e      	b.n	8007360 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f868 	bl	8007420 <USBH_CDC_TransmitCallback>
      break;
 8007350:	e006      	b.n	8007360 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007352:	7afb      	ldrb	r3, [r7, #11]
 8007354:	2b02      	cmp	r3, #2
 8007356:	d103      	bne.n	8007360 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007360:	bf00      	nop
  }
}
 8007362:	bf00      	nop
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b086      	sub	sp, #24
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800737c:	2300      	movs	r3, #0
 800737e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007386:	2b03      	cmp	r3, #3
 8007388:	d002      	beq.n	8007390 <CDC_ProcessReception+0x26>
 800738a:	2b04      	cmp	r3, #4
 800738c:	d00e      	beq.n	80073ac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800738e:	e043      	b.n	8007418 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	6a19      	ldr	r1, [r3, #32]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	8b5a      	ldrh	r2, [r3, #26]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	7b1b      	ldrb	r3, [r3, #12]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fc71 	bl	8007c84 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2204      	movs	r2, #4
 80073a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80073aa:	e035      	b.n	8007418 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	7b1b      	ldrb	r3, [r3, #12]
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 ff24 	bl	8008200 <USBH_LL_GetURBState>
 80073b8:	4603      	mov	r3, r0
 80073ba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80073bc:	7cfb      	ldrb	r3, [r7, #19]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d129      	bne.n	8007416 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	7b1b      	ldrb	r3, [r3, #12]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fe87 	bl	80080dc <USBH_LL_GetLastXferSize>
 80073ce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d016      	beq.n	8007408 <CDC_ProcessReception+0x9e>
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	8b5b      	ldrh	r3, [r3, #26]
 80073de:	461a      	mov	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d910      	bls.n	8007408 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	1ad2      	subs	r2, r2, r3
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	6a1a      	ldr	r2, [r3, #32]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	441a      	add	r2, r3
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2203      	movs	r2, #3
 8007402:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007406:	e006      	b.n	8007416 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f80f 	bl	8007434 <USBH_CDC_ReceiveCallback>
      break;
 8007416:	bf00      	nop
  }
}
 8007418:	bf00      	nop
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	4613      	mov	r3, r2
 8007468:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007470:	2302      	movs	r3, #2
 8007472:	e029      	b.n	80074c8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	79fa      	ldrb	r2, [r7, #7]
 8007478:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f81f 	bl	80074d0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 fd99 	bl	8007ff8 <USBH_LL_Init>

  return USBH_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	e009      	b.n	80074f6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	33e0      	adds	r3, #224	; 0xe0
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	2200      	movs	r2, #0
 80074ee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3301      	adds	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b0e      	cmp	r3, #14
 80074fa:	d9f2      	bls.n	80074e2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	e009      	b.n	8007516 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800750c:	2200      	movs	r2, #0
 800750e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3301      	adds	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800751c:	d3f1      	bcc.n	8007502 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2240      	movs	r2, #64	; 0x40
 8007542:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d016      	beq.n	80075ba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10e      	bne.n	80075b4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800759c:	1c59      	adds	r1, r3, #1
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	33de      	adds	r3, #222	; 0xde
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	73fb      	strb	r3, [r7, #15]
 80075b2:	e004      	b.n	80075be <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80075b4:	2302      	movs	r3, #2
 80075b6:	73fb      	strb	r3, [r7, #15]
 80075b8:	e001      	b.n	80075be <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80075ba:	2302      	movs	r3, #2
 80075bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80075e2:	78fa      	ldrb	r2, [r7, #3]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d204      	bcs.n	80075f2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	78fa      	ldrb	r2, [r7, #3]
 80075ec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80075f0:	e001      	b.n	80075f6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80075f2:	2302      	movs	r3, #2
 80075f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	4608      	mov	r0, r1
 800760e:	4611      	mov	r1, r2
 8007610:	461a      	mov	r2, r3
 8007612:	4603      	mov	r3, r0
 8007614:	70fb      	strb	r3, [r7, #3]
 8007616:	460b      	mov	r3, r1
 8007618:	70bb      	strb	r3, [r7, #2]
 800761a:	4613      	mov	r3, r2
 800761c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007622:	2300      	movs	r3, #0
 8007624:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800762c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800762e:	e025      	b.n	800767c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	221a      	movs	r2, #26
 8007634:	fb02 f303 	mul.w	r3, r2, r3
 8007638:	3308      	adds	r3, #8
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4413      	add	r3, r2
 800763e:	3302      	adds	r3, #2
 8007640:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	795b      	ldrb	r3, [r3, #5]
 8007646:	78fa      	ldrb	r2, [r7, #3]
 8007648:	429a      	cmp	r2, r3
 800764a:	d002      	beq.n	8007652 <USBH_FindInterface+0x4e>
 800764c:	78fb      	ldrb	r3, [r7, #3]
 800764e:	2bff      	cmp	r3, #255	; 0xff
 8007650:	d111      	bne.n	8007676 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007656:	78ba      	ldrb	r2, [r7, #2]
 8007658:	429a      	cmp	r2, r3
 800765a:	d002      	beq.n	8007662 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800765c:	78bb      	ldrb	r3, [r7, #2]
 800765e:	2bff      	cmp	r3, #255	; 0xff
 8007660:	d109      	bne.n	8007676 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007666:	787a      	ldrb	r2, [r7, #1]
 8007668:	429a      	cmp	r2, r3
 800766a:	d002      	beq.n	8007672 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800766c:	787b      	ldrb	r3, [r7, #1]
 800766e:	2bff      	cmp	r3, #255	; 0xff
 8007670:	d101      	bne.n	8007676 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	e006      	b.n	8007684 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	3301      	adds	r3, #1
 800767a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d9d6      	bls.n	8007630 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007682:	23ff      	movs	r3, #255	; 0xff
}
 8007684:	4618      	mov	r0, r3
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fce9 	bl	8008070 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800769e:	2101      	movs	r1, #1
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fdc0 	bl	8008226 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f804 	bl	80076f2 <USBH_HandleSof>
}
 80076ea:	bf00      	nop
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b0b      	cmp	r3, #11
 8007702:	d10a      	bne.n	800771a <USBH_HandleSof+0x28>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
  }
}
 800771a:	bf00      	nop
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007732:	bf00      	nop
}
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800774e:	bf00      	nop
}
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fc7c 	bl	80080a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	791b      	ldrb	r3, [r3, #4]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fad3 	bl	8007d60 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	795b      	ldrb	r3, [r3, #5]
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 facd 	bl	8007d60 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	789b      	ldrb	r3, [r3, #2]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d10f      	bne.n	8007804 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80077f6:	78fb      	ldrb	r3, [r7, #3]
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007804:	2200      	movs	r2, #0
 8007806:	2100      	movs	r1, #0
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f805 	bl	8007818 <USBH_CtlReq>
 800780e:	4603      	mov	r3, r0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	4613      	mov	r3, r2
 8007824:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007826:	2301      	movs	r3, #1
 8007828:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	789b      	ldrb	r3, [r3, #2]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d002      	beq.n	8007838 <USBH_CtlReq+0x20>
 8007832:	2b02      	cmp	r3, #2
 8007834:	d00f      	beq.n	8007856 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007836:	e027      	b.n	8007888 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	88fa      	ldrh	r2, [r7, #6]
 8007842:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2202      	movs	r2, #2
 800784e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007850:	2301      	movs	r3, #1
 8007852:	75fb      	strb	r3, [r7, #23]
      break;
 8007854:	e018      	b.n	8007888 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 f81c 	bl	8007894 <USBH_HandleControl>
 800785c:	4603      	mov	r3, r0
 800785e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <USBH_CtlReq+0x54>
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	2b03      	cmp	r3, #3
 800786a:	d106      	bne.n	800787a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	761a      	strb	r2, [r3, #24]
      break;
 8007878:	e005      	b.n	8007886 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800787a:	7dfb      	ldrb	r3, [r7, #23]
 800787c:	2b02      	cmp	r3, #2
 800787e:	d102      	bne.n	8007886 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2201      	movs	r2, #1
 8007884:	709a      	strb	r2, [r3, #2]
      break;
 8007886:	bf00      	nop
  }
  return status;
 8007888:	7dfb      	ldrb	r3, [r7, #23]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3718      	adds	r7, #24
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af02      	add	r7, sp, #8
 800789a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800789c:	2301      	movs	r3, #1
 800789e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	7e1b      	ldrb	r3, [r3, #24]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	2b0a      	cmp	r3, #10
 80078ac:	f200 8158 	bhi.w	8007b60 <USBH_HandleControl+0x2cc>
 80078b0:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <USBH_HandleControl+0x24>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078e5 	.word	0x080078e5
 80078bc:	080078ff 	.word	0x080078ff
 80078c0:	08007969 	.word	0x08007969
 80078c4:	0800798f 	.word	0x0800798f
 80078c8:	080079c7 	.word	0x080079c7
 80078cc:	080079f3 	.word	0x080079f3
 80078d0:	08007a45 	.word	0x08007a45
 80078d4:	08007a67 	.word	0x08007a67
 80078d8:	08007aa3 	.word	0x08007aa3
 80078dc:	08007acb 	.word	0x08007acb
 80078e0:	08007b09 	.word	0x08007b09
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f103 0110 	add.w	r1, r3, #16
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	795b      	ldrb	r3, [r3, #5]
 80078ee:	461a      	mov	r2, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f945 	bl	8007b80 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2202      	movs	r2, #2
 80078fa:	761a      	strb	r2, [r3, #24]
      break;
 80078fc:	e13b      	b.n	8007b76 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	795b      	ldrb	r3, [r3, #5]
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fc7b 	bl	8008200 <USBH_LL_GetURBState>
 800790a:	4603      	mov	r3, r0
 800790c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d11e      	bne.n	8007952 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	7c1b      	ldrb	r3, [r3, #16]
 8007918:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800791c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	8adb      	ldrh	r3, [r3, #22]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007926:	7b7b      	ldrb	r3, [r7, #13]
 8007928:	2b80      	cmp	r3, #128	; 0x80
 800792a:	d103      	bne.n	8007934 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2203      	movs	r2, #3
 8007930:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007932:	e117      	b.n	8007b64 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2205      	movs	r2, #5
 8007938:	761a      	strb	r2, [r3, #24]
      break;
 800793a:	e113      	b.n	8007b64 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800793c:	7b7b      	ldrb	r3, [r7, #13]
 800793e:	2b80      	cmp	r3, #128	; 0x80
 8007940:	d103      	bne.n	800794a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2209      	movs	r2, #9
 8007946:	761a      	strb	r2, [r3, #24]
      break;
 8007948:	e10c      	b.n	8007b64 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2207      	movs	r2, #7
 800794e:	761a      	strb	r2, [r3, #24]
      break;
 8007950:	e108      	b.n	8007b64 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	2b04      	cmp	r3, #4
 8007956:	d003      	beq.n	8007960 <USBH_HandleControl+0xcc>
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	2b02      	cmp	r3, #2
 800795c:	f040 8102 	bne.w	8007b64 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	220b      	movs	r2, #11
 8007964:	761a      	strb	r2, [r3, #24]
      break;
 8007966:	e0fd      	b.n	8007b64 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800796e:	b29a      	uxth	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6899      	ldr	r1, [r3, #8]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	899a      	ldrh	r2, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	791b      	ldrb	r3, [r3, #4]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f93c 	bl	8007bfe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2204      	movs	r2, #4
 800798a:	761a      	strb	r2, [r3, #24]
      break;
 800798c:	e0f3      	b.n	8007b76 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	791b      	ldrb	r3, [r3, #4]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fc33 	bl	8008200 <USBH_LL_GetURBState>
 800799a:	4603      	mov	r3, r0
 800799c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d102      	bne.n	80079aa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2209      	movs	r2, #9
 80079a8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b05      	cmp	r3, #5
 80079ae:	d102      	bne.n	80079b6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80079b0:	2303      	movs	r3, #3
 80079b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079b4:	e0d8      	b.n	8007b68 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	f040 80d5 	bne.w	8007b68 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	220b      	movs	r2, #11
 80079c2:	761a      	strb	r2, [r3, #24]
      break;
 80079c4:	e0d0      	b.n	8007b68 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6899      	ldr	r1, [r3, #8]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	899a      	ldrh	r2, [r3, #12]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	7958      	ldrb	r0, [r3, #5]
 80079d2:	2301      	movs	r3, #1
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	4603      	mov	r3, r0
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f8eb 	bl	8007bb4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2206      	movs	r2, #6
 80079ee:	761a      	strb	r2, [r3, #24]
      break;
 80079f0:	e0c1      	b.n	8007b76 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	795b      	ldrb	r3, [r3, #5]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fc01 	bl	8008200 <USBH_LL_GetURBState>
 80079fe:	4603      	mov	r3, r0
 8007a00:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d103      	bne.n	8007a10 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2207      	movs	r2, #7
 8007a0c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a0e:	e0ad      	b.n	8007b6c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b05      	cmp	r3, #5
 8007a14:	d105      	bne.n	8007a22 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	220c      	movs	r2, #12
 8007a1a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a20:	e0a4      	b.n	8007b6c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d103      	bne.n	8007a30 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2205      	movs	r2, #5
 8007a2c:	761a      	strb	r2, [r3, #24]
      break;
 8007a2e:	e09d      	b.n	8007b6c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	f040 809a 	bne.w	8007b6c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	220b      	movs	r2, #11
 8007a3c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a3e:	2302      	movs	r3, #2
 8007a40:	73fb      	strb	r3, [r7, #15]
      break;
 8007a42:	e093      	b.n	8007b6c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	791b      	ldrb	r3, [r3, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f8d6 	bl	8007bfe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2208      	movs	r2, #8
 8007a62:	761a      	strb	r2, [r3, #24]

      break;
 8007a64:	e087      	b.n	8007b76 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	791b      	ldrb	r3, [r3, #4]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fbc7 	bl	8008200 <USBH_LL_GetURBState>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d105      	bne.n	8007a88 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	220d      	movs	r2, #13
 8007a80:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a86:	e073      	b.n	8007b70 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d103      	bne.n	8007a96 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	220b      	movs	r2, #11
 8007a92:	761a      	strb	r2, [r3, #24]
      break;
 8007a94:	e06c      	b.n	8007b70 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	2b05      	cmp	r3, #5
 8007a9a:	d169      	bne.n	8007b70 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa0:	e066      	b.n	8007b70 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	795a      	ldrb	r2, [r3, #5]
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	2200      	movs	r2, #0
 8007aae:	2100      	movs	r1, #0
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f87f 	bl	8007bb4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	220a      	movs	r2, #10
 8007ac6:	761a      	strb	r2, [r3, #24]
      break;
 8007ac8:	e055      	b.n	8007b76 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	795b      	ldrb	r3, [r3, #5]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fb95 	bl	8008200 <USBH_LL_GetURBState>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d105      	bne.n	8007aec <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	220d      	movs	r2, #13
 8007ae8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007aea:	e043      	b.n	8007b74 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d103      	bne.n	8007afa <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2209      	movs	r2, #9
 8007af6:	761a      	strb	r2, [r3, #24]
      break;
 8007af8:	e03c      	b.n	8007b74 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	d139      	bne.n	8007b74 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	220b      	movs	r2, #11
 8007b04:	761a      	strb	r2, [r3, #24]
      break;
 8007b06:	e035      	b.n	8007b74 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	7e5b      	ldrb	r3, [r3, #25]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	765a      	strb	r2, [r3, #25]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	7e5b      	ldrb	r3, [r3, #25]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d806      	bhi.n	8007b2a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b28:	e025      	b.n	8007b76 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b30:	2106      	movs	r1, #6
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	795b      	ldrb	r3, [r3, #5]
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f90c 	bl	8007d60 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	791b      	ldrb	r3, [r3, #4]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f906 	bl	8007d60 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b5e:	e00a      	b.n	8007b76 <USBH_HandleControl+0x2e2>

    default:
      break;
 8007b60:	bf00      	nop
 8007b62:	e008      	b.n	8007b76 <USBH_HandleControl+0x2e2>
      break;
 8007b64:	bf00      	nop
 8007b66:	e006      	b.n	8007b76 <USBH_HandleControl+0x2e2>
      break;
 8007b68:	bf00      	nop
 8007b6a:	e004      	b.n	8007b76 <USBH_HandleControl+0x2e2>
      break;
 8007b6c:	bf00      	nop
 8007b6e:	e002      	b.n	8007b76 <USBH_HandleControl+0x2e2>
      break;
 8007b70:	bf00      	nop
 8007b72:	e000      	b.n	8007b76 <USBH_HandleControl+0x2e2>
      break;
 8007b74:	bf00      	nop
  }

  return status;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af04      	add	r7, sp, #16
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b8e:	79f9      	ldrb	r1, [r7, #7]
 8007b90:	2300      	movs	r3, #0
 8007b92:	9303      	str	r3, [sp, #12]
 8007b94:	2308      	movs	r3, #8
 8007b96:	9302      	str	r3, [sp, #8]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fafa 	bl	800819e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af04      	add	r7, sp, #16
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	80fb      	strh	r3, [r7, #6]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bd8:	7979      	ldrb	r1, [r7, #5]
 8007bda:	7e3b      	ldrb	r3, [r7, #24]
 8007bdc:	9303      	str	r3, [sp, #12]
 8007bde:	88fb      	ldrh	r3, [r7, #6]
 8007be0:	9302      	str	r3, [sp, #8]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	9301      	str	r3, [sp, #4]
 8007be6:	2301      	movs	r3, #1
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	2300      	movs	r3, #0
 8007bec:	2200      	movs	r2, #0
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 fad5 	bl	800819e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b088      	sub	sp, #32
 8007c02:	af04      	add	r7, sp, #16
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	4611      	mov	r1, r2
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	80fb      	strh	r3, [r7, #6]
 8007c10:	4613      	mov	r3, r2
 8007c12:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c14:	7979      	ldrb	r1, [r7, #5]
 8007c16:	2300      	movs	r3, #0
 8007c18:	9303      	str	r3, [sp, #12]
 8007c1a:	88fb      	ldrh	r3, [r7, #6]
 8007c1c:	9302      	str	r3, [sp, #8]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	2301      	movs	r3, #1
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	2300      	movs	r3, #0
 8007c28:	2201      	movs	r2, #1
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fab7 	bl	800819e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007c30:	2300      	movs	r3, #0

}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b088      	sub	sp, #32
 8007c3e:	af04      	add	r7, sp, #16
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	4611      	mov	r1, r2
 8007c46:	461a      	mov	r2, r3
 8007c48:	460b      	mov	r3, r1
 8007c4a:	80fb      	strh	r3, [r7, #6]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c5e:	7979      	ldrb	r1, [r7, #5]
 8007c60:	7e3b      	ldrb	r3, [r7, #24]
 8007c62:	9303      	str	r3, [sp, #12]
 8007c64:	88fb      	ldrh	r3, [r7, #6]
 8007c66:	9302      	str	r3, [sp, #8]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	9301      	str	r3, [sp, #4]
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	2302      	movs	r3, #2
 8007c72:	2200      	movs	r2, #0
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 fa92 	bl	800819e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af04      	add	r7, sp, #16
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	4611      	mov	r1, r2
 8007c90:	461a      	mov	r2, r3
 8007c92:	460b      	mov	r3, r1
 8007c94:	80fb      	strh	r3, [r7, #6]
 8007c96:	4613      	mov	r3, r2
 8007c98:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c9a:	7979      	ldrb	r1, [r7, #5]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9303      	str	r3, [sp, #12]
 8007ca0:	88fb      	ldrh	r3, [r7, #6]
 8007ca2:	9302      	str	r3, [sp, #8]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	2301      	movs	r3, #1
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	2302      	movs	r3, #2
 8007cae:	2201      	movs	r2, #1
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 fa74 	bl	800819e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af04      	add	r7, sp, #16
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	4608      	mov	r0, r1
 8007cca:	4611      	mov	r1, r2
 8007ccc:	461a      	mov	r2, r3
 8007cce:	4603      	mov	r3, r0
 8007cd0:	70fb      	strb	r3, [r7, #3]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70bb      	strb	r3, [r7, #2]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007cda:	7878      	ldrb	r0, [r7, #1]
 8007cdc:	78ba      	ldrb	r2, [r7, #2]
 8007cde:	78f9      	ldrb	r1, [r7, #3]
 8007ce0:	8b3b      	ldrh	r3, [r7, #24]
 8007ce2:	9302      	str	r3, [sp, #8]
 8007ce4:	7d3b      	ldrb	r3, [r7, #20]
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	7c3b      	ldrb	r3, [r7, #16]
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	4603      	mov	r3, r0
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa07 	bl	8008102 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	460b      	mov	r3, r1
 8007d08:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa26 	bl	8008160 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	460b      	mov	r3, r1
 8007d28:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f836 	bl	8007d9c <USBH_GetFreePipe>
 8007d30:	4603      	mov	r3, r0
 8007d32:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d34:	89fb      	ldrh	r3, [r7, #14]
 8007d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00a      	beq.n	8007d54 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007d3e:	78fa      	ldrb	r2, [r7, #3]
 8007d40:	89fb      	ldrh	r3, [r7, #14]
 8007d42:	f003 030f 	and.w	r3, r3, #15
 8007d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	33e0      	adds	r3, #224	; 0xe0
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	440b      	add	r3, r1
 8007d52:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d54:	89fb      	ldrh	r3, [r7, #14]
 8007d56:	b2db      	uxtb	r3, r3
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	2b0a      	cmp	r3, #10
 8007d70:	d80d      	bhi.n	8007d8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	33e0      	adds	r3, #224	; 0xe0
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	33e0      	adds	r3, #224	; 0xe0
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007da8:	2300      	movs	r3, #0
 8007daa:	73fb      	strb	r3, [r7, #15]
 8007dac:	e00f      	b.n	8007dce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	33e0      	adds	r3, #224	; 0xe0
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d102      	bne.n	8007dc8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	e007      	b.n	8007dd8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	73fb      	strb	r3, [r7, #15]
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	2b0a      	cmp	r3, #10
 8007dd2:	d9ec      	bls.n	8007dae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007de8:	2201      	movs	r2, #1
 8007dea:	490e      	ldr	r1, [pc, #56]	; (8007e24 <MX_USB_HOST_Init+0x40>)
 8007dec:	480e      	ldr	r0, [pc, #56]	; (8007e28 <MX_USB_HOST_Init+0x44>)
 8007dee:	f7ff fb35 	bl	800745c <USBH_Init>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007df8:	f7f8 ff26 	bl	8000c48 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007dfc:	490b      	ldr	r1, [pc, #44]	; (8007e2c <MX_USB_HOST_Init+0x48>)
 8007dfe:	480a      	ldr	r0, [pc, #40]	; (8007e28 <MX_USB_HOST_Init+0x44>)
 8007e00:	f7ff fbba 	bl	8007578 <USBH_RegisterClass>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e0a:	f7f8 ff1d 	bl	8000c48 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e0e:	4806      	ldr	r0, [pc, #24]	; (8007e28 <MX_USB_HOST_Init+0x44>)
 8007e10:	f7ff fc3e 	bl	8007690 <USBH_Start>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e1a:	f7f8 ff15 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e1e:	bf00      	nop
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	08007e31 	.word	0x08007e31
 8007e28:	20000280 	.word	0x20000280
 8007e2c:	2000000c 	.word	0x2000000c

08007e30 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d819      	bhi.n	8007e78 <USBH_UserProcess+0x48>
 8007e44:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <USBH_UserProcess+0x1c>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007e79 	.word	0x08007e79
 8007e50:	08007e69 	.word	0x08007e69
 8007e54:	08007e79 	.word	0x08007e79
 8007e58:	08007e71 	.word	0x08007e71
 8007e5c:	08007e61 	.word	0x08007e61
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e60:	4b09      	ldr	r3, [pc, #36]	; (8007e88 <USBH_UserProcess+0x58>)
 8007e62:	2203      	movs	r2, #3
 8007e64:	701a      	strb	r2, [r3, #0]
  break;
 8007e66:	e008      	b.n	8007e7a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e68:	4b07      	ldr	r3, [pc, #28]	; (8007e88 <USBH_UserProcess+0x58>)
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	701a      	strb	r2, [r3, #0]
  break;
 8007e6e:	e004      	b.n	8007e7a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <USBH_UserProcess+0x58>)
 8007e72:	2201      	movs	r2, #1
 8007e74:	701a      	strb	r2, [r3, #0]
  break;
 8007e76:	e000      	b.n	8007e7a <USBH_UserProcess+0x4a>

  default:
  break;
 8007e78:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	200000bc 	.word	0x200000bc

08007e8c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08a      	sub	sp, #40	; 0x28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e94:	f107 0314 	add.w	r3, r7, #20
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	605a      	str	r2, [r3, #4]
 8007e9e:	609a      	str	r2, [r3, #8]
 8007ea0:	60da      	str	r2, [r3, #12]
 8007ea2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eac:	d147      	bne.n	8007f3e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eae:	2300      	movs	r3, #0
 8007eb0:	613b      	str	r3, [r7, #16]
 8007eb2:	4b25      	ldr	r3, [pc, #148]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	4a24      	ldr	r2, [pc, #144]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007eb8:	f043 0301 	orr.w	r3, r3, #1
 8007ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ebe:	4b22      	ldr	r3, [pc, #136]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	613b      	str	r3, [r7, #16]
 8007ec8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4619      	mov	r1, r3
 8007ede:	481b      	ldr	r0, [pc, #108]	; (8007f4c <HAL_HCD_MspInit+0xc0>)
 8007ee0:	f7f9 faa6 	bl	8001430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007ee4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eea:	2302      	movs	r3, #2
 8007eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ef6:	230a      	movs	r3, #10
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007efa:	f107 0314 	add.w	r3, r7, #20
 8007efe:	4619      	mov	r1, r3
 8007f00:	4812      	ldr	r0, [pc, #72]	; (8007f4c <HAL_HCD_MspInit+0xc0>)
 8007f02:	f7f9 fa95 	bl	8001430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f06:	4b10      	ldr	r3, [pc, #64]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0a:	4a0f      	ldr	r2, [pc, #60]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f10:	6353      	str	r3, [r2, #52]	; 0x34
 8007f12:	2300      	movs	r3, #0
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1a:	4a0b      	ldr	r2, [pc, #44]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f20:	6453      	str	r3, [r2, #68]	; 0x44
 8007f22:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2100      	movs	r1, #0
 8007f32:	2043      	movs	r0, #67	; 0x43
 8007f34:	f7f9 fa45 	bl	80013c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f38:	2043      	movs	r0, #67	; 0x43
 8007f3a:	f7f9 fa5e 	bl	80013fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f3e:	bf00      	nop
 8007f40:	3728      	adds	r7, #40	; 0x28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	40023800 	.word	0x40023800
 8007f4c:	40020000 	.word	0x40020000

08007f50 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7ff fbb5 	bl	80076ce <USBH_LL_IncTimer>
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7ff fbed 	bl	800775a <USBH_LL_Connect>
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff fbf6 	bl	8007788 <USBH_LL_Disconnect>
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff fba7 	bl	8007722 <USBH_LL_PortEnabled>
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff fba7 	bl	800773e <USBH_LL_PortDisabled>
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008006:	2b01      	cmp	r3, #1
 8008008:	d12a      	bne.n	8008060 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800800a:	4a18      	ldr	r2, [pc, #96]	; (800806c <USBH_LL_Init+0x74>)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a15      	ldr	r2, [pc, #84]	; (800806c <USBH_LL_Init+0x74>)
 8008016:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800801a:	4b14      	ldr	r3, [pc, #80]	; (800806c <USBH_LL_Init+0x74>)
 800801c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008020:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008022:	4b12      	ldr	r3, [pc, #72]	; (800806c <USBH_LL_Init+0x74>)
 8008024:	2208      	movs	r2, #8
 8008026:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008028:	4b10      	ldr	r3, [pc, #64]	; (800806c <USBH_LL_Init+0x74>)
 800802a:	2201      	movs	r2, #1
 800802c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800802e:	4b0f      	ldr	r3, [pc, #60]	; (800806c <USBH_LL_Init+0x74>)
 8008030:	2200      	movs	r2, #0
 8008032:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008034:	4b0d      	ldr	r3, [pc, #52]	; (800806c <USBH_LL_Init+0x74>)
 8008036:	2202      	movs	r2, #2
 8008038:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800803a:	4b0c      	ldr	r3, [pc, #48]	; (800806c <USBH_LL_Init+0x74>)
 800803c:	2200      	movs	r2, #0
 800803e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008040:	480a      	ldr	r0, [pc, #40]	; (800806c <USBH_LL_Init+0x74>)
 8008042:	f7f9 fba8 	bl	8001796 <HAL_HCD_Init>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800804c:	f7f8 fdfc 	bl	8000c48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008050:	4806      	ldr	r0, [pc, #24]	; (800806c <USBH_LL_Init+0x74>)
 8008052:	f7f9 ff9d 	bl	8001f90 <HAL_HCD_GetCurrentFrame>
 8008056:	4603      	mov	r3, r0
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff fb28 	bl	80076b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000658 	.word	0x20000658

08008070 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008086:	4618      	mov	r0, r3
 8008088:	f7f9 ff18 	bl	8001ebc <HAL_HCD_Start>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 f912 	bl	80082bc <USBH_Get_USB_Status>
 8008098:	4603      	mov	r3, r0
 800809a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800809c:	7bbb      	ldrb	r3, [r7, #14]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080bc:	4618      	mov	r0, r3
 80080be:	f7f9 ff20 	bl	8001f02 <HAL_HCD_Stop>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 f8f7 	bl	80082bc <USBH_Get_USB_Status>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ee:	78fa      	ldrb	r2, [r7, #3]
 80080f0:	4611      	mov	r1, r2
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7f9 ff37 	bl	8001f66 <HAL_HCD_HC_GetXferCount>
 80080f8:	4603      	mov	r3, r0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008102:	b590      	push	{r4, r7, lr}
 8008104:	b089      	sub	sp, #36	; 0x24
 8008106:	af04      	add	r7, sp, #16
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	4608      	mov	r0, r1
 800810c:	4611      	mov	r1, r2
 800810e:	461a      	mov	r2, r3
 8008110:	4603      	mov	r3, r0
 8008112:	70fb      	strb	r3, [r7, #3]
 8008114:	460b      	mov	r3, r1
 8008116:	70bb      	strb	r3, [r7, #2]
 8008118:	4613      	mov	r3, r2
 800811a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800812a:	787c      	ldrb	r4, [r7, #1]
 800812c:	78ba      	ldrb	r2, [r7, #2]
 800812e:	78f9      	ldrb	r1, [r7, #3]
 8008130:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008132:	9302      	str	r3, [sp, #8]
 8008134:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	4623      	mov	r3, r4
 8008142:	f7f9 fb8a 	bl	800185a <HAL_HCD_HC_Init>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	4618      	mov	r0, r3
 800814e:	f000 f8b5 	bl	80082bc <USBH_Get_USB_Status>
 8008152:	4603      	mov	r3, r0
 8008154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008156:	7bbb      	ldrb	r3, [r7, #14]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	bd90      	pop	{r4, r7, pc}

08008160 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800817a:	78fa      	ldrb	r2, [r7, #3]
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f7f9 fc03 	bl	800198a <HAL_HCD_HC_Halt>
 8008184:	4603      	mov	r3, r0
 8008186:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 f896 	bl	80082bc <USBH_Get_USB_Status>
 8008190:	4603      	mov	r3, r0
 8008192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008194:	7bbb      	ldrb	r3, [r7, #14]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800819e:	b590      	push	{r4, r7, lr}
 80081a0:	b089      	sub	sp, #36	; 0x24
 80081a2:	af04      	add	r7, sp, #16
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	4608      	mov	r0, r1
 80081a8:	4611      	mov	r1, r2
 80081aa:	461a      	mov	r2, r3
 80081ac:	4603      	mov	r3, r0
 80081ae:	70fb      	strb	r3, [r7, #3]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70bb      	strb	r3, [r7, #2]
 80081b4:	4613      	mov	r3, r2
 80081b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081c6:	787c      	ldrb	r4, [r7, #1]
 80081c8:	78ba      	ldrb	r2, [r7, #2]
 80081ca:	78f9      	ldrb	r1, [r7, #3]
 80081cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081d0:	9303      	str	r3, [sp, #12]
 80081d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081d4:	9302      	str	r3, [sp, #8]
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	4623      	mov	r3, r4
 80081e2:	f7f9 fbf5 	bl	80019d0 <HAL_HCD_HC_SubmitRequest>
 80081e6:	4603      	mov	r3, r0
 80081e8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 f865 	bl	80082bc <USBH_Get_USB_Status>
 80081f2:	4603      	mov	r3, r0
 80081f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd90      	pop	{r4, r7, pc}

08008200 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008212:	78fa      	ldrb	r2, [r7, #3]
 8008214:	4611      	mov	r1, r2
 8008216:	4618      	mov	r0, r3
 8008218:	f7f9 fe90 	bl	8001f3c <HAL_HCD_HC_GetURBState>
 800821c:	4603      	mov	r3, r0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	460b      	mov	r3, r1
 8008230:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008238:	2b01      	cmp	r3, #1
 800823a:	d103      	bne.n	8008244 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f868 	bl	8008314 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008244:	20c8      	movs	r0, #200	; 0xc8
 8008246:	f7f8 ffbf 	bl	80011c8 <HAL_Delay>
  return USBH_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
 8008260:	4613      	mov	r3, r2
 8008262:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800826a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800826c:	78fa      	ldrb	r2, [r7, #3]
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	440b      	add	r3, r1
 800827a:	333b      	adds	r3, #59	; 0x3b
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00a      	beq.n	8008298 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008282:	78fa      	ldrb	r2, [r7, #3]
 8008284:	68f9      	ldr	r1, [r7, #12]
 8008286:	4613      	mov	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	440b      	add	r3, r1
 8008290:	3350      	adds	r3, #80	; 0x50
 8008292:	78ba      	ldrb	r2, [r7, #2]
 8008294:	701a      	strb	r2, [r3, #0]
 8008296:	e009      	b.n	80082ac <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008298:	78fa      	ldrb	r2, [r7, #3]
 800829a:	68f9      	ldr	r1, [r7, #12]
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	440b      	add	r3, r1
 80082a6:	3351      	adds	r3, #81	; 0x51
 80082a8:	78ba      	ldrb	r2, [r7, #2]
 80082aa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
	...

080082bc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082ca:	79fb      	ldrb	r3, [r7, #7]
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d817      	bhi.n	8008300 <USBH_Get_USB_Status+0x44>
 80082d0:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <USBH_Get_USB_Status+0x1c>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	080082e9 	.word	0x080082e9
 80082dc:	080082ef 	.word	0x080082ef
 80082e0:	080082f5 	.word	0x080082f5
 80082e4:	080082fb 	.word	0x080082fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]
    break;
 80082ec:	e00b      	b.n	8008306 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80082ee:	2302      	movs	r3, #2
 80082f0:	73fb      	strb	r3, [r7, #15]
    break;
 80082f2:	e008      	b.n	8008306 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80082f4:	2301      	movs	r3, #1
 80082f6:	73fb      	strb	r3, [r7, #15]
    break;
 80082f8:	e005      	b.n	8008306 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80082fa:	2302      	movs	r3, #2
 80082fc:	73fb      	strb	r3, [r7, #15]
    break;
 80082fe:	e002      	b.n	8008306 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008300:	2302      	movs	r3, #2
 8008302:	73fb      	strb	r3, [r7, #15]
    break;
 8008304:	bf00      	nop
  }
  return usb_status;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d102      	bne.n	800832e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008328:	2301      	movs	r3, #1
 800832a:	73fb      	strb	r3, [r7, #15]
 800832c:	e001      	b.n	8008332 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800832e:	2300      	movs	r3, #0
 8008330:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	461a      	mov	r2, r3
 8008336:	2101      	movs	r1, #1
 8008338:	4803      	ldr	r0, [pc, #12]	; (8008348 <MX_DriverVbusFS+0x34>)
 800833a:	f7f9 fa13 	bl	8001764 <HAL_GPIO_WritePin>
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	40020800 	.word	0x40020800

0800834c <__errno>:
 800834c:	4b01      	ldr	r3, [pc, #4]	; (8008354 <__errno+0x8>)
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	2000002c 	.word	0x2000002c

08008358 <__libc_init_array>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	4e0d      	ldr	r6, [pc, #52]	; (8008390 <__libc_init_array+0x38>)
 800835c:	4c0d      	ldr	r4, [pc, #52]	; (8008394 <__libc_init_array+0x3c>)
 800835e:	1ba4      	subs	r4, r4, r6
 8008360:	10a4      	asrs	r4, r4, #2
 8008362:	2500      	movs	r5, #0
 8008364:	42a5      	cmp	r5, r4
 8008366:	d109      	bne.n	800837c <__libc_init_array+0x24>
 8008368:	4e0b      	ldr	r6, [pc, #44]	; (8008398 <__libc_init_array+0x40>)
 800836a:	4c0c      	ldr	r4, [pc, #48]	; (800839c <__libc_init_array+0x44>)
 800836c:	f000 f8ea 	bl	8008544 <_init>
 8008370:	1ba4      	subs	r4, r4, r6
 8008372:	10a4      	asrs	r4, r4, #2
 8008374:	2500      	movs	r5, #0
 8008376:	42a5      	cmp	r5, r4
 8008378:	d105      	bne.n	8008386 <__libc_init_array+0x2e>
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008380:	4798      	blx	r3
 8008382:	3501      	adds	r5, #1
 8008384:	e7ee      	b.n	8008364 <__libc_init_array+0xc>
 8008386:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800838a:	4798      	blx	r3
 800838c:	3501      	adds	r5, #1
 800838e:	e7f2      	b.n	8008376 <__libc_init_array+0x1e>
 8008390:	08008580 	.word	0x08008580
 8008394:	08008580 	.word	0x08008580
 8008398:	08008580 	.word	0x08008580
 800839c:	08008584 	.word	0x08008584

080083a0 <malloc>:
 80083a0:	4b02      	ldr	r3, [pc, #8]	; (80083ac <malloc+0xc>)
 80083a2:	4601      	mov	r1, r0
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	f000 b861 	b.w	800846c <_malloc_r>
 80083aa:	bf00      	nop
 80083ac:	2000002c 	.word	0x2000002c

080083b0 <free>:
 80083b0:	4b02      	ldr	r3, [pc, #8]	; (80083bc <free+0xc>)
 80083b2:	4601      	mov	r1, r0
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	f000 b80b 	b.w	80083d0 <_free_r>
 80083ba:	bf00      	nop
 80083bc:	2000002c 	.word	0x2000002c

080083c0 <memset>:
 80083c0:	4402      	add	r2, r0
 80083c2:	4603      	mov	r3, r0
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d100      	bne.n	80083ca <memset+0xa>
 80083c8:	4770      	bx	lr
 80083ca:	f803 1b01 	strb.w	r1, [r3], #1
 80083ce:	e7f9      	b.n	80083c4 <memset+0x4>

080083d0 <_free_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4605      	mov	r5, r0
 80083d4:	2900      	cmp	r1, #0
 80083d6:	d045      	beq.n	8008464 <_free_r+0x94>
 80083d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083dc:	1f0c      	subs	r4, r1, #4
 80083de:	2b00      	cmp	r3, #0
 80083e0:	bfb8      	it	lt
 80083e2:	18e4      	addlt	r4, r4, r3
 80083e4:	f000 f8ac 	bl	8008540 <__malloc_lock>
 80083e8:	4a1f      	ldr	r2, [pc, #124]	; (8008468 <_free_r+0x98>)
 80083ea:	6813      	ldr	r3, [r2, #0]
 80083ec:	4610      	mov	r0, r2
 80083ee:	b933      	cbnz	r3, 80083fe <_free_r+0x2e>
 80083f0:	6063      	str	r3, [r4, #4]
 80083f2:	6014      	str	r4, [r2, #0]
 80083f4:	4628      	mov	r0, r5
 80083f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083fa:	f000 b8a2 	b.w	8008542 <__malloc_unlock>
 80083fe:	42a3      	cmp	r3, r4
 8008400:	d90c      	bls.n	800841c <_free_r+0x4c>
 8008402:	6821      	ldr	r1, [r4, #0]
 8008404:	1862      	adds	r2, r4, r1
 8008406:	4293      	cmp	r3, r2
 8008408:	bf04      	itt	eq
 800840a:	681a      	ldreq	r2, [r3, #0]
 800840c:	685b      	ldreq	r3, [r3, #4]
 800840e:	6063      	str	r3, [r4, #4]
 8008410:	bf04      	itt	eq
 8008412:	1852      	addeq	r2, r2, r1
 8008414:	6022      	streq	r2, [r4, #0]
 8008416:	6004      	str	r4, [r0, #0]
 8008418:	e7ec      	b.n	80083f4 <_free_r+0x24>
 800841a:	4613      	mov	r3, r2
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	b10a      	cbz	r2, 8008424 <_free_r+0x54>
 8008420:	42a2      	cmp	r2, r4
 8008422:	d9fa      	bls.n	800841a <_free_r+0x4a>
 8008424:	6819      	ldr	r1, [r3, #0]
 8008426:	1858      	adds	r0, r3, r1
 8008428:	42a0      	cmp	r0, r4
 800842a:	d10b      	bne.n	8008444 <_free_r+0x74>
 800842c:	6820      	ldr	r0, [r4, #0]
 800842e:	4401      	add	r1, r0
 8008430:	1858      	adds	r0, r3, r1
 8008432:	4282      	cmp	r2, r0
 8008434:	6019      	str	r1, [r3, #0]
 8008436:	d1dd      	bne.n	80083f4 <_free_r+0x24>
 8008438:	6810      	ldr	r0, [r2, #0]
 800843a:	6852      	ldr	r2, [r2, #4]
 800843c:	605a      	str	r2, [r3, #4]
 800843e:	4401      	add	r1, r0
 8008440:	6019      	str	r1, [r3, #0]
 8008442:	e7d7      	b.n	80083f4 <_free_r+0x24>
 8008444:	d902      	bls.n	800844c <_free_r+0x7c>
 8008446:	230c      	movs	r3, #12
 8008448:	602b      	str	r3, [r5, #0]
 800844a:	e7d3      	b.n	80083f4 <_free_r+0x24>
 800844c:	6820      	ldr	r0, [r4, #0]
 800844e:	1821      	adds	r1, r4, r0
 8008450:	428a      	cmp	r2, r1
 8008452:	bf04      	itt	eq
 8008454:	6811      	ldreq	r1, [r2, #0]
 8008456:	6852      	ldreq	r2, [r2, #4]
 8008458:	6062      	str	r2, [r4, #4]
 800845a:	bf04      	itt	eq
 800845c:	1809      	addeq	r1, r1, r0
 800845e:	6021      	streq	r1, [r4, #0]
 8008460:	605c      	str	r4, [r3, #4]
 8008462:	e7c7      	b.n	80083f4 <_free_r+0x24>
 8008464:	bd38      	pop	{r3, r4, r5, pc}
 8008466:	bf00      	nop
 8008468:	200000c0 	.word	0x200000c0

0800846c <_malloc_r>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	1ccd      	adds	r5, r1, #3
 8008470:	f025 0503 	bic.w	r5, r5, #3
 8008474:	3508      	adds	r5, #8
 8008476:	2d0c      	cmp	r5, #12
 8008478:	bf38      	it	cc
 800847a:	250c      	movcc	r5, #12
 800847c:	2d00      	cmp	r5, #0
 800847e:	4606      	mov	r6, r0
 8008480:	db01      	blt.n	8008486 <_malloc_r+0x1a>
 8008482:	42a9      	cmp	r1, r5
 8008484:	d903      	bls.n	800848e <_malloc_r+0x22>
 8008486:	230c      	movs	r3, #12
 8008488:	6033      	str	r3, [r6, #0]
 800848a:	2000      	movs	r0, #0
 800848c:	bd70      	pop	{r4, r5, r6, pc}
 800848e:	f000 f857 	bl	8008540 <__malloc_lock>
 8008492:	4a21      	ldr	r2, [pc, #132]	; (8008518 <_malloc_r+0xac>)
 8008494:	6814      	ldr	r4, [r2, #0]
 8008496:	4621      	mov	r1, r4
 8008498:	b991      	cbnz	r1, 80084c0 <_malloc_r+0x54>
 800849a:	4c20      	ldr	r4, [pc, #128]	; (800851c <_malloc_r+0xb0>)
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	b91b      	cbnz	r3, 80084a8 <_malloc_r+0x3c>
 80084a0:	4630      	mov	r0, r6
 80084a2:	f000 f83d 	bl	8008520 <_sbrk_r>
 80084a6:	6020      	str	r0, [r4, #0]
 80084a8:	4629      	mov	r1, r5
 80084aa:	4630      	mov	r0, r6
 80084ac:	f000 f838 	bl	8008520 <_sbrk_r>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d124      	bne.n	80084fe <_malloc_r+0x92>
 80084b4:	230c      	movs	r3, #12
 80084b6:	6033      	str	r3, [r6, #0]
 80084b8:	4630      	mov	r0, r6
 80084ba:	f000 f842 	bl	8008542 <__malloc_unlock>
 80084be:	e7e4      	b.n	800848a <_malloc_r+0x1e>
 80084c0:	680b      	ldr	r3, [r1, #0]
 80084c2:	1b5b      	subs	r3, r3, r5
 80084c4:	d418      	bmi.n	80084f8 <_malloc_r+0x8c>
 80084c6:	2b0b      	cmp	r3, #11
 80084c8:	d90f      	bls.n	80084ea <_malloc_r+0x7e>
 80084ca:	600b      	str	r3, [r1, #0]
 80084cc:	50cd      	str	r5, [r1, r3]
 80084ce:	18cc      	adds	r4, r1, r3
 80084d0:	4630      	mov	r0, r6
 80084d2:	f000 f836 	bl	8008542 <__malloc_unlock>
 80084d6:	f104 000b 	add.w	r0, r4, #11
 80084da:	1d23      	adds	r3, r4, #4
 80084dc:	f020 0007 	bic.w	r0, r0, #7
 80084e0:	1ac3      	subs	r3, r0, r3
 80084e2:	d0d3      	beq.n	800848c <_malloc_r+0x20>
 80084e4:	425a      	negs	r2, r3
 80084e6:	50e2      	str	r2, [r4, r3]
 80084e8:	e7d0      	b.n	800848c <_malloc_r+0x20>
 80084ea:	428c      	cmp	r4, r1
 80084ec:	684b      	ldr	r3, [r1, #4]
 80084ee:	bf16      	itet	ne
 80084f0:	6063      	strne	r3, [r4, #4]
 80084f2:	6013      	streq	r3, [r2, #0]
 80084f4:	460c      	movne	r4, r1
 80084f6:	e7eb      	b.n	80084d0 <_malloc_r+0x64>
 80084f8:	460c      	mov	r4, r1
 80084fa:	6849      	ldr	r1, [r1, #4]
 80084fc:	e7cc      	b.n	8008498 <_malloc_r+0x2c>
 80084fe:	1cc4      	adds	r4, r0, #3
 8008500:	f024 0403 	bic.w	r4, r4, #3
 8008504:	42a0      	cmp	r0, r4
 8008506:	d005      	beq.n	8008514 <_malloc_r+0xa8>
 8008508:	1a21      	subs	r1, r4, r0
 800850a:	4630      	mov	r0, r6
 800850c:	f000 f808 	bl	8008520 <_sbrk_r>
 8008510:	3001      	adds	r0, #1
 8008512:	d0cf      	beq.n	80084b4 <_malloc_r+0x48>
 8008514:	6025      	str	r5, [r4, #0]
 8008516:	e7db      	b.n	80084d0 <_malloc_r+0x64>
 8008518:	200000c0 	.word	0x200000c0
 800851c:	200000c4 	.word	0x200000c4

08008520 <_sbrk_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4c06      	ldr	r4, [pc, #24]	; (800853c <_sbrk_r+0x1c>)
 8008524:	2300      	movs	r3, #0
 8008526:	4605      	mov	r5, r0
 8008528:	4608      	mov	r0, r1
 800852a:	6023      	str	r3, [r4, #0]
 800852c:	f7f8 fd64 	bl	8000ff8 <_sbrk>
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d102      	bne.n	800853a <_sbrk_r+0x1a>
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	b103      	cbz	r3, 800853a <_sbrk_r+0x1a>
 8008538:	602b      	str	r3, [r5, #0]
 800853a:	bd38      	pop	{r3, r4, r5, pc}
 800853c:	2000091c 	.word	0x2000091c

08008540 <__malloc_lock>:
 8008540:	4770      	bx	lr

08008542 <__malloc_unlock>:
 8008542:	4770      	bx	lr

08008544 <_init>:
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008546:	bf00      	nop
 8008548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854a:	bc08      	pop	{r3}
 800854c:	469e      	mov	lr, r3
 800854e:	4770      	bx	lr

08008550 <_fini>:
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008552:	bf00      	nop
 8008554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008556:	bc08      	pop	{r3}
 8008558:	469e      	mov	lr, r3
 800855a:	4770      	bx	lr
