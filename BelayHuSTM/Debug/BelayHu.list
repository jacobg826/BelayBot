
BelayHu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008658  08008658  00018658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008674  08008674  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008674  08008674  00018674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800867c  0800867c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800867c  0800867c  0001867c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  20000090  08008714  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  08008714  00020920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa6f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ec4  00000000  00000000  0003fb2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001858  00000000  00000000  000439f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016b8  00000000  00000000  00045250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025ae3  00000000  00000000  00046908  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015aaf  00000000  00000000  0006c3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4f16  00000000  00000000  00081e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156db0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068c4  00000000  00000000  00156e2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008640 	.word	0x08008640

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008640 	.word	0x08008640

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <get_elapsed_time>:
 * 	params:
 * 			t:			handle to timer
 *
 * 	return:	amount of elapsed time, in ms, since the last call to this function.
 */
uint16_t get_elapsed_time(TIM_HandleTypeDef* t) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	uint16_t new_value = __HAL_TIM_GET_COUNTER(t);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d6:	81fb      	strh	r3, [r7, #14]
	uint16_t elapsed_time = (new_value - timer_val);
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <get_elapsed_time+0x30>)
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	89fa      	ldrh	r2, [r7, #14]
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	81bb      	strh	r3, [r7, #12]
	timer_val = new_value;
 80004e2:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <get_elapsed_time+0x30>)
 80004e4:	89fb      	ldrh	r3, [r7, #14]
 80004e6:	8013      	strh	r3, [r2, #0]
	return elapsed_time;
 80004e8:	89bb      	ldrh	r3, [r7, #12]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	200000b2 	.word	0x200000b2

080004fc <write_reg>:
 *
 * 			num:bytes:	number of bytes to send to the device
 *
 * 	return:	none
 */
void write_reg(SPI_HandleTypeDef* h, char* data, int num_bytes) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2108      	movs	r1, #8
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <write_reg+0x38>)
 800050e:	f001 f9a7 	bl	8001860 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(h, (unsigned char*)data, num_bytes, 100);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	b29a      	uxth	r2, r3
 8000516:	2364      	movs	r3, #100	; 0x64
 8000518:	68b9      	ldr	r1, [r7, #8]
 800051a:	68f8      	ldr	r0, [r7, #12]
 800051c:	f004 fa6a 	bl	80049f4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	2108      	movs	r1, #8
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <write_reg+0x38>)
 8000526:	f001 f99b 	bl	8001860 <HAL_GPIO_WritePin>
}
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000

08000538 <read_reg>:
 * 						subsequent bytes are read from the next sequential address after
 * 						reg_addr
 *
 * 	return: none
 */
void read_reg(SPI_HandleTypeDef* h, int reg_addr, char* store_data, int num_bytes) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	603b      	str	r3, [r7, #0]
	char data = READ | reg_addr;
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	b25b      	sxtb	r3, r3
 800054a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800054e:	b25b      	sxtb	r3, r3
 8000550:	b2db      	uxtb	r3, r3
 8000552:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2108      	movs	r1, #8
 8000558:	480c      	ldr	r0, [pc, #48]	; (800058c <read_reg+0x54>)
 800055a:	f001 f981 	bl	8001860 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(h, (unsigned char*)&data, REG_SIZE, 100);
 800055e:	f107 0117 	add.w	r1, r7, #23
 8000562:	2364      	movs	r3, #100	; 0x64
 8000564:	2201      	movs	r2, #1
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	f004 fa44 	bl	80049f4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(h, (unsigned char*)store_data, num_bytes, 100);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	b29a      	uxth	r2, r3
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	68f8      	ldr	r0, [r7, #12]
 8000576:	f004 fb71 	bl	8004c5c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2108      	movs	r1, #8
 800057e:	4803      	ldr	r0, [pc, #12]	; (800058c <read_reg+0x54>)
 8000580:	f001 f96e 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000584:	bf00      	nop
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <accel_setup>:
 * 			h:			spi handle to send data over
 *
 *
 * 	return: none
 */
void accel_setup(SPI_HandleTypeDef* h, TIM_HandleTypeDef* t) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]

	timer_val = __HAL_TIM_GET_COUNTER(t);
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <accel_setup+0x70>)
 80005a4:	801a      	strh	r2, [r3, #0]

	char data[2];
	data[0] = CONTROL_REG_4;
 80005a6:	2320      	movs	r3, #32
 80005a8:	753b      	strb	r3, [r7, #20]
	data[1] = START_UP_SEQ;
 80005aa:	2367      	movs	r3, #103	; 0x67
 80005ac:	757b      	strb	r3, [r7, #21]
	write_reg(h, data, sizeof(data));
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2202      	movs	r2, #2
 80005b4:	4619      	mov	r1, r3
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f7ff ffa0 	bl	80004fc <write_reg>

	//	calibrate the offset field of the accelerometer
	struct accel_data calibration_data;
	read_accel_data(h, &calibration_data);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f000 f824 	bl	8000610 <read_accel_data>

	x_offset = -1*calibration_data.x_data;
 80005c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	425b      	negs	r3, r3
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	b21a      	sxth	r2, r3
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <accel_setup+0x74>)
 80005d6:	801a      	strh	r2, [r3, #0]
	y_offset = -1*calibration_data.y_data;
 80005d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	425b      	negs	r3, r3
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <accel_setup+0x78>)
 80005e6:	801a      	strh	r2, [r3, #0]
	z_offset = -1*calibration_data.z_data;
 80005e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	425b      	negs	r3, r3
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	b21a      	sxth	r2, r3
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <accel_setup+0x7c>)
 80005f6:	801a      	strh	r2, [r3, #0]
}
 80005f8:	bf00      	nop
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000b2 	.word	0x200000b2
 8000604:	200000ac 	.word	0x200000ac
 8000608:	200000ae 	.word	0x200000ae
 800060c:	200000b0 	.word	0x200000b0

08000610 <read_accel_data>:
 * 			data	pointer to a accel_data struct. Reads data from the X,Y, and Z registers
 * 					into the struct
 *
 * return:	none
 */
void read_accel_data(SPI_HandleTypeDef* h, struct accel_data* data) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
	char data_ready = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	73fb      	strb	r3, [r7, #15]
	read_reg(h, STATUS_REG, &data_ready, sizeof(data_ready));
 800061e:	f107 020f 	add.w	r2, r7, #15
 8000622:	2301      	movs	r3, #1
 8000624:	2127      	movs	r1, #39	; 0x27
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f7ff ff86 	bl	8000538 <read_reg>
	while (!(data_ready & NEW_DATA_MASK)) {
 800062c:	e006      	b.n	800063c <read_accel_data+0x2c>
		read_reg(h, STATUS_REG, &data_ready, sizeof(data_ready));
 800062e:	f107 020f 	add.w	r2, r7, #15
 8000632:	2301      	movs	r3, #1
 8000634:	2127      	movs	r1, #39	; 0x27
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f7ff ff7e 	bl	8000538 <read_reg>
	while (!(data_ready & NEW_DATA_MASK)) {
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	f003 0308 	and.w	r3, r3, #8
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f3      	beq.n	800062e <read_accel_data+0x1e>
	}
	// STM is little endian, so LOW_ADDR bit needs to be at the lower memory address,
	// which this setup does
	read_reg(h, X_LOW_ADDR, (char*)&data->x_data, sizeof(struct accel_data));
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	2306      	movs	r3, #6
 800064a:	2128      	movs	r1, #40	; 0x28
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ff73 	bl	8000538 <read_reg>
	data->x_data += x_offset;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000658:	b29a      	uxth	r2, r3
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <read_accel_data+0x98>)
 800065c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000660:	b29b      	uxth	r3, r3
 8000662:	4413      	add	r3, r2
 8000664:	b29b      	uxth	r3, r3
 8000666:	b21a      	sxth	r2, r3
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	801a      	strh	r2, [r3, #0]
	data->y_data += y_offset;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000672:	b29a      	uxth	r2, r3
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <read_accel_data+0x9c>)
 8000676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800067a:	b29b      	uxth	r3, r3
 800067c:	4413      	add	r3, r2
 800067e:	b29b      	uxth	r3, r3
 8000680:	b21a      	sxth	r2, r3
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	805a      	strh	r2, [r3, #2]
	data->z_data += z_offset;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800068c:	b29a      	uxth	r2, r3
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <read_accel_data+0xa0>)
 8000690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000694:	b29b      	uxth	r3, r3
 8000696:	4413      	add	r3, r2
 8000698:	b29b      	uxth	r3, r3
 800069a:	b21a      	sxth	r2, r3
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	809a      	strh	r2, [r3, #4]
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200000ac 	.word	0x200000ac
 80006ac:	200000ae 	.word	0x200000ae
 80006b0:	200000b0 	.word	0x200000b0

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08c      	sub	sp, #48	; 0x30
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fd79 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f891 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 fa29 	bl	8000b18 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006c6:	f000 f90f 	bl	80008e8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80006ca:	f000 f93b 	bl	8000944 <MX_I2S3_Init>
  MX_SPI1_Init();
 80006ce:	f000 f969 	bl	80009a4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80006d2:	f007 fc05 	bl	8007ee0 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80006d6:	f000 f9f5 	bl	8000ac4 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 80006da:	f000 f9cf 	bl	8000a7c <MX_TIM14_Init>
  MX_TIM6_Init();
 80006de:	f000 f997 	bl	8000a10 <MX_TIM6_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_TIM_Base_Start(&htim14);
 80006e2:	483a      	ldr	r0, [pc, #232]	; (80007cc <main+0x118>)
 80006e4:	f004 fea1 	bl	800542a <HAL_TIM_Base_Start>
	  HAL_TIM_Base_Start(&htim6);
 80006e8:	4839      	ldr	r0, [pc, #228]	; (80007d0 <main+0x11c>)
 80006ea:	f004 fe9e 	bl	800542a <HAL_TIM_Base_Start>

	  struct accel_data data, data2;
  	  accel_setup(&hspi1, &htim6);
 80006ee:	4938      	ldr	r1, [pc, #224]	; (80007d0 <main+0x11c>)
 80006f0:	4838      	ldr	r0, [pc, #224]	; (80007d4 <main+0x120>)
 80006f2:	f7ff ff4d 	bl	8000590 <accel_setup>

  	  //setup_MPU(&hi2c1);

  	  uint16_t timeStart;
	  uint16_t currTime = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  int notSent = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28


	  struct packet data_packet;
	  data_packet.header[0] = 0x01;
 80006fe:	2301      	movs	r3, #1
 8000700:	743b      	strb	r3, [r7, #16]
	  data_packet.header[1] = 0x02;
 8000702:	2302      	movs	r3, #2
 8000704:	747b      	strb	r3, [r7, #17]

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070c:	4832      	ldr	r0, [pc, #200]	; (80007d8 <main+0x124>)
 800070e:	f001 f8a7 	bl	8001860 <HAL_GPIO_WritePin>
	  while (1) {
		  	  read_accel_data(&hspi1, &data);
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	4619      	mov	r1, r3
 8000718:	482e      	ldr	r0, [pc, #184]	; (80007d4 <main+0x120>)
 800071a:	f7ff ff79 	bl	8000610 <read_accel_data>
		  	  //read_data_i2c(&hi2c1, &data2);


		  	  data_packet.accel_data = (int16_t) data.y_data;
 800071e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000722:	b29b      	uxth	r3, r3
 8000724:	827b      	strh	r3, [r7, #18]
		  	  data_packet.time_stamp = get_elapsed_time(&htim6);
 8000726:	482a      	ldr	r0, [pc, #168]	; (80007d0 <main+0x11c>)
 8000728:	f7ff fece 	bl	80004c8 <get_elapsed_time>
 800072c:	4603      	mov	r3, r0
 800072e:	82bb      	strh	r3, [r7, #20]

		  	  //char buffer[sizeof(data_packet)]; // Create a char buffer of right size

		  	  //memcpy(buffer, &data_packet, sizeof(data_packet)); // Copy and convert the data
		  	  HAL_UART_Transmit(&huart2, (uint8_t *)&data_packet, sizeof(data_packet), 50);
 8000730:	f107 0110 	add.w	r1, r7, #16
 8000734:	2332      	movs	r3, #50	; 0x32
 8000736:	2206      	movs	r2, #6
 8000738:	4828      	ldr	r0, [pc, #160]	; (80007dc <main+0x128>)
 800073a:	f005 f804 	bl	8005746 <HAL_UART_Transmit>
		  	  //HAL_UART_Transmit(&huart2, (uint8_t*)&data_packet, sizeof(data_packet), 50);

		  	 //HAL_Delay(10);

		 	 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) { // if button is pressed set time elapsed
 800073e:	2101      	movs	r1, #1
 8000740:	4827      	ldr	r0, [pc, #156]	; (80007e0 <main+0x12c>)
 8000742:	f001 f875 	bl	8001830 <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b01      	cmp	r3, #1
 800074a:	d107      	bne.n	800075c <main+0xa8>
		 		currTime = __HAL_TIM_GET_COUNTER(&htim14) - timeStart;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <main+0x118>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	b29a      	uxth	r2, r3
 8000754:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800075a:	e00d      	b.n	8000778 <main+0xc4>
		 	 }else{
		 		 timeStart = __HAL_TIM_GET_COUNTER(&htim14); // reset start time
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <main+0x118>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	85fb      	strh	r3, [r7, #46]	; 0x2e
		 		 currTime = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	85bb      	strh	r3, [r7, #44]	; 0x2c
		 		 notSent = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
		 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // turn off light
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000772:	4819      	ldr	r0, [pc, #100]	; (80007d8 <main+0x124>)
 8000774:	f001 f874 	bl	8001860 <HAL_GPIO_WritePin>
		 	 }
		 	 if (currTime > 20000 && notSent) {
 8000778:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800077a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800077e:	4293      	cmp	r3, r2
 8000780:	d9c7      	bls.n	8000712 <main+0x5e>
 8000782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000784:	2b00      	cmp	r3, #0
 8000786:	d0c4      	beq.n	8000712 <main+0x5e>
		 		 notSent = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
		 		 struct packet button_packet;
		 		 button_packet.header[0] = 0x01;
 800078c:	2301      	movs	r3, #1
 800078e:	723b      	strb	r3, [r7, #8]
		 		 button_packet.header[1] = 0x01;
 8000790:	2301      	movs	r3, #1
 8000792:	727b      	strb	r3, [r7, #9]
		 		 button_packet.accel_data   = 0xFF;
 8000794:	23ff      	movs	r3, #255	; 0xff
 8000796:	817b      	strh	r3, [r7, #10]
		 		 button_packet.time_stamp = 10;
 8000798:	230a      	movs	r3, #10
 800079a:	81bb      	strh	r3, [r7, #12]
		 		 char button_buffer [sizeof(button_packet)];                            // Create a char buffer of right size
		 		 memcpy(button_buffer, &button_packet, sizeof(button_packet));          // Copy and convert the data
 800079c:	463b      	mov	r3, r7
 800079e:	f107 0208 	add.w	r2, r7, #8
 80007a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a6:	6018      	str	r0, [r3, #0]
 80007a8:	3304      	adds	r3, #4
 80007aa:	8019      	strh	r1, [r3, #0]
		  	  	 HAL_UART_Transmit(&huart2, (uint8_t *)button_buffer, sizeof(button_buffer), 50);
 80007ac:	4639      	mov	r1, r7
 80007ae:	2332      	movs	r3, #50	; 0x32
 80007b0:	2206      	movs	r2, #6
 80007b2:	480a      	ldr	r0, [pc, #40]	; (80007dc <main+0x128>)
 80007b4:	f004 ffc7 	bl	8005746 <HAL_UART_Transmit>
		 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <main+0x124>)
 80007c0:	f001 f84e 	bl	8001860 <HAL_GPIO_WritePin>
		 		 HAL_Delay(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f000 fd65 	bl	8001294 <HAL_Delay>
		  	  read_accel_data(&hspi1, &data);
 80007ca:	e7a2      	b.n	8000712 <main+0x5e>
 80007cc:	200001f4 	.word	0x200001f4
 80007d0:	2000011c 	.word	0x2000011c
 80007d4:	2000015c 	.word	0x2000015c
 80007d8:	40020c00 	.word	0x40020c00
 80007dc:	200001b4 	.word	0x200001b4
 80007e0:	40020000 	.word	0x40020000

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b098      	sub	sp, #96	; 0x60
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ee:	2230      	movs	r2, #48	; 0x30
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f007 fe62 	bl	80084bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <SystemClock_Config+0xfc>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a30      	ldr	r2, [pc, #192]	; (80008e0 <SystemClock_Config+0xfc>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <SystemClock_Config+0xfc>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <SystemClock_Config+0x100>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a2a      	ldr	r2, [pc, #168]	; (80008e4 <SystemClock_Config+0x100>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <SystemClock_Config+0x100>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084e:	2301      	movs	r3, #1
 8000850:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000858:	2302      	movs	r3, #2
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000860:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000862:	2308      	movs	r3, #8
 8000864:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000866:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800086a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000870:	2307      	movs	r3, #7
 8000872:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000878:	4618      	mov	r0, r3
 800087a:	f003 fab7 	bl	8003dec <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000884:	f000 fa46 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000894:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	2105      	movs	r1, #5
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fd10 	bl	80042cc <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008b2:	f000 fa2f 	bl	8000d14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008b6:	2301      	movs	r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008ba:	23c0      	movs	r3, #192	; 0xc0
 80008bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 fef2 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80008d2:	f000 fa1f 	bl	8000d14 <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3760      	adds	r7, #96	; 0x60
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40007000 	.word	0x40007000

080008e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_I2C1_Init+0x50>)
 80008ee:	4a13      	ldr	r2, [pc, #76]	; (800093c <MX_I2C1_Init+0x54>)
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_I2C1_Init+0x50>)
 80008f4:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_I2C1_Init+0x58>)
 80008f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_I2C1_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_I2C1_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_I2C1_Init+0x50>)
 8000906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800090a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_I2C1_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_I2C1_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_I2C1_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_I2C1_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_I2C1_Init+0x50>)
 8000926:	f002 fc89 	bl	800323c <HAL_I2C_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000930:	f000 f9f0 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000c8 	.word	0x200000c8
 800093c:	40005400 	.word	0x40005400
 8000940:	000186a0 	.word	0x000186a0

08000944 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_I2S3_Init+0x54>)
 800094a:	4a14      	ldr	r2, [pc, #80]	; (800099c <MX_I2S3_Init+0x58>)
 800094c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_I2S3_Init+0x54>)
 8000950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000954:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_I2S3_Init+0x54>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_I2S3_Init+0x54>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <MX_I2S3_Init+0x54>)
 8000964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000968:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_I2S3_Init+0x54>)
 800096c:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <MX_I2S3_Init+0x5c>)
 800096e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_I2S3_Init+0x54>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_I2S3_Init+0x54>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_I2S3_Init+0x54>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_I2S3_Init+0x54>)
 8000984:	f002 fd92 	bl	80034ac <HAL_I2S_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800098e:	f000 f9c1 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000234 	.word	0x20000234
 800099c:	40003c00 	.word	0x40003c00
 80009a0:	00017700 	.word	0x00017700

080009a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_SPI1_Init+0x64>)
 80009aa:	4a18      	ldr	r2, [pc, #96]	; (8000a0c <MX_SPI1_Init+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_SPI1_Init+0x64>)
 80009b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_SPI1_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_SPI1_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_SPI1_Init+0x64>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_SPI1_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_SPI1_Init+0x64>)
 80009d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_SPI1_Init+0x64>)
 80009d8:	2230      	movs	r2, #48	; 0x30
 80009da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_SPI1_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_SPI1_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <MX_SPI1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_SPI1_Init+0x64>)
 80009f0:	220a      	movs	r2, #10
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_SPI1_Init+0x64>)
 80009f6:	f003 ff99 	bl	800492c <HAL_SPI_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a00:	f000 f988 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000015c 	.word	0x2000015c
 8000a0c:	40013000 	.word	0x40013000

08000a10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_TIM6_Init+0x64>)
 8000a20:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <MX_TIM6_Init+0x68>)
 8000a22:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_TIM6_Init+0x64>)
 8000a26:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000a2a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_TIM6_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_TIM6_Init+0x64>)
 8000a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a38:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_TIM6_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_TIM6_Init+0x64>)
 8000a42:	f004 fcc7 	bl	80053d4 <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a4c:	f000 f962 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_TIM6_Init+0x64>)
 8000a5e:	f004 fda9 	bl	80055b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a68:	f000 f954 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000011c 	.word	0x2000011c
 8000a78:	40001000 	.word	0x40001000

08000a7c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_TIM14_Init+0x40>)
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <MX_TIM14_Init+0x44>)
 8000a84:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <MX_TIM14_Init+0x40>)
 8000a88:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a8c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_TIM14_Init+0x40>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_TIM14_Init+0x40>)
 8000a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a9a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MX_TIM14_Init+0x40>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_TIM14_Init+0x40>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_TIM14_Init+0x40>)
 8000aaa:	f004 fc93 	bl	80053d4 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000ab4:	f000 f92e 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200001f4 	.word	0x200001f4
 8000ac0:	40002000 	.word	0x40002000

08000ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <MX_USART2_UART_Init+0x50>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000afc:	f004 fdd6 	bl	80056ac <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b06:	f000 f905 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200001b4 	.word	0x200001b4
 8000b14:	40004400 	.word	0x40004400

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	4b71      	ldr	r3, [pc, #452]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a70      	ldr	r2, [pc, #448]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000b38:	f043 0310 	orr.w	r3, r3, #16
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b6e      	ldr	r3, [pc, #440]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0310 	and.w	r3, r3, #16
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	4b6a      	ldr	r3, [pc, #424]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a69      	ldr	r2, [pc, #420]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b67      	ldr	r3, [pc, #412]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b63      	ldr	r3, [pc, #396]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a62      	ldr	r2, [pc, #392]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b60      	ldr	r3, [pc, #384]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b5c      	ldr	r3, [pc, #368]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a5b      	ldr	r2, [pc, #364]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b59      	ldr	r3, [pc, #356]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	4b55      	ldr	r3, [pc, #340]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a54      	ldr	r2, [pc, #336]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b52      	ldr	r3, [pc, #328]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b4e      	ldr	r3, [pc, #312]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a4d      	ldr	r2, [pc, #308]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b4b      	ldr	r3, [pc, #300]	; (8000cf8 <MX_GPIO_Init+0x1e0>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2108      	movs	r1, #8
 8000bda:	4848      	ldr	r0, [pc, #288]	; (8000cfc <MX_GPIO_Init+0x1e4>)
 8000bdc:	f000 fe40 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2101      	movs	r1, #1
 8000be4:	4846      	ldr	r0, [pc, #280]	; (8000d00 <MX_GPIO_Init+0x1e8>)
 8000be6:	f000 fe3b 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bea:	2200      	movs	r2, #0
 8000bec:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bf0:	4844      	ldr	r0, [pc, #272]	; (8000d04 <MX_GPIO_Init+0x1ec>)
 8000bf2:	f000 fe35 	bl	8001860 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000bf6:	2308      	movs	r3, #8
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	483b      	ldr	r0, [pc, #236]	; (8000cfc <MX_GPIO_Init+0x1e4>)
 8000c0e:	f000 fc75 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4835      	ldr	r0, [pc, #212]	; (8000d00 <MX_GPIO_Init+0x1e8>)
 8000c2a:	f000 fc67 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	482d      	ldr	r0, [pc, #180]	; (8000d00 <MX_GPIO_Init+0x1e8>)
 8000c4a:	f000 fc57 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c52:	4b2d      	ldr	r3, [pc, #180]	; (8000d08 <MX_GPIO_Init+0x1f0>)
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	482a      	ldr	r0, [pc, #168]	; (8000d0c <MX_GPIO_Init+0x1f4>)
 8000c62:	f000 fc4b 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c66:	2304      	movs	r3, #4
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4825      	ldr	r0, [pc, #148]	; (8000d10 <MX_GPIO_Init+0x1f8>)
 8000c7a:	f000 fc3f 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c90:	2305      	movs	r3, #5
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	481d      	ldr	r0, [pc, #116]	; (8000d10 <MX_GPIO_Init+0x1f8>)
 8000c9c:	f000 fc2e 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ca0:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ca4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4812      	ldr	r0, [pc, #72]	; (8000d04 <MX_GPIO_Init+0x1ec>)
 8000cba:	f000 fc1f 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <MX_GPIO_Init+0x1ec>)
 8000cd2:	f000 fc13 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_GPIO_Init+0x1f0>)
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_GPIO_Init+0x1e4>)
 8000cea:	f000 fc07 	bl	80014fc <HAL_GPIO_Init>

}
 8000cee:	bf00      	nop
 8000cf0:	3730      	adds	r7, #48	; 0x30
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40020800 	.word	0x40020800
 8000d04:	40020c00 	.word	0x40020c00
 8000d08:	10120000 	.word	0x10120000
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020400 	.word	0x40020400

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <Error_Handler+0x6>

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f000 fb8c 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <HAL_I2C_MspInit+0x84>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d12c      	bne.n	8000de8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000daa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db0:	2312      	movs	r3, #18
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480c      	ldr	r0, [pc, #48]	; (8000df8 <HAL_I2C_MspInit+0x8c>)
 8000dc8:	f000 fb98 	bl	80014fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dda:	6413      	str	r3, [r2, #64]	; 0x40
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40005400 	.word	0x40005400
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020400 	.word	0x40020400

08000dfc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a28      	ldr	r2, [pc, #160]	; (8000ebc <HAL_I2S_MspInit+0xc0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d14a      	bne.n	8000eb4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <HAL_I2S_MspInit+0xc4>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <HAL_I2S_MspInit+0xc4>)
 8000e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <HAL_I2S_MspInit+0xc4>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_I2S_MspInit+0xc4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <HAL_I2S_MspInit+0xc4>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_I2S_MspInit+0xc4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_I2S_MspInit+0xc4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <HAL_I2S_MspInit+0xc4>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_I2S_MspInit+0xc4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e72:	2310      	movs	r3, #16
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e82:	2306      	movs	r3, #6
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <HAL_I2S_MspInit+0xc8>)
 8000e8e:	f000 fb35 	bl	80014fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e92:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ea4:	2306      	movs	r3, #6
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <HAL_I2S_MspInit+0xcc>)
 8000eb0:	f000 fb24 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40003c00 	.word	0x40003c00
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020800 	.word	0x40020800

08000ecc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <HAL_SPI_MspInit+0x84>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d12b      	bne.n	8000f46 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <HAL_SPI_MspInit+0x88>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a17      	ldr	r2, [pc, #92]	; (8000f54 <HAL_SPI_MspInit+0x88>)
 8000ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_SPI_MspInit+0x88>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_SPI_MspInit+0x88>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <HAL_SPI_MspInit+0x88>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_SPI_MspInit+0x88>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f26:	23e0      	movs	r3, #224	; 0xe0
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f36:	2305      	movs	r3, #5
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <HAL_SPI_MspInit+0x8c>)
 8000f42:	f000 fadb 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3728      	adds	r7, #40	; 0x28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40013000 	.word	0x40013000
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020000 	.word	0x40020000

08000f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <HAL_TIM_Base_MspInit+0x64>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d10e      	bne.n	8000f8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_TIM_Base_MspInit+0x68>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <HAL_TIM_Base_MspInit+0x68>)
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_TIM_Base_MspInit+0x68>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f8a:	e012      	b.n	8000fb2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM14)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_TIM_Base_MspInit+0x6c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10d      	bne.n	8000fb2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_TIM_Base_MspInit+0x68>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <HAL_TIM_Base_MspInit+0x68>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <HAL_TIM_Base_MspInit+0x68>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40001000 	.word	0x40001000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40002000 	.word	0x40002000

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_UART_MspInit+0x84>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d12b      	bne.n	8001046 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_UART_MspInit+0x88>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <HAL_UART_MspInit+0x88>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_UART_MspInit+0x88>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_UART_MspInit+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <HAL_UART_MspInit+0x88>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_UART_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001026:	230c      	movs	r3, #12
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001036:	2307      	movs	r3, #7
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_UART_MspInit+0x8c>)
 8001042:	f000 fa5b 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40004400 	.word	0x40004400
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f8d4 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <OTG_FS_IRQHandler+0x10>)
 80010b6:	f000 fe7b 	bl	8001db0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000658 	.word	0x20000658

080010c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010cc:	4a14      	ldr	r2, [pc, #80]	; (8001120 <_sbrk+0x5c>)
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <_sbrk+0x60>)
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <_sbrk+0x64>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <_sbrk+0x68>)
 80010e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d207      	bcs.n	8001104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f4:	f007 f9a8 	bl	8008448 <__errno>
 80010f8:	4602      	mov	r2, r0
 80010fa:	230c      	movs	r3, #12
 80010fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	e009      	b.n	8001118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <_sbrk+0x64>)
 8001114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20020000 	.word	0x20020000
 8001124:	00000400 	.word	0x00000400
 8001128:	200000b4 	.word	0x200000b4
 800112c:	20000920 	.word	0x20000920

08001130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <SystemInit+0x28>)
 8001136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113a:	4a07      	ldr	r2, [pc, #28]	; (8001158 <SystemInit+0x28>)
 800113c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SystemInit+0x28>)
 8001146:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800114a:	609a      	str	r2, [r3, #8]
#endif
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001194 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001160:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001162:	e003      	b.n	800116c <LoopCopyDataInit>

08001164 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001166:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001168:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800116a:	3104      	adds	r1, #4

0800116c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001170:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001172:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001174:	d3f6      	bcc.n	8001164 <CopyDataInit>
  ldr  r2, =_sbss
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001178:	e002      	b.n	8001180 <LoopFillZerobss>

0800117a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800117a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800117c:	f842 3b04 	str.w	r3, [r2], #4

08001180 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001182:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001184:	d3f9      	bcc.n	800117a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001186:	f7ff ffd3 	bl	8001130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118a:	f007 f963 	bl	8008454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff fa91 	bl	80006b4 <main>
  bx  lr    
 8001192:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001194:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001198:	08008684 	.word	0x08008684
  ldr  r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011a0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80011a4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80011a8:	20000920 	.word	0x20000920

080011ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <HAL_Init+0x40>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_Init+0x40>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_Init+0x40>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f94d 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff fd9a 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023c00 	.word	0x40023c00

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f965 	bl	80014e2 <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f92d 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	20000008 	.word	0x20000008
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008
 8001278:	2000027c 	.word	0x2000027c

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	2000027c 	.word	0x2000027c

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_Delay+0x40>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000008 	.word	0x20000008

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <__NVIC_EnableIRQ+0x38>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff8e 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff29 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff3e 	bl	8001320 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff8e 	bl	80013cc <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5d 	bl	8001378 <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff31 	bl	800133c <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa2 	bl	8001434 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e16b      	b.n	80017f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	429a      	cmp	r2, r3
 8001532:	f040 815a 	bne.w	80017ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d00b      	beq.n	8001556 <HAL_GPIO_Init+0x5a>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d007      	beq.n	8001556 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800154a:	2b11      	cmp	r3, #17
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b12      	cmp	r3, #18
 8001554:	d130      	bne.n	80015b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	2203      	movs	r2, #3
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800158c:	2201      	movs	r2, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 0201 	and.w	r2, r3, #1
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0xfc>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b12      	cmp	r3, #18
 80015f6:	d123      	bne.n	8001640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	69b9      	ldr	r1, [r7, #24]
 800163c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0203 	and.w	r2, r3, #3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80b4 	beq.w	80017ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <HAL_GPIO_Init+0x308>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a5e      	ldr	r2, [pc, #376]	; (8001804 <HAL_GPIO_Init+0x308>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b5c      	ldr	r3, [pc, #368]	; (8001804 <HAL_GPIO_Init+0x308>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169e:	4a5a      	ldr	r2, [pc, #360]	; (8001808 <HAL_GPIO_Init+0x30c>)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a51      	ldr	r2, [pc, #324]	; (800180c <HAL_GPIO_Init+0x310>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d02b      	beq.n	8001722 <HAL_GPIO_Init+0x226>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a50      	ldr	r2, [pc, #320]	; (8001810 <HAL_GPIO_Init+0x314>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d025      	beq.n	800171e <HAL_GPIO_Init+0x222>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4f      	ldr	r2, [pc, #316]	; (8001814 <HAL_GPIO_Init+0x318>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01f      	beq.n	800171a <HAL_GPIO_Init+0x21e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4e      	ldr	r2, [pc, #312]	; (8001818 <HAL_GPIO_Init+0x31c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x21a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4d      	ldr	r2, [pc, #308]	; (800181c <HAL_GPIO_Init+0x320>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x216>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4c      	ldr	r2, [pc, #304]	; (8001820 <HAL_GPIO_Init+0x324>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x212>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4b      	ldr	r2, [pc, #300]	; (8001824 <HAL_GPIO_Init+0x328>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x20e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4a      	ldr	r2, [pc, #296]	; (8001828 <HAL_GPIO_Init+0x32c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x20a>
 8001702:	2307      	movs	r3, #7
 8001704:	e00e      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001706:	2308      	movs	r3, #8
 8001708:	e00c      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800170a:	2306      	movs	r3, #6
 800170c:	e00a      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800170e:	2305      	movs	r3, #5
 8001710:	e008      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001712:	2304      	movs	r3, #4
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001716:	2303      	movs	r3, #3
 8001718:	e004      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800171a:	2302      	movs	r3, #2
 800171c:	e002      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001722:	2300      	movs	r3, #0
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	f002 0203 	and.w	r2, r2, #3
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	4093      	lsls	r3, r2
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001734:	4934      	ldr	r1, [pc, #208]	; (8001808 <HAL_GPIO_Init+0x30c>)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001742:	4b3a      	ldr	r3, [pc, #232]	; (800182c <HAL_GPIO_Init+0x330>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001766:	4a31      	ldr	r2, [pc, #196]	; (800182c <HAL_GPIO_Init+0x330>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <HAL_GPIO_Init+0x330>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001790:	4a26      	ldr	r2, [pc, #152]	; (800182c <HAL_GPIO_Init+0x330>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001796:	4b25      	ldr	r3, [pc, #148]	; (800182c <HAL_GPIO_Init+0x330>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ba:	4a1c      	ldr	r2, [pc, #112]	; (800182c <HAL_GPIO_Init+0x330>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_GPIO_Init+0x330>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e4:	4a11      	ldr	r2, [pc, #68]	; (800182c <HAL_GPIO_Init+0x330>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3301      	adds	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	f67f ae90 	bls.w	8001518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f8:	bf00      	nop
 80017fa:	3724      	adds	r7, #36	; 0x24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40023800 	.word	0x40023800
 8001808:	40013800 	.word	0x40013800
 800180c:	40020000 	.word	0x40020000
 8001810:	40020400 	.word	0x40020400
 8001814:	40020800 	.word	0x40020800
 8001818:	40020c00 	.word	0x40020c00
 800181c:	40021000 	.word	0x40021000
 8001820:	40021400 	.word	0x40021400
 8001824:	40021800 	.word	0x40021800
 8001828:	40021c00 	.word	0x40021c00
 800182c:	40013c00 	.word	0x40013c00

08001830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e001      	b.n	8001852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001892:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001894:	b08f      	sub	sp, #60	; 0x3c
 8001896:	af0a      	add	r7, sp, #40	; 0x28
 8001898:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e054      	b.n	800194e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f006 fb62 	bl	8007f88 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2203      	movs	r2, #3
 80018c8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f004 fc00 	bl	80060e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	687e      	ldr	r6, [r7, #4]
 80018f0:	466d      	mov	r5, sp
 80018f2:	f106 0410 	add.w	r4, r6, #16
 80018f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001902:	e885 0003 	stmia.w	r5, {r0, r1}
 8001906:	1d33      	adds	r3, r6, #4
 8001908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190a:	6838      	ldr	r0, [r7, #0]
 800190c:	f004 fb7a 	bl	8006004 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	4618      	mov	r0, r3
 8001918:	f004 fbf7 	bl	800610a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	687e      	ldr	r6, [r7, #4]
 8001924:	466d      	mov	r5, sp
 8001926:	f106 0410 	add.w	r4, r6, #16
 800192a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001932:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001936:	e885 0003 	stmia.w	r5, {r0, r1}
 800193a:	1d33      	adds	r3, r6, #4
 800193c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193e:	6838      	ldr	r0, [r7, #0]
 8001940:	f004 fd0a 	bl	8006358 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001956 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001956:	b590      	push	{r4, r7, lr}
 8001958:	b089      	sub	sp, #36	; 0x24
 800195a:	af04      	add	r7, sp, #16
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	4608      	mov	r0, r1
 8001960:	4611      	mov	r1, r2
 8001962:	461a      	mov	r2, r3
 8001964:	4603      	mov	r3, r0
 8001966:	70fb      	strb	r3, [r7, #3]
 8001968:	460b      	mov	r3, r1
 800196a:	70bb      	strb	r3, [r7, #2]
 800196c:	4613      	mov	r3, r2
 800196e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_HCD_HC_Init+0x28>
 800197a:	2302      	movs	r3, #2
 800197c:	e07f      	b.n	8001a7e <HAL_HCD_HC_Init+0x128>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	333d      	adds	r3, #61	; 0x3d
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	3338      	adds	r3, #56	; 0x38
 80019aa:	787a      	ldrb	r2, [r7, #1]
 80019ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	440b      	add	r3, r1
 80019bc:	3340      	adds	r3, #64	; 0x40
 80019be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019c0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	3339      	adds	r3, #57	; 0x39
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	333f      	adds	r3, #63	; 0x3f
 80019e6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	78bb      	ldrb	r3, [r7, #2]
 80019f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019f4:	b2d8      	uxtb	r0, r3
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	333a      	adds	r3, #58	; 0x3a
 8001a04:	4602      	mov	r2, r0
 8001a06:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da0a      	bge.n	8001a26 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	333b      	adds	r3, #59	; 0x3b
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	e009      	b.n	8001a3a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a26:	78fa      	ldrb	r2, [r7, #3]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	333b      	adds	r3, #59	; 0x3b
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a3a:	78fa      	ldrb	r2, [r7, #3]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	333c      	adds	r3, #60	; 0x3c
 8001a4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a4e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	787c      	ldrb	r4, [r7, #1]
 8001a56:	78ba      	ldrb	r2, [r7, #2]
 8001a58:	78f9      	ldrb	r1, [r7, #3]
 8001a5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a5c:	9302      	str	r3, [sp, #8]
 8001a5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	f004 fdb4 	bl	80065d8 <USB_HC_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}

08001a86 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_HCD_HC_Halt+0x1e>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e00f      	b.n	8001ac4 <HAL_HCD_HC_Halt+0x3e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 fff0 	bl	8006a9a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4603      	mov	r3, r0
 8001adc:	70fb      	strb	r3, [r7, #3]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	70bb      	strb	r3, [r7, #2]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	333b      	adds	r3, #59	; 0x3b
 8001af6:	78ba      	ldrb	r2, [r7, #2]
 8001af8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	333f      	adds	r3, #63	; 0x3f
 8001b0a:	787a      	ldrb	r2, [r7, #1]
 8001b0c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b0e:	7c3b      	ldrb	r3, [r7, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d114      	bne.n	8001b3e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b14:	78fa      	ldrb	r2, [r7, #3]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	3342      	adds	r3, #66	; 0x42
 8001b24:	2203      	movs	r2, #3
 8001b26:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	333d      	adds	r3, #61	; 0x3d
 8001b38:	7f3a      	ldrb	r2, [r7, #28]
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	e009      	b.n	8001b52 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3342      	adds	r3, #66	; 0x42
 8001b4e:	2202      	movs	r2, #2
 8001b50:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b52:	787b      	ldrb	r3, [r7, #1]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	f200 80d6 	bhi.w	8001d06 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001b5a:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b60:	08001b71 	.word	0x08001b71
 8001b64:	08001cf1 	.word	0x08001cf1
 8001b68:	08001bdd 	.word	0x08001bdd
 8001b6c:	08001c67 	.word	0x08001c67
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b70:	7c3b      	ldrb	r3, [r7, #16]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	f040 80c9 	bne.w	8001d0a <HAL_HCD_HC_SubmitRequest+0x23e>
 8001b78:	78bb      	ldrb	r3, [r7, #2]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 80c5 	bne.w	8001d0a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001b80:	8b3b      	ldrh	r3, [r7, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	3351      	adds	r3, #81	; 0x51
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	440b      	add	r3, r1
 8001ba8:	3351      	adds	r3, #81	; 0x51
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10a      	bne.n	8001bc6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3342      	adds	r3, #66	; 0x42
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bc4:	e0a1      	b.n	8001d0a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bc6:	78fa      	ldrb	r2, [r7, #3]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3342      	adds	r3, #66	; 0x42
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	701a      	strb	r2, [r3, #0]
      break;
 8001bda:	e096      	b.n	8001d0a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bdc:	78bb      	ldrb	r3, [r7, #2]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d120      	bne.n	8001c24 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001be2:	78fa      	ldrb	r2, [r7, #3]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	3351      	adds	r3, #81	; 0x51
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	3342      	adds	r3, #66	; 0x42
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c0c:	e07e      	b.n	8001d0c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c0e:	78fa      	ldrb	r2, [r7, #3]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3342      	adds	r3, #66	; 0x42
 8001c1e:	2202      	movs	r2, #2
 8001c20:	701a      	strb	r2, [r3, #0]
      break;
 8001c22:	e073      	b.n	8001d0c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c24:	78fa      	ldrb	r2, [r7, #3]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	3350      	adds	r3, #80	; 0x50
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10a      	bne.n	8001c50 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c3a:	78fa      	ldrb	r2, [r7, #3]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	3342      	adds	r3, #66	; 0x42
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
      break;
 8001c4e:	e05d      	b.n	8001d0c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c50:	78fa      	ldrb	r2, [r7, #3]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3342      	adds	r3, #66	; 0x42
 8001c60:	2202      	movs	r2, #2
 8001c62:	701a      	strb	r2, [r3, #0]
      break;
 8001c64:	e052      	b.n	8001d0c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c66:	78bb      	ldrb	r3, [r7, #2]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d120      	bne.n	8001cae <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c6c:	78fa      	ldrb	r2, [r7, #3]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	440b      	add	r3, r1
 8001c7a:	3351      	adds	r3, #81	; 0x51
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10a      	bne.n	8001c98 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c82:	78fa      	ldrb	r2, [r7, #3]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	440b      	add	r3, r1
 8001c90:	3342      	adds	r3, #66	; 0x42
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c96:	e039      	b.n	8001d0c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	3342      	adds	r3, #66	; 0x42
 8001ca8:	2202      	movs	r2, #2
 8001caa:	701a      	strb	r2, [r3, #0]
      break;
 8001cac:	e02e      	b.n	8001d0c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	3350      	adds	r3, #80	; 0x50
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10a      	bne.n	8001cda <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3342      	adds	r3, #66	; 0x42
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
      break;
 8001cd8:	e018      	b.n	8001d0c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3342      	adds	r3, #66	; 0x42
 8001cea:	2202      	movs	r2, #2
 8001cec:	701a      	strb	r2, [r3, #0]
      break;
 8001cee:	e00d      	b.n	8001d0c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cf0:	78fa      	ldrb	r2, [r7, #3]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3342      	adds	r3, #66	; 0x42
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
      break;
 8001d04:	e002      	b.n	8001d0c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001d06:	bf00      	nop
 8001d08:	e000      	b.n	8001d0c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001d0a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	3344      	adds	r3, #68	; 0x44
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	8b39      	ldrh	r1, [r7, #24]
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4403      	add	r3, r0
 8001d30:	3348      	adds	r3, #72	; 0x48
 8001d32:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	335c      	adds	r3, #92	; 0x5c
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	334c      	adds	r3, #76	; 0x4c
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	3339      	adds	r3, #57	; 0x39
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	335d      	adds	r3, #93	; 0x5d
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	3338      	adds	r3, #56	; 0x38
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	18d1      	adds	r1, r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f004 fd24 	bl	80067ec <USB_HC_StartXfer>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop

08001db0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 fa83 	bl	80062d2 <USB_GetMode>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	f040 80ef 	bne.w	8001fb2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 fa67 	bl	80062ac <USB_ReadInterrupts>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80e5 	beq.w	8001fb0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f004 fa5e 	bl	80062ac <USB_ReadInterrupts>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dfa:	d104      	bne.n	8001e06 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f004 fa4e 	bl	80062ac <USB_ReadInterrupts>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e1a:	d104      	bne.n	8001e26 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 fa3e 	bl	80062ac <USB_ReadInterrupts>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e3a:	d104      	bne.n	8001e46 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f004 fa2e 	bl	80062ac <USB_ReadInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d103      	bne.n	8001e62 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f004 fa20 	bl	80062ac <USB_ReadInterrupts>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e76:	d115      	bne.n	8001ea4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e80:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d108      	bne.n	8001ea4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f006 f8f6 	bl	8008084 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 fb16 	bl	80064d0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f004 f9ff 	bl	80062ac <USB_ReadInterrupts>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d102      	bne.n	8001ec0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f001 f94a 	bl	8003154 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f004 f9f1 	bl	80062ac <USB_ReadInterrupts>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d106      	bne.n	8001ee2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f006 f8b9 	bl	800804c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2208      	movs	r2, #8
 8001ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 f9e0 	bl	80062ac <USB_ReadInterrupts>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ef6:	d138      	bne.n	8001f6a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f004 fdbb 	bl	8006a78 <USB_HC_ReadInterrupt>
 8001f02:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	e025      	b.n	8001f56 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	fa22 f303 	lsr.w	r3, r2, r3
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d018      	beq.n	8001f50 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f34:	d106      	bne.n	8001f44 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f8b3 	bl	80020a8 <HCD_HC_IN_IRQHandler>
 8001f42:	e005      	b.n	8001f50 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	4619      	mov	r1, r3
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fce1 	bl	8002912 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3301      	adds	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d3d4      	bcc.n	8001f0a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 f99c 	bl	80062ac <USB_ReadInterrupts>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d101      	bne.n	8001f82 <HAL_HCD_IRQHandler+0x1d2>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_HCD_IRQHandler+0x1d4>
 8001f82:	2300      	movs	r3, #0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d014      	beq.n	8001fb2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0210 	bic.w	r2, r2, #16
 8001f96:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f001 f82f 	bl	8002ffc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0210 	orr.w	r2, r2, #16
 8001fac:	619a      	str	r2, [r3, #24]
 8001fae:	e000      	b.n	8001fb2 <HAL_HCD_IRQHandler+0x202>
      return;
 8001fb0:	bf00      	nop
    }
  }
}
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_HCD_Start+0x16>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e013      	b.n	8001ff6 <HAL_HCD_Start+0x3e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f004 f873 	bl	80060c6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 faac 	bl	8006544 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_HCD_Stop+0x16>
 8002010:	2302      	movs	r3, #2
 8002012:	e00d      	b.n	8002030 <HAL_HCD_Stop+0x32>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f004 fe75 	bl	8006d10 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	335c      	adds	r3, #92	; 0x5c
 8002054:	781b      	ldrb	r3, [r3, #0]
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800206e:	78fa      	ldrb	r2, [r7, #3]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	334c      	adds	r3, #76	; 0x4c
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f004 fa8c 	bl	80065b6 <USB_GetCurrentFrame>
 800209e:	4603      	mov	r3, r0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d119      	bne.n	800210c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	461a      	mov	r2, r3
 80020e6:	2304      	movs	r3, #4
 80020e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	0151      	lsls	r1, r2, #5
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	440a      	add	r2, r1
 8002100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	60d3      	str	r3, [r2, #12]
 800210a:	e0ce      	b.n	80022aa <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002122:	d12c      	bne.n	800217e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002130:	461a      	mov	r2, r3
 8002132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002136:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	440b      	add	r3, r1
 8002146:	335d      	adds	r3, #93	; 0x5d
 8002148:	2207      	movs	r2, #7
 800214a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	0151      	lsls	r1, r2, #5
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	440a      	add	r2, r1
 8002162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f004 fc8f 	bl	8006a9a <USB_HC_Halt>
 800217c:	e095      	b.n	80022aa <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b20      	cmp	r3, #32
 8002192:	d109      	bne.n	80021a8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a0:	461a      	mov	r2, r3
 80021a2:	2320      	movs	r3, #32
 80021a4:	6093      	str	r3, [r2, #8]
 80021a6:	e080      	b.n	80022aa <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d134      	bne.n	8002228 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	0151      	lsls	r1, r2, #5
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	440a      	add	r2, r1
 80021d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	440b      	add	r3, r1
 80021ec:	335d      	adds	r3, #93	; 0x5d
 80021ee:	2205      	movs	r2, #5
 80021f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fe:	461a      	mov	r2, r3
 8002200:	2310      	movs	r3, #16
 8002202:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	461a      	mov	r2, r3
 8002212:	2308      	movs	r3, #8
 8002214:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f004 fc3a 	bl	8006a9a <USB_HC_Halt>
 8002226:	e040      	b.n	80022aa <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4413      	add	r3, r2
 8002230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223e:	d134      	bne.n	80022aa <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	0151      	lsls	r1, r2, #5
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	440a      	add	r2, r1
 8002256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f004 fc15 	bl	8006a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	461a      	mov	r2, r3
 800227e:	2310      	movs	r3, #16
 8002280:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	335d      	adds	r3, #93	; 0x5d
 8002292:	2208      	movs	r2, #8
 8002294:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a2:	461a      	mov	r2, r3
 80022a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c0:	d122      	bne.n	8002308 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	0151      	lsls	r1, r2, #5
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	440a      	add	r2, r1
 80022d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f004 fbd4 	bl	8006a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	461a      	mov	r2, r3
 8002300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002304:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002306:	e300      	b.n	800290a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b01      	cmp	r3, #1
 800231c:	f040 80fd 	bne.w	800251a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01b      	beq.n	8002360 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	3348      	adds	r3, #72	; 0x48
 8002338:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	0159      	lsls	r1, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	440b      	add	r3, r1
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800234c:	1ad1      	subs	r1, r2, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4403      	add	r3, r0
 800235c:	334c      	adds	r3, #76	; 0x4c
 800235e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	335d      	adds	r3, #93	; 0x5d
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	3358      	adds	r3, #88	; 0x58
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002394:	461a      	mov	r2, r3
 8002396:	2301      	movs	r3, #1
 8002398:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	440b      	add	r3, r1
 80023a8:	333f      	adds	r3, #63	; 0x3f
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	440b      	add	r3, r1
 80023be:	333f      	adds	r3, #63	; 0x3f
 80023c0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d121      	bne.n	800240a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	0151      	lsls	r1, r2, #5
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	440a      	add	r2, r1
 80023dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f004 fb52 	bl	8006a9a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	461a      	mov	r2, r3
 8002404:	2310      	movs	r3, #16
 8002406:	6093      	str	r3, [r2, #8]
 8002408:	e070      	b.n	80024ec <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	333f      	adds	r3, #63	; 0x3f
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d12a      	bne.n	8002476 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	0151      	lsls	r1, r2, #5
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	440a      	add	r2, r1
 8002436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800243a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800243e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	335c      	adds	r3, #92	; 0x5c
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	b2d8      	uxtb	r0, r3
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	335c      	adds	r3, #92	; 0x5c
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	4601      	mov	r1, r0
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f005 fe16 	bl	80080a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002474:	e03a      	b.n	80024ec <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	333f      	adds	r3, #63	; 0x3f
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d12f      	bne.n	80024ec <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	335c      	adds	r3, #92	; 0x5c
 800249c:	2201      	movs	r2, #1
 800249e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3350      	adds	r3, #80	; 0x50
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	f083 0301 	eor.w	r3, r3, #1
 80024b6:	b2d8      	uxtb	r0, r3
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	440b      	add	r3, r1
 80024c6:	3350      	adds	r3, #80	; 0x50
 80024c8:	4602      	mov	r2, r0
 80024ca:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	b2d8      	uxtb	r0, r3
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	335c      	adds	r3, #92	; 0x5c
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	4601      	mov	r1, r0
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f005 fdda 	bl	80080a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	3350      	adds	r3, #80	; 0x50
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	f083 0301 	eor.w	r3, r3, #1
 8002502:	b2d8      	uxtb	r0, r3
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	3350      	adds	r3, #80	; 0x50
 8002514:	4602      	mov	r2, r0
 8002516:	701a      	strb	r2, [r3, #0]
}
 8002518:	e1f7      	b.n	800290a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b02      	cmp	r3, #2
 800252e:	f040 811a 	bne.w	8002766 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	0151      	lsls	r1, r2, #5
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	440a      	add	r2, r1
 8002548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254c:	f023 0302 	bic.w	r3, r3, #2
 8002550:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	440b      	add	r3, r1
 8002560:	335d      	adds	r3, #93	; 0x5d
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d10a      	bne.n	800257e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	335c      	adds	r3, #92	; 0x5c
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e0d9      	b.n	8002732 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	335d      	adds	r3, #93	; 0x5d
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d10a      	bne.n	80025aa <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	440b      	add	r3, r1
 80025a2:	335c      	adds	r3, #92	; 0x5c
 80025a4:	2205      	movs	r2, #5
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	e0c3      	b.n	8002732 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	335d      	adds	r3, #93	; 0x5d
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b06      	cmp	r3, #6
 80025be:	d00a      	beq.n	80025d6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	335d      	adds	r3, #93	; 0x5d
 80025d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d156      	bne.n	8002684 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	440b      	add	r3, r1
 80025e4:	3358      	adds	r3, #88	; 0x58
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	1c59      	adds	r1, r3, #1
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4403      	add	r3, r0
 80025f8:	3358      	adds	r3, #88	; 0x58
 80025fa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	3358      	adds	r3, #88	; 0x58
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d914      	bls.n	800263c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	440b      	add	r3, r1
 8002620:	3358      	adds	r3, #88	; 0x58
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	335c      	adds	r3, #92	; 0x5c
 8002636:	2204      	movs	r2, #4
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e009      	b.n	8002650 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	335c      	adds	r3, #92	; 0x5c
 800264c:	2202      	movs	r2, #2
 800264e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002666:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800266e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e056      	b.n	8002732 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	335d      	adds	r3, #93	; 0x5d
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d123      	bne.n	80026e2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	335c      	adds	r3, #92	; 0x5c
 80026aa:	2202      	movs	r2, #2
 80026ac:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026c4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026cc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026da:	461a      	mov	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	e027      	b.n	8002732 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	440b      	add	r3, r1
 80026f0:	335d      	adds	r3, #93	; 0x5d
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b07      	cmp	r3, #7
 80026f6:	d11c      	bne.n	8002732 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	3358      	adds	r3, #88	; 0x58
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1c59      	adds	r1, r3, #1
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4403      	add	r3, r0
 800271a:	3358      	adds	r3, #88	; 0x58
 800271c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	440b      	add	r3, r1
 800272c:	335c      	adds	r3, #92	; 0x5c
 800272e:	2204      	movs	r2, #4
 8002730:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	461a      	mov	r2, r3
 8002740:	2302      	movs	r3, #2
 8002742:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	b2d8      	uxtb	r0, r3
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	440b      	add	r3, r1
 8002756:	335c      	adds	r3, #92	; 0x5c
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	4601      	mov	r1, r0
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f005 fc9e 	bl	80080a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002764:	e0d1      	b.n	800290a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002778:	2b80      	cmp	r3, #128	; 0x80
 800277a:	d13e      	bne.n	80027fa <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	0151      	lsls	r1, r2, #5
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	440a      	add	r2, r1
 8002792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	3358      	adds	r3, #88	; 0x58
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	1c59      	adds	r1, r3, #1
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4403      	add	r3, r0
 80027be:	3358      	adds	r3, #88	; 0x58
 80027c0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	335d      	adds	r3, #93	; 0x5d
 80027d2:	2206      	movs	r2, #6
 80027d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f004 f95a 	bl	8006a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	461a      	mov	r2, r3
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	6093      	str	r3, [r2, #8]
}
 80027f8:	e087      	b.n	800290a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b10      	cmp	r3, #16
 800280e:	d17c      	bne.n	800290a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	333f      	adds	r3, #63	; 0x3f
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b03      	cmp	r3, #3
 8002824:	d122      	bne.n	800286c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	3358      	adds	r3, #88	; 0x58
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	0151      	lsls	r1, r2, #5
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	440a      	add	r2, r1
 8002850:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f004 f918 	bl	8006a9a <USB_HC_Halt>
 800286a:	e045      	b.n	80028f8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	333f      	adds	r3, #63	; 0x3f
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	333f      	adds	r3, #63	; 0x3f
 8002892:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002894:	2b02      	cmp	r3, #2
 8002896:	d12f      	bne.n	80028f8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	440b      	add	r3, r1
 80028a6:	3358      	adds	r3, #88	; 0x58
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d121      	bne.n	80028f8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	335d      	adds	r3, #93	; 0x5d
 80028c4:	2203      	movs	r2, #3
 80028c6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	0151      	lsls	r1, r2, #5
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	440a      	add	r2, r1
 80028de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e2:	f043 0302 	orr.w	r3, r3, #2
 80028e6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 f8d1 	bl	8006a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	461a      	mov	r2, r3
 8002906:	2310      	movs	r3, #16
 8002908:	6093      	str	r3, [r2, #8]
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b04      	cmp	r3, #4
 8002940:	d119      	bne.n	8002976 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294e:	461a      	mov	r2, r3
 8002950:	2304      	movs	r3, #4
 8002952:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	0151      	lsls	r1, r2, #5
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	440a      	add	r2, r1
 800296a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002974:	e33e      	b.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b20      	cmp	r3, #32
 800298a:	d141      	bne.n	8002a10 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	461a      	mov	r2, r3
 800299a:	2320      	movs	r3, #32
 800299c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	333d      	adds	r3, #61	; 0x3d
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	f040 831f 	bne.w	8002ff4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	333d      	adds	r3, #61	; 0x3d
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	440b      	add	r3, r1
 80029d8:	335c      	adds	r3, #92	; 0x5c
 80029da:	2202      	movs	r2, #2
 80029dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	0151      	lsls	r1, r2, #5
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	440a      	add	r2, r1
 80029f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f004 f846 	bl	8006a9a <USB_HC_Halt>
}
 8002a0e:	e2f1      	b.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a22:	2b40      	cmp	r3, #64	; 0x40
 8002a24:	d13f      	bne.n	8002aa6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	440b      	add	r3, r1
 8002a34:	335d      	adds	r3, #93	; 0x5d
 8002a36:	2204      	movs	r2, #4
 8002a38:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	333d      	adds	r3, #61	; 0x3d
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3358      	adds	r3, #88	; 0x58
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	0151      	lsls	r1, r2, #5
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	440a      	add	r2, r1
 8002a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f004 f804 	bl	8006a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2340      	movs	r3, #64	; 0x40
 8002aa2:	6093      	str	r3, [r2, #8]
}
 8002aa4:	e2a6      	b.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002abc:	d122      	bne.n	8002b04 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	0151      	lsls	r1, r2, #5
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	440a      	add	r2, r1
 8002ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 ffd6 	bl	8006a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afa:	461a      	mov	r2, r3
 8002afc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b00:	6093      	str	r3, [r2, #8]
}
 8002b02:	e277      	b.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d135      	bne.n	8002b86 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	3358      	adds	r3, #88	; 0x58
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	0151      	lsls	r1, r2, #5
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	440a      	add	r2, r1
 8002b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 ff9e 	bl	8006a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	335d      	adds	r3, #93	; 0x5d
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
}
 8002b84:	e236      	b.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d12b      	bne.n	8002bf4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2308      	movs	r3, #8
 8002bac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	0151      	lsls	r1, r2, #5
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	440a      	add	r2, r1
 8002bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 ff5e 	bl	8006a9a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	335d      	adds	r3, #93	; 0x5d
 8002bee:	2205      	movs	r2, #5
 8002bf0:	701a      	strb	r2, [r3, #0]
}
 8002bf2:	e1ff      	b.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b10      	cmp	r3, #16
 8002c08:	d155      	bne.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	3358      	adds	r3, #88	; 0x58
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	335d      	adds	r3, #93	; 0x5d
 8002c2e:	2203      	movs	r2, #3
 8002c30:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	333d      	adds	r3, #61	; 0x3d
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d114      	bne.n	8002c72 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	333c      	adds	r3, #60	; 0x3c
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	333d      	adds	r3, #61	; 0x3d
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	0151      	lsls	r1, r2, #5
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	440a      	add	r2, r1
 8002c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f003 fefc 	bl	8006a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	6093      	str	r3, [r2, #8]
}
 8002cb4:	e19e      	b.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc8:	2b80      	cmp	r3, #128	; 0x80
 8002cca:	d12b      	bne.n	8002d24 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	0151      	lsls	r1, r2, #5
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	440a      	add	r2, r1
 8002ce2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 fecf 	bl	8006a9a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	335d      	adds	r3, #93	; 0x5d
 8002d0c:	2206      	movs	r2, #6
 8002d0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	6093      	str	r3, [r2, #8]
}
 8002d22:	e167      	b.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3a:	d135      	bne.n	8002da8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	0151      	lsls	r1, r2, #5
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	440a      	add	r2, r1
 8002d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d56:	f043 0302 	orr.w	r3, r3, #2
 8002d5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f003 fe97 	bl	8006a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2310      	movs	r3, #16
 8002d7c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	440b      	add	r3, r1
 8002da0:	335d      	adds	r3, #93	; 0x5d
 8002da2:	2208      	movs	r2, #8
 8002da4:	701a      	strb	r2, [r3, #0]
}
 8002da6:	e125      	b.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	f040 811a 	bne.w	8002ff4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	0151      	lsls	r1, r2, #5
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	440a      	add	r2, r1
 8002dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dda:	f023 0302 	bic.w	r3, r3, #2
 8002dde:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	335d      	adds	r3, #93	; 0x5d
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d137      	bne.n	8002e66 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	335c      	adds	r3, #92	; 0x5c
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	333f      	adds	r3, #63	; 0x3f
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d00b      	beq.n	8002e38 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	333f      	adds	r3, #63	; 0x3f
 8002e30:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	f040 80c5 	bne.w	8002fc2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	440b      	add	r3, r1
 8002e46:	3351      	adds	r3, #81	; 0x51
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	f083 0301 	eor.w	r3, r3, #1
 8002e4e:	b2d8      	uxtb	r0, r3
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3351      	adds	r3, #81	; 0x51
 8002e60:	4602      	mov	r2, r0
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e0ad      	b.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	335d      	adds	r3, #93	; 0x5d
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d10a      	bne.n	8002e92 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	335c      	adds	r3, #92	; 0x5c
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e097      	b.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	335d      	adds	r3, #93	; 0x5d
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d10a      	bne.n	8002ebe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	335c      	adds	r3, #92	; 0x5c
 8002eb8:	2202      	movs	r2, #2
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e081      	b.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	335d      	adds	r3, #93	; 0x5d
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b05      	cmp	r3, #5
 8002ed2:	d10a      	bne.n	8002eea <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	335c      	adds	r3, #92	; 0x5c
 8002ee4:	2205      	movs	r2, #5
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e06b      	b.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	440b      	add	r3, r1
 8002ef8:	335d      	adds	r3, #93	; 0x5d
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b06      	cmp	r3, #6
 8002efe:	d00a      	beq.n	8002f16 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	440b      	add	r3, r1
 8002f0e:	335d      	adds	r3, #93	; 0x5d
 8002f10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d155      	bne.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	3358      	adds	r3, #88	; 0x58
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	1c59      	adds	r1, r3, #1
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4403      	add	r3, r0
 8002f38:	3358      	adds	r3, #88	; 0x58
 8002f3a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	440b      	add	r3, r1
 8002f4a:	3358      	adds	r3, #88	; 0x58
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d914      	bls.n	8002f7c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	440b      	add	r3, r1
 8002f60:	3358      	adds	r3, #88	; 0x58
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	335c      	adds	r3, #92	; 0x5c
 8002f76:	2204      	movs	r2, #4
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e009      	b.n	8002f90 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	440b      	add	r3, r1
 8002f8a:	335c      	adds	r3, #92	; 0x5c
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fa6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	b2d8      	uxtb	r0, r3
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	440b      	add	r3, r1
 8002fe6:	335c      	adds	r3, #92	; 0x5c
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	4601      	mov	r1, r0
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f005 f856 	bl	80080a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ff4:	bf00      	nop
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	0c5b      	lsrs	r3, r3, #17
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003030:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d003      	beq.n	8003040 <HCD_RXQLVL_IRQHandler+0x44>
 8003038:	2b05      	cmp	r3, #5
 800303a:	f000 8082 	beq.w	8003142 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800303e:	e083      	b.n	8003148 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d07f      	beq.n	8003146 <HCD_RXQLVL_IRQHandler+0x14a>
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	3344      	adds	r3, #68	; 0x44
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d074      	beq.n	8003146 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	3344      	adds	r3, #68	; 0x44
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	b292      	uxth	r2, r2
 8003076:	4619      	mov	r1, r3
 8003078:	f003 f8ef 	bl	800625a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	3344      	adds	r3, #68	; 0x44
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	18d1      	adds	r1, r2, r3
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4403      	add	r3, r0
 80030a0:	3344      	adds	r3, #68	; 0x44
 80030a2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	334c      	adds	r3, #76	; 0x4c
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	18d1      	adds	r1, r2, r3
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4403      	add	r3, r0
 80030c8:	334c      	adds	r3, #76	; 0x4c
 80030ca:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HCD_RXQLVL_IRQHandler+0x154>)
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d031      	beq.n	8003146 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030f8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003100:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	3350      	adds	r3, #80	; 0x50
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	f083 0301 	eor.w	r3, r3, #1
 800312a:	b2d8      	uxtb	r0, r3
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	440b      	add	r3, r1
 800313a:	3350      	adds	r3, #80	; 0x50
 800313c:	4602      	mov	r2, r0
 800313e:	701a      	strb	r2, [r3, #0]
      break;
 8003140:	e001      	b.n	8003146 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003142:	bf00      	nop
 8003144:	e000      	b.n	8003148 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003146:	bf00      	nop
  }
}
 8003148:	bf00      	nop
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	1ff80000 	.word	0x1ff80000

08003154 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003180:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	d10b      	bne.n	80031a4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b01      	cmp	r3, #1
 8003194:	d102      	bne.n	800319c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f004 ff66 	bl	8008068 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f043 0302 	orr.w	r3, r3, #2
 80031a2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d132      	bne.n	8003214 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f043 0308 	orr.w	r3, r3, #8
 80031b4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d126      	bne.n	800320e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d113      	bne.n	80031f0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80031ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031d2:	d106      	bne.n	80031e2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2102      	movs	r1, #2
 80031da:	4618      	mov	r0, r3
 80031dc:	f003 f978 	bl	80064d0 <USB_InitFSLSPClkSel>
 80031e0:	e011      	b.n	8003206 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2101      	movs	r1, #1
 80031e8:	4618      	mov	r0, r3
 80031ea:	f003 f971 	bl	80064d0 <USB_InitFSLSPClkSel>
 80031ee:	e00a      	b.n	8003206 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d106      	bne.n	8003206 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031fe:	461a      	mov	r2, r3
 8003200:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003204:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f004 ff58 	bl	80080bc <HAL_HCD_PortEnabled_Callback>
 800320c:	e002      	b.n	8003214 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f004 ff62 	bl	80080d8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b20      	cmp	r3, #32
 800321c:	d103      	bne.n	8003226 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f043 0320 	orr.w	r3, r3, #32
 8003224:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800322c:	461a      	mov	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	6013      	str	r3, [r2, #0]
}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e11f      	b.n	800348e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fd fd82 	bl	8000d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2224      	movs	r2, #36	; 0x24
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800328e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800329e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032a0:	f001 f9de 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 80032a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4a7b      	ldr	r2, [pc, #492]	; (8003498 <HAL_I2C_Init+0x25c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d807      	bhi.n	80032c0 <HAL_I2C_Init+0x84>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a7a      	ldr	r2, [pc, #488]	; (800349c <HAL_I2C_Init+0x260>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	bf94      	ite	ls
 80032b8:	2301      	movls	r3, #1
 80032ba:	2300      	movhi	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e006      	b.n	80032ce <HAL_I2C_Init+0x92>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a77      	ldr	r2, [pc, #476]	; (80034a0 <HAL_I2C_Init+0x264>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	bf94      	ite	ls
 80032c8:	2301      	movls	r3, #1
 80032ca:	2300      	movhi	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0db      	b.n	800348e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4a72      	ldr	r2, [pc, #456]	; (80034a4 <HAL_I2C_Init+0x268>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0c9b      	lsrs	r3, r3, #18
 80032e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a64      	ldr	r2, [pc, #400]	; (8003498 <HAL_I2C_Init+0x25c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d802      	bhi.n	8003310 <HAL_I2C_Init+0xd4>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	3301      	adds	r3, #1
 800330e:	e009      	b.n	8003324 <HAL_I2C_Init+0xe8>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	4a63      	ldr	r2, [pc, #396]	; (80034a8 <HAL_I2C_Init+0x26c>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	3301      	adds	r3, #1
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	430b      	orrs	r3, r1
 800332a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003336:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4956      	ldr	r1, [pc, #344]	; (8003498 <HAL_I2C_Init+0x25c>)
 8003340:	428b      	cmp	r3, r1
 8003342:	d80d      	bhi.n	8003360 <HAL_I2C_Init+0x124>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1e59      	subs	r1, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003352:	3301      	adds	r3, #1
 8003354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003358:	2b04      	cmp	r3, #4
 800335a:	bf38      	it	cc
 800335c:	2304      	movcc	r3, #4
 800335e:	e04f      	b.n	8003400 <HAL_I2C_Init+0x1c4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d111      	bne.n	800338c <HAL_I2C_Init+0x150>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1e58      	subs	r0, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	440b      	add	r3, r1
 8003376:	fbb0 f3f3 	udiv	r3, r0, r3
 800337a:	3301      	adds	r3, #1
 800337c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e012      	b.n	80033b2 <HAL_I2C_Init+0x176>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1e58      	subs	r0, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	0099      	lsls	r1, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_Init+0x17e>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e022      	b.n	8003400 <HAL_I2C_Init+0x1c4>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10e      	bne.n	80033e0 <HAL_I2C_Init+0x1a4>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1e58      	subs	r0, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6859      	ldr	r1, [r3, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	440b      	add	r3, r1
 80033d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d4:	3301      	adds	r3, #1
 80033d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033de:	e00f      	b.n	8003400 <HAL_I2C_Init+0x1c4>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	0099      	lsls	r1, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	6809      	ldr	r1, [r1, #0]
 8003404:	4313      	orrs	r3, r2
 8003406:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69da      	ldr	r2, [r3, #28]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800342e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6911      	ldr	r1, [r2, #16]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68d2      	ldr	r2, [r2, #12]
 800343a:	4311      	orrs	r1, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	430b      	orrs	r3, r1
 8003442:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	000186a0 	.word	0x000186a0
 800349c:	001e847f 	.word	0x001e847f
 80034a0:	003d08ff 	.word	0x003d08ff
 80034a4:	431bde83 	.word	0x431bde83
 80034a8:	10624dd3 	.word	0x10624dd3

080034ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e128      	b.n	8003710 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a90      	ldr	r2, [pc, #576]	; (8003718 <HAL_I2S_Init+0x26c>)
 80034d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7fd fc8f 	bl	8000dfc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034f4:	f023 030f 	bic.w	r3, r3, #15
 80034f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2202      	movs	r2, #2
 8003500:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d060      	beq.n	80035cc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d102      	bne.n	8003518 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003512:	2310      	movs	r3, #16
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e001      	b.n	800351c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003518:	2320      	movs	r3, #32
 800351a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b20      	cmp	r3, #32
 8003522:	d802      	bhi.n	800352a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800352a:	2001      	movs	r0, #1
 800352c:	f001 f9a2 	bl	8004874 <HAL_RCCEx_GetPeriphCLKFreq>
 8003530:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353a:	d125      	bne.n	8003588 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d010      	beq.n	8003566 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	fbb2 f2f3 	udiv	r2, r2, r3
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	461a      	mov	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	3305      	adds	r3, #5
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e01f      	b.n	80035a6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	461a      	mov	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	3305      	adds	r3, #5
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	e00e      	b.n	80035a6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	461a      	mov	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a2:	3305      	adds	r3, #5
 80035a4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4a5c      	ldr	r2, [pc, #368]	; (800371c <HAL_I2S_Init+0x270>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	08db      	lsrs	r3, r3, #3
 80035b0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e003      	b.n	80035d4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80035cc:	2302      	movs	r3, #2
 80035ce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d902      	bls.n	80035e0 <HAL_I2S_Init+0x134>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	2bff      	cmp	r3, #255	; 0xff
 80035de:	d907      	bls.n	80035f0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	f043 0210 	orr.w	r2, r3, #16
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e08f      	b.n	8003710 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	ea42 0103 	orr.w	r1, r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	430a      	orrs	r2, r1
 8003602:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800360e:	f023 030f 	bic.w	r3, r3, #15
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6851      	ldr	r1, [r2, #4]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6892      	ldr	r2, [r2, #8]
 800361a:	4311      	orrs	r1, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	68d2      	ldr	r2, [r2, #12]
 8003620:	4311      	orrs	r1, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6992      	ldr	r2, [r2, #24]
 8003626:	430a      	orrs	r2, r1
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003632:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d161      	bne.n	8003700 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a38      	ldr	r2, [pc, #224]	; (8003720 <HAL_I2S_Init+0x274>)
 8003640:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a37      	ldr	r2, [pc, #220]	; (8003724 <HAL_I2S_Init+0x278>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_I2S_Init+0x1a4>
 800364c:	4b36      	ldr	r3, [pc, #216]	; (8003728 <HAL_I2S_Init+0x27c>)
 800364e:	e001      	b.n	8003654 <HAL_I2S_Init+0x1a8>
 8003650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	4932      	ldr	r1, [pc, #200]	; (8003724 <HAL_I2S_Init+0x278>)
 800365c:	428a      	cmp	r2, r1
 800365e:	d101      	bne.n	8003664 <HAL_I2S_Init+0x1b8>
 8003660:	4a31      	ldr	r2, [pc, #196]	; (8003728 <HAL_I2S_Init+0x27c>)
 8003662:	e001      	b.n	8003668 <HAL_I2S_Init+0x1bc>
 8003664:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003668:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800366c:	f023 030f 	bic.w	r3, r3, #15
 8003670:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2b      	ldr	r2, [pc, #172]	; (8003724 <HAL_I2S_Init+0x278>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_I2S_Init+0x1d4>
 800367c:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <HAL_I2S_Init+0x27c>)
 800367e:	e001      	b.n	8003684 <HAL_I2S_Init+0x1d8>
 8003680:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003684:	2202      	movs	r2, #2
 8003686:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a25      	ldr	r2, [pc, #148]	; (8003724 <HAL_I2S_Init+0x278>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <HAL_I2S_Init+0x1ea>
 8003692:	4b25      	ldr	r3, [pc, #148]	; (8003728 <HAL_I2S_Init+0x27c>)
 8003694:	e001      	b.n	800369a <HAL_I2S_Init+0x1ee>
 8003696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a6:	d003      	beq.n	80036b0 <HAL_I2S_Init+0x204>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d103      	bne.n	80036b8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80036b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	e001      	b.n	80036bc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80036b8:	2300      	movs	r3, #0
 80036ba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	b299      	uxth	r1, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80036d2:	4303      	orrs	r3, r0
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	430b      	orrs	r3, r1
 80036d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80036da:	4313      	orrs	r3, r2
 80036dc:	b29a      	uxth	r2, r3
 80036de:	897b      	ldrh	r3, [r7, #10]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036e8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a0d      	ldr	r2, [pc, #52]	; (8003724 <HAL_I2S_Init+0x278>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <HAL_I2S_Init+0x24c>
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <HAL_I2S_Init+0x27c>)
 80036f6:	e001      	b.n	80036fc <HAL_I2S_Init+0x250>
 80036f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fc:	897a      	ldrh	r2, [r7, #10]
 80036fe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	08003823 	.word	0x08003823
 800371c:	cccccccd 	.word	0xcccccccd
 8003720:	08003939 	.word	0x08003939
 8003724:	40003800 	.word	0x40003800
 8003728:	40003400 	.word	0x40003400

0800372c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	881a      	ldrh	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	1c9a      	adds	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10e      	bne.n	80037bc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff ffb8 	bl	800372c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	b292      	uxth	r2, r2
 80037d8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	1c9a      	adds	r2, r3, #2
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10e      	bne.n	800381a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800380a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff93 	bl	8003740 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b04      	cmp	r3, #4
 800383c:	d13a      	bne.n	80038b4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b01      	cmp	r3, #1
 8003846:	d109      	bne.n	800385c <I2S_IRQHandler+0x3a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d102      	bne.n	800385c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ffb4 	bl	80037c4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	d126      	bne.n	80038b4 <I2S_IRQHandler+0x92>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b20      	cmp	r3, #32
 8003872:	d11f      	bne.n	80038b4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003882:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f043 0202 	orr.w	r2, r3, #2
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ff50 	bl	8003754 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d136      	bne.n	800392e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d109      	bne.n	80038de <I2S_IRQHandler+0xbc>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d102      	bne.n	80038de <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ff45 	bl	8003768 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d122      	bne.n	800392e <I2S_IRQHandler+0x10c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d11b      	bne.n	800392e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003904:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	f043 0204 	orr.w	r2, r3, #4
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff13 	bl	8003754 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800392e:	bf00      	nop
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4aa2      	ldr	r2, [pc, #648]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003952:	4ba2      	ldr	r3, [pc, #648]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003954:	e001      	b.n	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a9b      	ldr	r2, [pc, #620]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003970:	4b9a      	ldr	r3, [pc, #616]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003972:	e001      	b.n	8003978 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003984:	d004      	beq.n	8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 8099 	bne.w	8003ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d107      	bne.n	80039aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f925 	bl	8003bf4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d107      	bne.n	80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f9c8 	bl	8003d54 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d13a      	bne.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d035      	beq.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a7e      	ldr	r2, [pc, #504]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039e2:	4b7e      	ldr	r3, [pc, #504]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039e4:	e001      	b.n	80039ea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4979      	ldr	r1, [pc, #484]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039f2:	428b      	cmp	r3, r1
 80039f4:	d101      	bne.n	80039fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039f6:	4b79      	ldr	r3, [pc, #484]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039f8:	e001      	b.n	80039fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a02:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	f043 0202 	orr.w	r2, r3, #2
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fe88 	bl	8003754 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	f040 80be 	bne.w	8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80b8 	beq.w	8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a59      	ldr	r2, [pc, #356]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a76:	4b59      	ldr	r3, [pc, #356]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a78:	e001      	b.n	8003a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4954      	ldr	r1, [pc, #336]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a86:	428b      	cmp	r3, r1
 8003a88:	d101      	bne.n	8003a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a8a:	4b54      	ldr	r3, [pc, #336]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a8c:	e001      	b.n	8003a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a96:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f043 0204 	orr.w	r2, r3, #4
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fe4a 	bl	8003754 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ac0:	e084      	b.n	8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d107      	bne.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f8be 	bl	8003c58 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d107      	bne.n	8003af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f8fd 	bl	8003cf0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d12f      	bne.n	8003b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d02a      	beq.n	8003b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b18:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a2e      	ldr	r2, [pc, #184]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d101      	bne.n	8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b24:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b26:	e001      	b.n	8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4929      	ldr	r1, [pc, #164]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b34:	428b      	cmp	r3, r1
 8003b36:	d101      	bne.n	8003b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b38:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b3a:	e001      	b.n	8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b44:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	f043 0202 	orr.w	r2, r3, #2
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff fdfa 	bl	8003754 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d131      	bne.n	8003bce <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d02c      	beq.n	8003bce <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d101      	bne.n	8003b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b7e:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b80:	e001      	b.n	8003b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4912      	ldr	r1, [pc, #72]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b8e:	428b      	cmp	r3, r1
 8003b90:	d101      	bne.n	8003b96 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b94:	e001      	b.n	8003b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003b96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b9e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bae:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	f043 0204 	orr.w	r2, r3, #4
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fdc5 	bl	8003754 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bca:	e000      	b.n	8003bce <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bcc:	bf00      	nop
}
 8003bce:	bf00      	nop
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40003800 	.word	0x40003800
 8003bdc:	40003400 	.word	0x40003400

08003be0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	1c99      	adds	r1, r3, #2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6251      	str	r1, [r2, #36]	; 0x24
 8003c06:	881a      	ldrh	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d113      	bne.n	8003c4e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ffc9 	bl	8003be0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	1c99      	adds	r1, r3, #2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6251      	str	r1, [r2, #36]	; 0x24
 8003c6a:	8819      	ldrh	r1, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1d      	ldr	r2, [pc, #116]	; (8003ce8 <I2SEx_TxISR_I2SExt+0x90>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <I2SEx_TxISR_I2SExt+0x22>
 8003c76:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <I2SEx_TxISR_I2SExt+0x94>)
 8003c78:	e001      	b.n	8003c7e <I2SEx_TxISR_I2SExt+0x26>
 8003c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c7e:	460a      	mov	r2, r1
 8003c80:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d121      	bne.n	8003cde <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a12      	ldr	r2, [pc, #72]	; (8003ce8 <I2SEx_TxISR_I2SExt+0x90>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d101      	bne.n	8003ca8 <I2SEx_TxISR_I2SExt+0x50>
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <I2SEx_TxISR_I2SExt+0x94>)
 8003ca6:	e001      	b.n	8003cac <I2SEx_TxISR_I2SExt+0x54>
 8003ca8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	490d      	ldr	r1, [pc, #52]	; (8003ce8 <I2SEx_TxISR_I2SExt+0x90>)
 8003cb4:	428b      	cmp	r3, r1
 8003cb6:	d101      	bne.n	8003cbc <I2SEx_TxISR_I2SExt+0x64>
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <I2SEx_TxISR_I2SExt+0x94>)
 8003cba:	e001      	b.n	8003cc0 <I2SEx_TxISR_I2SExt+0x68>
 8003cbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cc4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d106      	bne.n	8003cde <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ff81 	bl	8003be0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40003800 	.word	0x40003800
 8003cec:	40003400 	.word	0x40003400

08003cf0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68d8      	ldr	r0, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	1c99      	adds	r1, r3, #2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d08:	b282      	uxth	r2, r0
 8003d0a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d113      	bne.n	8003d4c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d32:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff ff4a 	bl	8003be0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <I2SEx_RxISR_I2SExt+0x90>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d101      	bne.n	8003d6a <I2SEx_RxISR_I2SExt+0x16>
 8003d66:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <I2SEx_RxISR_I2SExt+0x94>)
 8003d68:	e001      	b.n	8003d6e <I2SEx_RxISR_I2SExt+0x1a>
 8003d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6e:	68d8      	ldr	r0, [r3, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	1c99      	adds	r1, r3, #2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d7a:	b282      	uxth	r2, r0
 8003d7c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d121      	bne.n	8003dda <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a12      	ldr	r2, [pc, #72]	; (8003de4 <I2SEx_RxISR_I2SExt+0x90>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d101      	bne.n	8003da4 <I2SEx_RxISR_I2SExt+0x50>
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <I2SEx_RxISR_I2SExt+0x94>)
 8003da2:	e001      	b.n	8003da8 <I2SEx_RxISR_I2SExt+0x54>
 8003da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	490d      	ldr	r1, [pc, #52]	; (8003de4 <I2SEx_RxISR_I2SExt+0x90>)
 8003db0:	428b      	cmp	r3, r1
 8003db2:	d101      	bne.n	8003db8 <I2SEx_RxISR_I2SExt+0x64>
 8003db4:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <I2SEx_RxISR_I2SExt+0x94>)
 8003db6:	e001      	b.n	8003dbc <I2SEx_RxISR_I2SExt+0x68>
 8003db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dc0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff03 	bl	8003be0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40003800 	.word	0x40003800
 8003de8:	40003400 	.word	0x40003400

08003dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e25b      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d075      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e0a:	4ba3      	ldr	r3, [pc, #652]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d00c      	beq.n	8003e30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e16:	4ba0      	ldr	r3, [pc, #640]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d112      	bne.n	8003e48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e22:	4b9d      	ldr	r3, [pc, #628]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e2e:	d10b      	bne.n	8003e48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e30:	4b99      	ldr	r3, [pc, #612]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d05b      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x108>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d157      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e236      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e50:	d106      	bne.n	8003e60 <HAL_RCC_OscConfig+0x74>
 8003e52:	4b91      	ldr	r3, [pc, #580]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a90      	ldr	r2, [pc, #576]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	e01d      	b.n	8003e9c <HAL_RCC_OscConfig+0xb0>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x98>
 8003e6a:	4b8b      	ldr	r3, [pc, #556]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a8a      	ldr	r2, [pc, #552]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	4b88      	ldr	r3, [pc, #544]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a87      	ldr	r2, [pc, #540]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	e00b      	b.n	8003e9c <HAL_RCC_OscConfig+0xb0>
 8003e84:	4b84      	ldr	r3, [pc, #528]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a83      	ldr	r2, [pc, #524]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	4b81      	ldr	r3, [pc, #516]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a80      	ldr	r2, [pc, #512]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d013      	beq.n	8003ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fd f9ea 	bl	800127c <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fd f9e6 	bl	800127c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e1fb      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	4b76      	ldr	r3, [pc, #472]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0xc0>
 8003eca:	e014      	b.n	8003ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fd f9d6 	bl	800127c <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7fd f9d2 	bl	800127c <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	; 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e1e7      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee6:	4b6c      	ldr	r3, [pc, #432]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0xe8>
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d063      	beq.n	8003fca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f02:	4b65      	ldr	r3, [pc, #404]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0e:	4b62      	ldr	r3, [pc, #392]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d11c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f1a:	4b5f      	ldr	r3, [pc, #380]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d116      	bne.n	8003f54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	4b5c      	ldr	r3, [pc, #368]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_RCC_OscConfig+0x152>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d001      	beq.n	8003f3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e1bb      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3e:	4b56      	ldr	r3, [pc, #344]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4952      	ldr	r1, [pc, #328]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f52:	e03a      	b.n	8003fca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d020      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f5c:	4b4f      	ldr	r3, [pc, #316]	; (800409c <HAL_RCC_OscConfig+0x2b0>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fd f98b 	bl	800127c <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f6a:	f7fd f987 	bl	800127c <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e19c      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7c:	4b46      	ldr	r3, [pc, #280]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f88:	4b43      	ldr	r3, [pc, #268]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4940      	ldr	r1, [pc, #256]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]
 8003f9c:	e015      	b.n	8003fca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9e:	4b3f      	ldr	r3, [pc, #252]	; (800409c <HAL_RCC_OscConfig+0x2b0>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fd f96a 	bl	800127c <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fac:	f7fd f966 	bl	800127c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e17b      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fbe:	4b36      	ldr	r3, [pc, #216]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d030      	beq.n	8004038 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fde:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <HAL_RCC_OscConfig+0x2b4>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fd f94a 	bl	800127c <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fec:	f7fd f946 	bl	800127c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e15b      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffe:	4b26      	ldr	r3, [pc, #152]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x200>
 800400a:	e015      	b.n	8004038 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800400c:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <HAL_RCC_OscConfig+0x2b4>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004012:	f7fd f933 	bl	800127c <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800401a:	f7fd f92f 	bl	800127c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e144      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402c:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 800402e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80a0 	beq.w	8004186 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404a:	4b13      	ldr	r3, [pc, #76]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	4a0e      	ldr	r2, [pc, #56]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8004060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004064:	6413      	str	r3, [r2, #64]	; 0x40
 8004066:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004072:	2301      	movs	r3, #1
 8004074:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_OscConfig+0x2b8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d121      	bne.n	80040c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004082:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <HAL_RCC_OscConfig+0x2b8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <HAL_RCC_OscConfig+0x2b8>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408e:	f7fd f8f5 	bl	800127c <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004094:	e011      	b.n	80040ba <HAL_RCC_OscConfig+0x2ce>
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800
 800409c:	42470000 	.word	0x42470000
 80040a0:	42470e80 	.word	0x42470e80
 80040a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a8:	f7fd f8e8 	bl	800127c <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e0fd      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ba:	4b81      	ldr	r3, [pc, #516]	; (80042c0 <HAL_RCC_OscConfig+0x4d4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f0      	beq.n	80040a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d106      	bne.n	80040dc <HAL_RCC_OscConfig+0x2f0>
 80040ce:	4b7d      	ldr	r3, [pc, #500]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a7c      	ldr	r2, [pc, #496]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
 80040da:	e01c      	b.n	8004116 <HAL_RCC_OscConfig+0x32a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b05      	cmp	r3, #5
 80040e2:	d10c      	bne.n	80040fe <HAL_RCC_OscConfig+0x312>
 80040e4:	4b77      	ldr	r3, [pc, #476]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e8:	4a76      	ldr	r2, [pc, #472]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 80040ea:	f043 0304 	orr.w	r3, r3, #4
 80040ee:	6713      	str	r3, [r2, #112]	; 0x70
 80040f0:	4b74      	ldr	r3, [pc, #464]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a73      	ldr	r2, [pc, #460]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70
 80040fc:	e00b      	b.n	8004116 <HAL_RCC_OscConfig+0x32a>
 80040fe:	4b71      	ldr	r3, [pc, #452]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	4a70      	ldr	r2, [pc, #448]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 8004104:	f023 0301 	bic.w	r3, r3, #1
 8004108:	6713      	str	r3, [r2, #112]	; 0x70
 800410a:	4b6e      	ldr	r3, [pc, #440]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	4a6d      	ldr	r2, [pc, #436]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 8004110:	f023 0304 	bic.w	r3, r3, #4
 8004114:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d015      	beq.n	800414a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411e:	f7fd f8ad 	bl	800127c <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004124:	e00a      	b.n	800413c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004126:	f7fd f8a9 	bl	800127c <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f241 3288 	movw	r2, #5000	; 0x1388
 8004134:	4293      	cmp	r3, r2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e0bc      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413c:	4b61      	ldr	r3, [pc, #388]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ee      	beq.n	8004126 <HAL_RCC_OscConfig+0x33a>
 8004148:	e014      	b.n	8004174 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800414a:	f7fd f897 	bl	800127c <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004150:	e00a      	b.n	8004168 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004152:	f7fd f893 	bl	800127c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004160:	4293      	cmp	r3, r2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e0a6      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004168:	4b56      	ldr	r3, [pc, #344]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1ee      	bne.n	8004152 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d105      	bne.n	8004186 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800417a:	4b52      	ldr	r3, [pc, #328]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	4a51      	ldr	r2, [pc, #324]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 8004180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004184:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8092 	beq.w	80042b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004190:	4b4c      	ldr	r3, [pc, #304]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b08      	cmp	r3, #8
 800419a:	d05c      	beq.n	8004256 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d141      	bne.n	8004228 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a4:	4b48      	ldr	r3, [pc, #288]	; (80042c8 <HAL_RCC_OscConfig+0x4dc>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041aa:	f7fd f867 	bl	800127c <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b2:	f7fd f863 	bl	800127c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e078      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c4:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1f0      	bne.n	80041b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	019b      	lsls	r3, r3, #6
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	3b01      	subs	r3, #1
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	061b      	lsls	r3, r3, #24
 80041f4:	4933      	ldr	r1, [pc, #204]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041fa:	4b33      	ldr	r3, [pc, #204]	; (80042c8 <HAL_RCC_OscConfig+0x4dc>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fd f83c 	bl	800127c <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004208:	f7fd f838 	bl	800127c <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e04d      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421a:	4b2a      	ldr	r3, [pc, #168]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0x41c>
 8004226:	e045      	b.n	80042b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004228:	4b27      	ldr	r3, [pc, #156]	; (80042c8 <HAL_RCC_OscConfig+0x4dc>)
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422e:	f7fd f825 	bl	800127c <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004236:	f7fd f821 	bl	800127c <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e036      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004248:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f0      	bne.n	8004236 <HAL_RCC_OscConfig+0x44a>
 8004254:	e02e      	b.n	80042b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e029      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004262:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <HAL_RCC_OscConfig+0x4d8>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	429a      	cmp	r2, r3
 8004274:	d11c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d115      	bne.n	80042b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800428a:	4013      	ands	r3, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004290:	4293      	cmp	r3, r2
 8004292:	d10d      	bne.n	80042b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d106      	bne.n	80042b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40007000 	.word	0x40007000
 80042c4:	40023800 	.word	0x40023800
 80042c8:	42470060 	.word	0x42470060

080042cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0cc      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042e0:	4b68      	ldr	r3, [pc, #416]	; (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d90c      	bls.n	8004308 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b65      	ldr	r3, [pc, #404]	; (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b63      	ldr	r3, [pc, #396]	; (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0b8      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d020      	beq.n	8004356 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004320:	4b59      	ldr	r3, [pc, #356]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4a58      	ldr	r2, [pc, #352]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800432a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004338:	4b53      	ldr	r3, [pc, #332]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	4a52      	ldr	r2, [pc, #328]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004342:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004344:	4b50      	ldr	r3, [pc, #320]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	494d      	ldr	r1, [pc, #308]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d044      	beq.n	80043ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d107      	bne.n	800437a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436a:	4b47      	ldr	r3, [pc, #284]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d119      	bne.n	80043aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e07f      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d003      	beq.n	800438a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004386:	2b03      	cmp	r3, #3
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438a:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e06f      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439a:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e067      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043aa:	4b37      	ldr	r3, [pc, #220]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f023 0203 	bic.w	r2, r3, #3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4934      	ldr	r1, [pc, #208]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043bc:	f7fc ff5e 	bl	800127c <HAL_GetTick>
 80043c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c2:	e00a      	b.n	80043da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c4:	f7fc ff5a 	bl	800127c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e04f      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043da:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 020c 	and.w	r2, r3, #12
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d1eb      	bne.n	80043c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043ec:	4b25      	ldr	r3, [pc, #148]	; (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d20c      	bcs.n	8004414 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fa:	4b22      	ldr	r3, [pc, #136]	; (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	4b20      	ldr	r3, [pc, #128]	; (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e032      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4916      	ldr	r1, [pc, #88]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	4313      	orrs	r3, r2
 8004430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	490e      	ldr	r1, [pc, #56]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004452:	f000 f821 	bl	8004498 <HAL_RCC_GetSysClockFreq>
 8004456:	4601      	mov	r1, r0
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	4a0a      	ldr	r2, [pc, #40]	; (800448c <HAL_RCC_ClockConfig+0x1c0>)
 8004464:	5cd3      	ldrb	r3, [r2, r3]
 8004466:	fa21 f303 	lsr.w	r3, r1, r3
 800446a:	4a09      	ldr	r2, [pc, #36]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 800446c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_RCC_ClockConfig+0x1c8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7fc febe 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40023c00 	.word	0x40023c00
 8004488:	40023800 	.word	0x40023800
 800448c:	0800865c 	.word	0x0800865c
 8004490:	20000000 	.word	0x20000000
 8004494:	20000004 	.word	0x20000004

08004498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	2300      	movs	r3, #0
 80044a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ae:	4b63      	ldr	r3, [pc, #396]	; (800463c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d007      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0x32>
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d008      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x38>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f040 80b4 	bne.w	800462c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044c4:	4b5e      	ldr	r3, [pc, #376]	; (8004640 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80044c6:	60bb      	str	r3, [r7, #8]
       break;
 80044c8:	e0b3      	b.n	8004632 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ca:	4b5e      	ldr	r3, [pc, #376]	; (8004644 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80044cc:	60bb      	str	r3, [r7, #8]
      break;
 80044ce:	e0b0      	b.n	8004632 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044d0:	4b5a      	ldr	r3, [pc, #360]	; (800463c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044da:	4b58      	ldr	r3, [pc, #352]	; (800463c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d04a      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e6:	4b55      	ldr	r3, [pc, #340]	; (800463c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	099b      	lsrs	r3, r3, #6
 80044ec:	f04f 0400 	mov.w	r4, #0
 80044f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	ea03 0501 	and.w	r5, r3, r1
 80044fc:	ea04 0602 	and.w	r6, r4, r2
 8004500:	4629      	mov	r1, r5
 8004502:	4632      	mov	r2, r6
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	f04f 0400 	mov.w	r4, #0
 800450c:	0154      	lsls	r4, r2, #5
 800450e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004512:	014b      	lsls	r3, r1, #5
 8004514:	4619      	mov	r1, r3
 8004516:	4622      	mov	r2, r4
 8004518:	1b49      	subs	r1, r1, r5
 800451a:	eb62 0206 	sbc.w	r2, r2, r6
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	f04f 0400 	mov.w	r4, #0
 8004526:	0194      	lsls	r4, r2, #6
 8004528:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800452c:	018b      	lsls	r3, r1, #6
 800452e:	1a5b      	subs	r3, r3, r1
 8004530:	eb64 0402 	sbc.w	r4, r4, r2
 8004534:	f04f 0100 	mov.w	r1, #0
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	00e2      	lsls	r2, r4, #3
 800453e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004542:	00d9      	lsls	r1, r3, #3
 8004544:	460b      	mov	r3, r1
 8004546:	4614      	mov	r4, r2
 8004548:	195b      	adds	r3, r3, r5
 800454a:	eb44 0406 	adc.w	r4, r4, r6
 800454e:	f04f 0100 	mov.w	r1, #0
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	0262      	lsls	r2, r4, #9
 8004558:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800455c:	0259      	lsls	r1, r3, #9
 800455e:	460b      	mov	r3, r1
 8004560:	4614      	mov	r4, r2
 8004562:	4618      	mov	r0, r3
 8004564:	4621      	mov	r1, r4
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f04f 0400 	mov.w	r4, #0
 800456c:	461a      	mov	r2, r3
 800456e:	4623      	mov	r3, r4
 8004570:	f7fb fe2a 	bl	80001c8 <__aeabi_uldivmod>
 8004574:	4603      	mov	r3, r0
 8004576:	460c      	mov	r4, r1
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	e049      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457c:	4b2f      	ldr	r3, [pc, #188]	; (800463c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	099b      	lsrs	r3, r3, #6
 8004582:	f04f 0400 	mov.w	r4, #0
 8004586:	f240 11ff 	movw	r1, #511	; 0x1ff
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	ea03 0501 	and.w	r5, r3, r1
 8004592:	ea04 0602 	and.w	r6, r4, r2
 8004596:	4629      	mov	r1, r5
 8004598:	4632      	mov	r2, r6
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	f04f 0400 	mov.w	r4, #0
 80045a2:	0154      	lsls	r4, r2, #5
 80045a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045a8:	014b      	lsls	r3, r1, #5
 80045aa:	4619      	mov	r1, r3
 80045ac:	4622      	mov	r2, r4
 80045ae:	1b49      	subs	r1, r1, r5
 80045b0:	eb62 0206 	sbc.w	r2, r2, r6
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	f04f 0400 	mov.w	r4, #0
 80045bc:	0194      	lsls	r4, r2, #6
 80045be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045c2:	018b      	lsls	r3, r1, #6
 80045c4:	1a5b      	subs	r3, r3, r1
 80045c6:	eb64 0402 	sbc.w	r4, r4, r2
 80045ca:	f04f 0100 	mov.w	r1, #0
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	00e2      	lsls	r2, r4, #3
 80045d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045d8:	00d9      	lsls	r1, r3, #3
 80045da:	460b      	mov	r3, r1
 80045dc:	4614      	mov	r4, r2
 80045de:	195b      	adds	r3, r3, r5
 80045e0:	eb44 0406 	adc.w	r4, r4, r6
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	02a2      	lsls	r2, r4, #10
 80045ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045f2:	0299      	lsls	r1, r3, #10
 80045f4:	460b      	mov	r3, r1
 80045f6:	4614      	mov	r4, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	4621      	mov	r1, r4
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f04f 0400 	mov.w	r4, #0
 8004602:	461a      	mov	r2, r3
 8004604:	4623      	mov	r3, r4
 8004606:	f7fb fddf 	bl	80001c8 <__aeabi_uldivmod>
 800460a:	4603      	mov	r3, r0
 800460c:	460c      	mov	r4, r1
 800460e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	0c1b      	lsrs	r3, r3, #16
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	3301      	adds	r3, #1
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	60bb      	str	r3, [r7, #8]
      break;
 800462a:	e002      	b.n	8004632 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800462c:	4b04      	ldr	r3, [pc, #16]	; (8004640 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800462e:	60bb      	str	r3, [r7, #8]
      break;
 8004630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004632:	68bb      	ldr	r3, [r7, #8]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800463c:	40023800 	.word	0x40023800
 8004640:	00f42400 	.word	0x00f42400
 8004644:	007a1200 	.word	0x007a1200

08004648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <HAL_RCC_GetHCLKFreq+0x14>)
 800464e:	681b      	ldr	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20000000 	.word	0x20000000

08004660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004664:	f7ff fff0 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 8004668:	4601      	mov	r1, r0
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0a9b      	lsrs	r3, r3, #10
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4a03      	ldr	r2, [pc, #12]	; (8004684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004676:	5cd3      	ldrb	r3, [r2, r3]
 8004678:	fa21 f303 	lsr.w	r3, r1, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40023800 	.word	0x40023800
 8004684:	0800866c 	.word	0x0800866c

08004688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800468c:	f7ff ffdc 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 8004690:	4601      	mov	r1, r0
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	0b5b      	lsrs	r3, r3, #13
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	4a03      	ldr	r2, [pc, #12]	; (80046ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800469e:	5cd3      	ldrb	r3, [r2, r3]
 80046a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40023800 	.word	0x40023800
 80046ac:	0800866c 	.word	0x0800866c

080046b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d035      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046d8:	4b62      	ldr	r3, [pc, #392]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046de:	f7fc fdcd 	bl	800127c <HAL_GetTick>
 80046e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046e4:	e008      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046e6:	f7fc fdc9 	bl	800127c <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e0b0      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046f8:	4b5b      	ldr	r3, [pc, #364]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	019a      	lsls	r2, r3, #6
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	071b      	lsls	r3, r3, #28
 8004710:	4955      	ldr	r1, [pc, #340]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004718:	4b52      	ldr	r3, [pc, #328]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800471a:	2201      	movs	r2, #1
 800471c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800471e:	f7fc fdad 	bl	800127c <HAL_GetTick>
 8004722:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004724:	e008      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004726:	f7fc fda9 	bl	800127c <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e090      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004738:	4b4b      	ldr	r3, [pc, #300]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8083 	beq.w	8004858 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	4b44      	ldr	r3, [pc, #272]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	4a43      	ldr	r2, [pc, #268]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800475c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004760:	6413      	str	r3, [r2, #64]	; 0x40
 8004762:	4b41      	ldr	r3, [pc, #260]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800476e:	4b3f      	ldr	r3, [pc, #252]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a3e      	ldr	r2, [pc, #248]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004778:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800477a:	f7fc fd7f 	bl	800127c <HAL_GetTick>
 800477e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004780:	e008      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004782:	f7fc fd7b 	bl	800127c <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e062      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004794:	4b35      	ldr	r3, [pc, #212]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047a0:	4b31      	ldr	r3, [pc, #196]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d02f      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d028      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047be:	4b2a      	ldr	r3, [pc, #168]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047c8:	4b29      	ldr	r3, [pc, #164]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ce:	4b28      	ldr	r3, [pc, #160]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047d4:	4a24      	ldr	r2, [pc, #144]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047da:	4b23      	ldr	r3, [pc, #140]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d114      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047e6:	f7fc fd49 	bl	800127c <HAL_GetTick>
 80047ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ec:	e00a      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fc fd45 	bl	800127c <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d901      	bls.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e02a      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004804:	4b18      	ldr	r3, [pc, #96]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0ee      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800481c:	d10d      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800481e:	4b12      	ldr	r3, [pc, #72]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800482e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004832:	490d      	ldr	r1, [pc, #52]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004834:	4313      	orrs	r3, r2
 8004836:	608b      	str	r3, [r1, #8]
 8004838:	e005      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004840:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004844:	6093      	str	r3, [r2, #8]
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004848:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004852:	4905      	ldr	r1, [pc, #20]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004854:	4313      	orrs	r3, r2
 8004856:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	42470068 	.word	0x42470068
 8004868:	40023800 	.word	0x40023800
 800486c:	40007000 	.word	0x40007000
 8004870:	42470e40 	.word	0x42470e40

08004874 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d13d      	bne.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004892:	4b22      	ldr	r3, [pc, #136]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800489a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d004      	beq.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d12f      	bne.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048a6:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048a8:	617b      	str	r3, [r7, #20]
          break;
 80048aa:	e02f      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048ac:	4b1b      	ldr	r3, [pc, #108]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b8:	d108      	bne.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048ba:	4b18      	ldr	r3, [pc, #96]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c2:	4a18      	ldr	r2, [pc, #96]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	e007      	b.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048cc:	4b13      	ldr	r3, [pc, #76]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d4:	4a14      	ldr	r2, [pc, #80]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048dc:	4b0f      	ldr	r3, [pc, #60]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e2:	099b      	lsrs	r3, r3, #6
 80048e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80048f0:	4b0a      	ldr	r3, [pc, #40]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f6:	0f1b      	lsrs	r3, r3, #28
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	617b      	str	r3, [r7, #20]
          break;
 8004904:	e002      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
          break;
 800490a:	bf00      	nop
        }
      }
      break;
 800490c:	bf00      	nop
    }
  }
  return frequency;
 800490e:	697b      	ldr	r3, [r7, #20]
}
 8004910:	4618      	mov	r0, r3
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40023800 	.word	0x40023800
 8004920:	00bb8000 	.word	0x00bb8000
 8004924:	007a1200 	.word	0x007a1200
 8004928:	00f42400 	.word	0x00f42400

0800492c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e056      	b.n	80049ec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fc fab7 	bl	8000ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004974:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	ea42 0103 	orr.w	r1, r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	0c1b      	lsrs	r3, r3, #16
 80049bc:	f003 0104 	and.w	r1, r3, #4
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_SPI_Transmit+0x22>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e11e      	b.n	8004c54 <HAL_SPI_Transmit+0x260>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a1e:	f7fc fc2d 	bl	800127c <HAL_GetTick>
 8004a22:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d002      	beq.n	8004a3a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a34:	2302      	movs	r3, #2
 8004a36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a38:	e103      	b.n	8004c42 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <HAL_SPI_Transmit+0x52>
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a4a:	e0fa      	b.n	8004c42 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2203      	movs	r2, #3
 8004a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	88fa      	ldrh	r2, [r7, #6]
 8004a64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a92:	d107      	bne.n	8004aa4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aa2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b40      	cmp	r3, #64	; 0x40
 8004ab0:	d007      	beq.n	8004ac2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aca:	d14b      	bne.n	8004b64 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <HAL_SPI_Transmit+0xe6>
 8004ad4:	8afb      	ldrh	r3, [r7, #22]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d13e      	bne.n	8004b58 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	881a      	ldrh	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	1c9a      	adds	r2, r3, #2
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004afe:	e02b      	b.n	8004b58 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d112      	bne.n	8004b34 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	881a      	ldrh	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	1c9a      	adds	r2, r3, #2
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b32:	e011      	b.n	8004b58 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b34:	f7fc fba2 	bl	800127c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d803      	bhi.n	8004b4c <HAL_SPI_Transmit+0x158>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4a:	d102      	bne.n	8004b52 <HAL_SPI_Transmit+0x15e>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b56:	e074      	b.n	8004c42 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1ce      	bne.n	8004b00 <HAL_SPI_Transmit+0x10c>
 8004b62:	e04c      	b.n	8004bfe <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HAL_SPI_Transmit+0x17e>
 8004b6c:	8afb      	ldrh	r3, [r7, #22]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d140      	bne.n	8004bf4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	7812      	ldrb	r2, [r2, #0]
 8004b7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b98:	e02c      	b.n	8004bf4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d113      	bne.n	8004bd0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	7812      	ldrb	r2, [r2, #0]
 8004bb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bce:	e011      	b.n	8004bf4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bd0:	f7fc fb54 	bl	800127c <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d803      	bhi.n	8004be8 <HAL_SPI_Transmit+0x1f4>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d102      	bne.n	8004bee <HAL_SPI_Transmit+0x1fa>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bf2:	e026      	b.n	8004c42 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1cd      	bne.n	8004b9a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	6839      	ldr	r1, [r7, #0]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fba4 	bl	8005350 <SPI_EndRxTxTransaction>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e000      	b.n	8004c42 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004c40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c52:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c78:	d112      	bne.n	8004ca0 <HAL_SPI_Receive+0x44>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10e      	bne.n	8004ca0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2204      	movs	r2, #4
 8004c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	4613      	mov	r3, r2
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f8e9 	bl	8004e6e <HAL_SPI_TransmitReceive>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	e0e2      	b.n	8004e66 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_SPI_Receive+0x52>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e0db      	b.n	8004e66 <HAL_SPI_Receive+0x20a>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb6:	f7fc fae1 	bl	800127c <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d002      	beq.n	8004cce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ccc:	e0c2      	b.n	8004e54 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_SPI_Receive+0x7e>
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d102      	bne.n	8004ce0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cde:	e0b9      	b.n	8004e54 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	88fa      	ldrh	r2, [r7, #6]
 8004cf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	88fa      	ldrh	r2, [r7, #6]
 8004cfe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d26:	d107      	bne.n	8004d38 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d42:	2b40      	cmp	r3, #64	; 0x40
 8004d44:	d007      	beq.n	8004d56 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d162      	bne.n	8004e24 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d5e:	e02e      	b.n	8004dbe <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d115      	bne.n	8004d9a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f103 020c 	add.w	r2, r3, #12
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	7812      	ldrb	r2, [r2, #0]
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d98:	e011      	b.n	8004dbe <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d9a:	f7fc fa6f 	bl	800127c <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d803      	bhi.n	8004db2 <HAL_SPI_Receive+0x156>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db0:	d102      	bne.n	8004db8 <HAL_SPI_Receive+0x15c>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d102      	bne.n	8004dbe <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dbc:	e04a      	b.n	8004e54 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1cb      	bne.n	8004d60 <HAL_SPI_Receive+0x104>
 8004dc8:	e031      	b.n	8004e2e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d113      	bne.n	8004e00 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	b292      	uxth	r2, r2
 8004de4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	1c9a      	adds	r2, r3, #2
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dfe:	e011      	b.n	8004e24 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e00:	f7fc fa3c 	bl	800127c <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d803      	bhi.n	8004e18 <HAL_SPI_Receive+0x1bc>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d102      	bne.n	8004e1e <HAL_SPI_Receive+0x1c2>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d102      	bne.n	8004e24 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e22:	e017      	b.n	8004e54 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1cd      	bne.n	8004dca <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	6839      	ldr	r1, [r7, #0]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fa27 	bl	8005286 <SPI_EndRxTransaction>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	75fb      	strb	r3, [r7, #23]
 8004e50:	e000      	b.n	8004e54 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004e52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b08c      	sub	sp, #48	; 0x30
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_SPI_TransmitReceive+0x26>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e18a      	b.n	80051aa <HAL_SPI_TransmitReceive+0x33c>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e9c:	f7fc f9ee 	bl	800127c <HAL_GetTick>
 8004ea0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004eb2:	887b      	ldrh	r3, [r7, #2]
 8004eb4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004eb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d00f      	beq.n	8004ede <HAL_SPI_TransmitReceive+0x70>
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ec4:	d107      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d103      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x68>
 8004ece:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d003      	beq.n	8004ede <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004edc:	e15b      	b.n	8005196 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <HAL_SPI_TransmitReceive+0x82>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_SPI_TransmitReceive+0x82>
 8004eea:	887b      	ldrh	r3, [r7, #2]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d103      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ef6:	e14e      	b.n	8005196 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d003      	beq.n	8004f0c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2205      	movs	r2, #5
 8004f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	887a      	ldrh	r2, [r7, #2]
 8004f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	887a      	ldrh	r2, [r7, #2]
 8004f22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	887a      	ldrh	r2, [r7, #2]
 8004f2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	887a      	ldrh	r2, [r7, #2]
 8004f34:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4c:	2b40      	cmp	r3, #64	; 0x40
 8004f4e:	d007      	beq.n	8004f60 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f68:	d178      	bne.n	800505c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_SPI_TransmitReceive+0x10a>
 8004f72:	8b7b      	ldrh	r3, [r7, #26]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d166      	bne.n	8005046 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	881a      	ldrh	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	1c9a      	adds	r2, r3, #2
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f9c:	e053      	b.n	8005046 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d11b      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x176>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d016      	beq.n	8004fe4 <HAL_SPI_TransmitReceive+0x176>
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d113      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	881a      	ldrh	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	1c9a      	adds	r2, r3, #2
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d119      	bne.n	8005026 <HAL_SPI_TransmitReceive+0x1b8>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d014      	beq.n	8005026 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	b292      	uxth	r2, r2
 8005008:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	1c9a      	adds	r2, r3, #2
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005022:	2301      	movs	r3, #1
 8005024:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005026:	f7fc f929 	bl	800127c <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005032:	429a      	cmp	r2, r3
 8005034:	d807      	bhi.n	8005046 <HAL_SPI_TransmitReceive+0x1d8>
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d003      	beq.n	8005046 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005044:	e0a7      	b.n	8005196 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1a6      	bne.n	8004f9e <HAL_SPI_TransmitReceive+0x130>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1a1      	bne.n	8004f9e <HAL_SPI_TransmitReceive+0x130>
 800505a:	e07c      	b.n	8005156 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_SPI_TransmitReceive+0x1fc>
 8005064:	8b7b      	ldrh	r3, [r7, #26]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d16b      	bne.n	8005142 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	7812      	ldrb	r2, [r2, #0]
 8005076:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005090:	e057      	b.n	8005142 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b02      	cmp	r3, #2
 800509e:	d11c      	bne.n	80050da <HAL_SPI_TransmitReceive+0x26c>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d017      	beq.n	80050da <HAL_SPI_TransmitReceive+0x26c>
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d114      	bne.n	80050da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	7812      	ldrb	r2, [r2, #0]
 80050bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d119      	bne.n	800511c <HAL_SPI_TransmitReceive+0x2ae>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d014      	beq.n	800511c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005118:	2301      	movs	r3, #1
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800511c:	f7fc f8ae 	bl	800127c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005128:	429a      	cmp	r2, r3
 800512a:	d803      	bhi.n	8005134 <HAL_SPI_TransmitReceive+0x2c6>
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d102      	bne.n	800513a <HAL_SPI_TransmitReceive+0x2cc>
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005140:	e029      	b.n	8005196 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1a2      	bne.n	8005092 <HAL_SPI_TransmitReceive+0x224>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d19d      	bne.n	8005092 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005158:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 f8f8 	bl	8005350 <SPI_EndRxTxTransaction>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d006      	beq.n	8005174 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005172:	e010      	b.n	8005196 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10b      	bne.n	8005194 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	e000      	b.n	8005196 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005194:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3730      	adds	r7, #48	; 0x30
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	4613      	mov	r3, r2
 80051c0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051c2:	e04c      	b.n	800525e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d048      	beq.n	800525e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80051cc:	f7fc f856 	bl	800127c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d902      	bls.n	80051e2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d13d      	bne.n	800525e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fa:	d111      	bne.n	8005220 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005204:	d004      	beq.n	8005210 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520e:	d107      	bne.n	8005220 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800521e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005228:	d10f      	bne.n	800524a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e00f      	b.n	800527e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4013      	ands	r3, r2
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	429a      	cmp	r2, r3
 800526c:	bf0c      	ite	eq
 800526e:	2301      	moveq	r3, #1
 8005270:	2300      	movne	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	461a      	mov	r2, r3
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	429a      	cmp	r2, r3
 800527a:	d1a3      	bne.n	80051c4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af02      	add	r7, sp, #8
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800529a:	d111      	bne.n	80052c0 <SPI_EndRxTransaction+0x3a>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a4:	d004      	beq.n	80052b0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ae:	d107      	bne.n	80052c0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052be:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c8:	d12a      	bne.n	8005320 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d2:	d012      	beq.n	80052fa <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2200      	movs	r2, #0
 80052dc:	2180      	movs	r1, #128	; 0x80
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7ff ff67 	bl	80051b2 <SPI_WaitFlagStateUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d02d      	beq.n	8005346 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ee:	f043 0220 	orr.w	r2, r3, #32
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e026      	b.n	8005348 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2200      	movs	r2, #0
 8005302:	2101      	movs	r1, #1
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7ff ff54 	bl	80051b2 <SPI_WaitFlagStateUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01a      	beq.n	8005346 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005314:	f043 0220 	orr.w	r2, r3, #32
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e013      	b.n	8005348 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2200      	movs	r2, #0
 8005328:	2101      	movs	r1, #1
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f7ff ff41 	bl	80051b2 <SPI_WaitFlagStateUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533a:	f043 0220 	orr.w	r2, r3, #32
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e000      	b.n	8005348 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af02      	add	r7, sp, #8
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800535c:	4b1b      	ldr	r3, [pc, #108]	; (80053cc <SPI_EndRxTxTransaction+0x7c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <SPI_EndRxTxTransaction+0x80>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	0d5b      	lsrs	r3, r3, #21
 8005368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800536c:	fb02 f303 	mul.w	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800537a:	d112      	bne.n	80053a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2200      	movs	r2, #0
 8005384:	2180      	movs	r1, #128	; 0x80
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff ff13 	bl	80051b2 <SPI_WaitFlagStateUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d016      	beq.n	80053c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	f043 0220 	orr.w	r2, r3, #32
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e00f      	b.n	80053c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b8:	2b80      	cmp	r3, #128	; 0x80
 80053ba:	d0f2      	beq.n	80053a2 <SPI_EndRxTxTransaction+0x52>
 80053bc:	e000      	b.n	80053c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80053be:	bf00      	nop
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000000 	.word	0x20000000
 80053d0:	165e9f81 	.word	0x165e9f81

080053d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e01d      	b.n	8005422 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fb fdae 	bl	8000f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f000 f82e 	bl	8005474 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2202      	movs	r2, #2
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b06      	cmp	r3, #6
 800544a:	d007      	beq.n	800545c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a40      	ldr	r2, [pc, #256]	; (8005588 <TIM_Base_SetConfig+0x114>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d013      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005492:	d00f      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a3d      	ldr	r2, [pc, #244]	; (800558c <TIM_Base_SetConfig+0x118>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00b      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a3c      	ldr	r2, [pc, #240]	; (8005590 <TIM_Base_SetConfig+0x11c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a3b      	ldr	r2, [pc, #236]	; (8005594 <TIM_Base_SetConfig+0x120>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a3a      	ldr	r2, [pc, #232]	; (8005598 <TIM_Base_SetConfig+0x124>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d108      	bne.n	80054c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a2f      	ldr	r2, [pc, #188]	; (8005588 <TIM_Base_SetConfig+0x114>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d02b      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d4:	d027      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a2c      	ldr	r2, [pc, #176]	; (800558c <TIM_Base_SetConfig+0x118>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d023      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a2b      	ldr	r2, [pc, #172]	; (8005590 <TIM_Base_SetConfig+0x11c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01f      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a2a      	ldr	r2, [pc, #168]	; (8005594 <TIM_Base_SetConfig+0x120>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01b      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a29      	ldr	r2, [pc, #164]	; (8005598 <TIM_Base_SetConfig+0x124>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d017      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a28      	ldr	r2, [pc, #160]	; (800559c <TIM_Base_SetConfig+0x128>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a27      	ldr	r2, [pc, #156]	; (80055a0 <TIM_Base_SetConfig+0x12c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00f      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a26      	ldr	r2, [pc, #152]	; (80055a4 <TIM_Base_SetConfig+0x130>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00b      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a25      	ldr	r2, [pc, #148]	; (80055a8 <TIM_Base_SetConfig+0x134>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d007      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a24      	ldr	r2, [pc, #144]	; (80055ac <TIM_Base_SetConfig+0x138>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d003      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a23      	ldr	r2, [pc, #140]	; (80055b0 <TIM_Base_SetConfig+0x13c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d108      	bne.n	8005538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a0a      	ldr	r2, [pc, #40]	; (8005588 <TIM_Base_SetConfig+0x114>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_Base_SetConfig+0xf8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a0c      	ldr	r2, [pc, #48]	; (8005598 <TIM_Base_SetConfig+0x124>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d103      	bne.n	8005574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	615a      	str	r2, [r3, #20]
}
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40010000 	.word	0x40010000
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800
 8005594:	40000c00 	.word	0x40000c00
 8005598:	40010400 	.word	0x40010400
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800
 80055a8:	40001800 	.word	0x40001800
 80055ac:	40001c00 	.word	0x40001c00
 80055b0:	40002000 	.word	0x40002000

080055b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e05a      	b.n	8005682 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a21      	ldr	r2, [pc, #132]	; (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d022      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005618:	d01d      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d018      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1b      	ldr	r2, [pc, #108]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1a      	ldr	r2, [pc, #104]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00e      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a18      	ldr	r2, [pc, #96]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d009      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a17      	ldr	r2, [pc, #92]	; (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d004      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d10c      	bne.n	8005670 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800565c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	4313      	orrs	r3, r2
 8005666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40010000 	.word	0x40010000
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800
 800569c:	40000c00 	.word	0x40000c00
 80056a0:	40010400 	.word	0x40010400
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40001800 	.word	0x40001800

080056ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e03f      	b.n	800573e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fb fc7a 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2224      	movs	r2, #36	; 0x24
 80056dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f90b 	bl	800590c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695a      	ldr	r2, [r3, #20]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b088      	sub	sp, #32
 800574a:	af02      	add	r7, sp, #8
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	603b      	str	r3, [r7, #0]
 8005752:	4613      	mov	r3, r2
 8005754:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b20      	cmp	r3, #32
 8005764:	f040 8083 	bne.w	800586e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <HAL_UART_Transmit+0x2e>
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e07b      	b.n	8005870 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_UART_Transmit+0x40>
 8005782:	2302      	movs	r3, #2
 8005784:	e074      	b.n	8005870 <HAL_UART_Transmit+0x12a>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2221      	movs	r2, #33	; 0x21
 8005798:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800579c:	f7fb fd6e 	bl	800127c <HAL_GetTick>
 80057a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	88fa      	ldrh	r2, [r7, #6]
 80057ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80057b6:	e042      	b.n	800583e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ce:	d122      	bne.n	8005816 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2200      	movs	r2, #0
 80057d8:	2180      	movs	r1, #128	; 0x80
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 f84c 	bl	8005878 <UART_WaitOnFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e042      	b.n	8005870 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	3302      	adds	r3, #2
 800580a:	60bb      	str	r3, [r7, #8]
 800580c:	e017      	b.n	800583e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	3301      	adds	r3, #1
 8005812:	60bb      	str	r3, [r7, #8]
 8005814:	e013      	b.n	800583e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2200      	movs	r2, #0
 800581e:	2180      	movs	r1, #128	; 0x80
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f829 	bl	8005878 <UART_WaitOnFlagUntilTimeout>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e01f      	b.n	8005870 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	60ba      	str	r2, [r7, #8]
 8005836:	781a      	ldrb	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1b7      	bne.n	80057b8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2200      	movs	r2, #0
 8005850:	2140      	movs	r1, #64	; 0x40
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 f810 	bl	8005878 <UART_WaitOnFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e006      	b.n	8005870 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	e000      	b.n	8005870 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800586e:	2302      	movs	r3, #2
  }
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005888:	e02c      	b.n	80058e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005890:	d028      	beq.n	80058e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d007      	beq.n	80058a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005898:	f7fb fcf0 	bl	800127c <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d21d      	bcs.n	80058e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e00f      	b.n	8005904 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	4013      	ands	r3, r2
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	bf0c      	ite	eq
 80058f4:	2301      	moveq	r3, #1
 80058f6:	2300      	movne	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d0c3      	beq.n	800588a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005910:	b085      	sub	sp, #20
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800594e:	f023 030c 	bic.w	r3, r3, #12
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	430b      	orrs	r3, r1
 800595a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597a:	f040 818b 	bne.w	8005c94 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4ac1      	ldr	r2, [pc, #772]	; (8005c88 <UART_SetConfig+0x37c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d005      	beq.n	8005994 <UART_SetConfig+0x88>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4abf      	ldr	r2, [pc, #764]	; (8005c8c <UART_SetConfig+0x380>)
 800598e:	4293      	cmp	r3, r2
 8005990:	f040 80bd 	bne.w	8005b0e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005994:	f7fe fe78 	bl	8004688 <HAL_RCC_GetPCLK2Freq>
 8005998:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	461d      	mov	r5, r3
 800599e:	f04f 0600 	mov.w	r6, #0
 80059a2:	46a8      	mov	r8, r5
 80059a4:	46b1      	mov	r9, r6
 80059a6:	eb18 0308 	adds.w	r3, r8, r8
 80059aa:	eb49 0409 	adc.w	r4, r9, r9
 80059ae:	4698      	mov	r8, r3
 80059b0:	46a1      	mov	r9, r4
 80059b2:	eb18 0805 	adds.w	r8, r8, r5
 80059b6:	eb49 0906 	adc.w	r9, r9, r6
 80059ba:	f04f 0100 	mov.w	r1, #0
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80059c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80059ce:	4688      	mov	r8, r1
 80059d0:	4691      	mov	r9, r2
 80059d2:	eb18 0005 	adds.w	r0, r8, r5
 80059d6:	eb49 0106 	adc.w	r1, r9, r6
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	461d      	mov	r5, r3
 80059e0:	f04f 0600 	mov.w	r6, #0
 80059e4:	196b      	adds	r3, r5, r5
 80059e6:	eb46 0406 	adc.w	r4, r6, r6
 80059ea:	461a      	mov	r2, r3
 80059ec:	4623      	mov	r3, r4
 80059ee:	f7fa fbeb 	bl	80001c8 <__aeabi_uldivmod>
 80059f2:	4603      	mov	r3, r0
 80059f4:	460c      	mov	r4, r1
 80059f6:	461a      	mov	r2, r3
 80059f8:	4ba5      	ldr	r3, [pc, #660]	; (8005c90 <UART_SetConfig+0x384>)
 80059fa:	fba3 2302 	umull	r2, r3, r3, r2
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	461d      	mov	r5, r3
 8005a08:	f04f 0600 	mov.w	r6, #0
 8005a0c:	46a9      	mov	r9, r5
 8005a0e:	46b2      	mov	sl, r6
 8005a10:	eb19 0309 	adds.w	r3, r9, r9
 8005a14:	eb4a 040a 	adc.w	r4, sl, sl
 8005a18:	4699      	mov	r9, r3
 8005a1a:	46a2      	mov	sl, r4
 8005a1c:	eb19 0905 	adds.w	r9, r9, r5
 8005a20:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a24:	f04f 0100 	mov.w	r1, #0
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a38:	4689      	mov	r9, r1
 8005a3a:	4692      	mov	sl, r2
 8005a3c:	eb19 0005 	adds.w	r0, r9, r5
 8005a40:	eb4a 0106 	adc.w	r1, sl, r6
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	461d      	mov	r5, r3
 8005a4a:	f04f 0600 	mov.w	r6, #0
 8005a4e:	196b      	adds	r3, r5, r5
 8005a50:	eb46 0406 	adc.w	r4, r6, r6
 8005a54:	461a      	mov	r2, r3
 8005a56:	4623      	mov	r3, r4
 8005a58:	f7fa fbb6 	bl	80001c8 <__aeabi_uldivmod>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	460c      	mov	r4, r1
 8005a60:	461a      	mov	r2, r3
 8005a62:	4b8b      	ldr	r3, [pc, #556]	; (8005c90 <UART_SetConfig+0x384>)
 8005a64:	fba3 1302 	umull	r1, r3, r3, r2
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	2164      	movs	r1, #100	; 0x64
 8005a6c:	fb01 f303 	mul.w	r3, r1, r3
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	3332      	adds	r3, #50	; 0x32
 8005a76:	4a86      	ldr	r2, [pc, #536]	; (8005c90 <UART_SetConfig+0x384>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a84:	4498      	add	r8, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	461d      	mov	r5, r3
 8005a8a:	f04f 0600 	mov.w	r6, #0
 8005a8e:	46a9      	mov	r9, r5
 8005a90:	46b2      	mov	sl, r6
 8005a92:	eb19 0309 	adds.w	r3, r9, r9
 8005a96:	eb4a 040a 	adc.w	r4, sl, sl
 8005a9a:	4699      	mov	r9, r3
 8005a9c:	46a2      	mov	sl, r4
 8005a9e:	eb19 0905 	adds.w	r9, r9, r5
 8005aa2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005aa6:	f04f 0100 	mov.w	r1, #0
 8005aaa:	f04f 0200 	mov.w	r2, #0
 8005aae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ab2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ab6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005aba:	4689      	mov	r9, r1
 8005abc:	4692      	mov	sl, r2
 8005abe:	eb19 0005 	adds.w	r0, r9, r5
 8005ac2:	eb4a 0106 	adc.w	r1, sl, r6
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	461d      	mov	r5, r3
 8005acc:	f04f 0600 	mov.w	r6, #0
 8005ad0:	196b      	adds	r3, r5, r5
 8005ad2:	eb46 0406 	adc.w	r4, r6, r6
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4623      	mov	r3, r4
 8005ada:	f7fa fb75 	bl	80001c8 <__aeabi_uldivmod>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4b6a      	ldr	r3, [pc, #424]	; (8005c90 <UART_SetConfig+0x384>)
 8005ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	2164      	movs	r1, #100	; 0x64
 8005aee:	fb01 f303 	mul.w	r3, r1, r3
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	3332      	adds	r3, #50	; 0x32
 8005af8:	4a65      	ldr	r2, [pc, #404]	; (8005c90 <UART_SetConfig+0x384>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	f003 0207 	and.w	r2, r3, #7
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4442      	add	r2, r8
 8005b0a:	609a      	str	r2, [r3, #8]
 8005b0c:	e26f      	b.n	8005fee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b0e:	f7fe fda7 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 8005b12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	461d      	mov	r5, r3
 8005b18:	f04f 0600 	mov.w	r6, #0
 8005b1c:	46a8      	mov	r8, r5
 8005b1e:	46b1      	mov	r9, r6
 8005b20:	eb18 0308 	adds.w	r3, r8, r8
 8005b24:	eb49 0409 	adc.w	r4, r9, r9
 8005b28:	4698      	mov	r8, r3
 8005b2a:	46a1      	mov	r9, r4
 8005b2c:	eb18 0805 	adds.w	r8, r8, r5
 8005b30:	eb49 0906 	adc.w	r9, r9, r6
 8005b34:	f04f 0100 	mov.w	r1, #0
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b48:	4688      	mov	r8, r1
 8005b4a:	4691      	mov	r9, r2
 8005b4c:	eb18 0005 	adds.w	r0, r8, r5
 8005b50:	eb49 0106 	adc.w	r1, r9, r6
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	461d      	mov	r5, r3
 8005b5a:	f04f 0600 	mov.w	r6, #0
 8005b5e:	196b      	adds	r3, r5, r5
 8005b60:	eb46 0406 	adc.w	r4, r6, r6
 8005b64:	461a      	mov	r2, r3
 8005b66:	4623      	mov	r3, r4
 8005b68:	f7fa fb2e 	bl	80001c8 <__aeabi_uldivmod>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	461a      	mov	r2, r3
 8005b72:	4b47      	ldr	r3, [pc, #284]	; (8005c90 <UART_SetConfig+0x384>)
 8005b74:	fba3 2302 	umull	r2, r3, r3, r2
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	461d      	mov	r5, r3
 8005b82:	f04f 0600 	mov.w	r6, #0
 8005b86:	46a9      	mov	r9, r5
 8005b88:	46b2      	mov	sl, r6
 8005b8a:	eb19 0309 	adds.w	r3, r9, r9
 8005b8e:	eb4a 040a 	adc.w	r4, sl, sl
 8005b92:	4699      	mov	r9, r3
 8005b94:	46a2      	mov	sl, r4
 8005b96:	eb19 0905 	adds.w	r9, r9, r5
 8005b9a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b9e:	f04f 0100 	mov.w	r1, #0
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005baa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bb2:	4689      	mov	r9, r1
 8005bb4:	4692      	mov	sl, r2
 8005bb6:	eb19 0005 	adds.w	r0, r9, r5
 8005bba:	eb4a 0106 	adc.w	r1, sl, r6
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	461d      	mov	r5, r3
 8005bc4:	f04f 0600 	mov.w	r6, #0
 8005bc8:	196b      	adds	r3, r5, r5
 8005bca:	eb46 0406 	adc.w	r4, r6, r6
 8005bce:	461a      	mov	r2, r3
 8005bd0:	4623      	mov	r3, r4
 8005bd2:	f7fa faf9 	bl	80001c8 <__aeabi_uldivmod>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	460c      	mov	r4, r1
 8005bda:	461a      	mov	r2, r3
 8005bdc:	4b2c      	ldr	r3, [pc, #176]	; (8005c90 <UART_SetConfig+0x384>)
 8005bde:	fba3 1302 	umull	r1, r3, r3, r2
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	2164      	movs	r1, #100	; 0x64
 8005be6:	fb01 f303 	mul.w	r3, r1, r3
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	3332      	adds	r3, #50	; 0x32
 8005bf0:	4a27      	ldr	r2, [pc, #156]	; (8005c90 <UART_SetConfig+0x384>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bfe:	4498      	add	r8, r3
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	461d      	mov	r5, r3
 8005c04:	f04f 0600 	mov.w	r6, #0
 8005c08:	46a9      	mov	r9, r5
 8005c0a:	46b2      	mov	sl, r6
 8005c0c:	eb19 0309 	adds.w	r3, r9, r9
 8005c10:	eb4a 040a 	adc.w	r4, sl, sl
 8005c14:	4699      	mov	r9, r3
 8005c16:	46a2      	mov	sl, r4
 8005c18:	eb19 0905 	adds.w	r9, r9, r5
 8005c1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c20:	f04f 0100 	mov.w	r1, #0
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c34:	4689      	mov	r9, r1
 8005c36:	4692      	mov	sl, r2
 8005c38:	eb19 0005 	adds.w	r0, r9, r5
 8005c3c:	eb4a 0106 	adc.w	r1, sl, r6
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	461d      	mov	r5, r3
 8005c46:	f04f 0600 	mov.w	r6, #0
 8005c4a:	196b      	adds	r3, r5, r5
 8005c4c:	eb46 0406 	adc.w	r4, r6, r6
 8005c50:	461a      	mov	r2, r3
 8005c52:	4623      	mov	r3, r4
 8005c54:	f7fa fab8 	bl	80001c8 <__aeabi_uldivmod>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <UART_SetConfig+0x384>)
 8005c60:	fba3 1302 	umull	r1, r3, r3, r2
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	2164      	movs	r1, #100	; 0x64
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	3332      	adds	r3, #50	; 0x32
 8005c72:	4a07      	ldr	r2, [pc, #28]	; (8005c90 <UART_SetConfig+0x384>)
 8005c74:	fba2 2303 	umull	r2, r3, r2, r3
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	f003 0207 	and.w	r2, r3, #7
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4442      	add	r2, r8
 8005c84:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005c86:	e1b2      	b.n	8005fee <UART_SetConfig+0x6e2>
 8005c88:	40011000 	.word	0x40011000
 8005c8c:	40011400 	.word	0x40011400
 8005c90:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4ad7      	ldr	r2, [pc, #860]	; (8005ff8 <UART_SetConfig+0x6ec>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d005      	beq.n	8005caa <UART_SetConfig+0x39e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4ad6      	ldr	r2, [pc, #856]	; (8005ffc <UART_SetConfig+0x6f0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	f040 80d1 	bne.w	8005e4c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005caa:	f7fe fced 	bl	8004688 <HAL_RCC_GetPCLK2Freq>
 8005cae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	469a      	mov	sl, r3
 8005cb4:	f04f 0b00 	mov.w	fp, #0
 8005cb8:	46d0      	mov	r8, sl
 8005cba:	46d9      	mov	r9, fp
 8005cbc:	eb18 0308 	adds.w	r3, r8, r8
 8005cc0:	eb49 0409 	adc.w	r4, r9, r9
 8005cc4:	4698      	mov	r8, r3
 8005cc6:	46a1      	mov	r9, r4
 8005cc8:	eb18 080a 	adds.w	r8, r8, sl
 8005ccc:	eb49 090b 	adc.w	r9, r9, fp
 8005cd0:	f04f 0100 	mov.w	r1, #0
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cdc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ce0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ce4:	4688      	mov	r8, r1
 8005ce6:	4691      	mov	r9, r2
 8005ce8:	eb1a 0508 	adds.w	r5, sl, r8
 8005cec:	eb4b 0609 	adc.w	r6, fp, r9
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	f04f 0300 	mov.w	r3, #0
 8005cfe:	f04f 0400 	mov.w	r4, #0
 8005d02:	0094      	lsls	r4, r2, #2
 8005d04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d08:	008b      	lsls	r3, r1, #2
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	4623      	mov	r3, r4
 8005d0e:	4628      	mov	r0, r5
 8005d10:	4631      	mov	r1, r6
 8005d12:	f7fa fa59 	bl	80001c8 <__aeabi_uldivmod>
 8005d16:	4603      	mov	r3, r0
 8005d18:	460c      	mov	r4, r1
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	4bb8      	ldr	r3, [pc, #736]	; (8006000 <UART_SetConfig+0x6f4>)
 8005d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	469b      	mov	fp, r3
 8005d2c:	f04f 0c00 	mov.w	ip, #0
 8005d30:	46d9      	mov	r9, fp
 8005d32:	46e2      	mov	sl, ip
 8005d34:	eb19 0309 	adds.w	r3, r9, r9
 8005d38:	eb4a 040a 	adc.w	r4, sl, sl
 8005d3c:	4699      	mov	r9, r3
 8005d3e:	46a2      	mov	sl, r4
 8005d40:	eb19 090b 	adds.w	r9, r9, fp
 8005d44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d48:	f04f 0100 	mov.w	r1, #0
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d5c:	4689      	mov	r9, r1
 8005d5e:	4692      	mov	sl, r2
 8005d60:	eb1b 0509 	adds.w	r5, fp, r9
 8005d64:	eb4c 060a 	adc.w	r6, ip, sl
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	f04f 0400 	mov.w	r4, #0
 8005d7a:	0094      	lsls	r4, r2, #2
 8005d7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d80:	008b      	lsls	r3, r1, #2
 8005d82:	461a      	mov	r2, r3
 8005d84:	4623      	mov	r3, r4
 8005d86:	4628      	mov	r0, r5
 8005d88:	4631      	mov	r1, r6
 8005d8a:	f7fa fa1d 	bl	80001c8 <__aeabi_uldivmod>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	460c      	mov	r4, r1
 8005d92:	461a      	mov	r2, r3
 8005d94:	4b9a      	ldr	r3, [pc, #616]	; (8006000 <UART_SetConfig+0x6f4>)
 8005d96:	fba3 1302 	umull	r1, r3, r3, r2
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	2164      	movs	r1, #100	; 0x64
 8005d9e:	fb01 f303 	mul.w	r3, r1, r3
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	3332      	adds	r3, #50	; 0x32
 8005da8:	4a95      	ldr	r2, [pc, #596]	; (8006000 <UART_SetConfig+0x6f4>)
 8005daa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005db4:	4498      	add	r8, r3
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	469b      	mov	fp, r3
 8005dba:	f04f 0c00 	mov.w	ip, #0
 8005dbe:	46d9      	mov	r9, fp
 8005dc0:	46e2      	mov	sl, ip
 8005dc2:	eb19 0309 	adds.w	r3, r9, r9
 8005dc6:	eb4a 040a 	adc.w	r4, sl, sl
 8005dca:	4699      	mov	r9, r3
 8005dcc:	46a2      	mov	sl, r4
 8005dce:	eb19 090b 	adds.w	r9, r9, fp
 8005dd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005dd6:	f04f 0100 	mov.w	r1, #0
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005de2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005de6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dea:	4689      	mov	r9, r1
 8005dec:	4692      	mov	sl, r2
 8005dee:	eb1b 0509 	adds.w	r5, fp, r9
 8005df2:	eb4c 060a 	adc.w	r6, ip, sl
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	f04f 0400 	mov.w	r4, #0
 8005e08:	0094      	lsls	r4, r2, #2
 8005e0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e0e:	008b      	lsls	r3, r1, #2
 8005e10:	461a      	mov	r2, r3
 8005e12:	4623      	mov	r3, r4
 8005e14:	4628      	mov	r0, r5
 8005e16:	4631      	mov	r1, r6
 8005e18:	f7fa f9d6 	bl	80001c8 <__aeabi_uldivmod>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	461a      	mov	r2, r3
 8005e22:	4b77      	ldr	r3, [pc, #476]	; (8006000 <UART_SetConfig+0x6f4>)
 8005e24:	fba3 1302 	umull	r1, r3, r3, r2
 8005e28:	095b      	lsrs	r3, r3, #5
 8005e2a:	2164      	movs	r1, #100	; 0x64
 8005e2c:	fb01 f303 	mul.w	r3, r1, r3
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	3332      	adds	r3, #50	; 0x32
 8005e36:	4a72      	ldr	r2, [pc, #456]	; (8006000 <UART_SetConfig+0x6f4>)
 8005e38:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3c:	095b      	lsrs	r3, r3, #5
 8005e3e:	f003 020f 	and.w	r2, r3, #15
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4442      	add	r2, r8
 8005e48:	609a      	str	r2, [r3, #8]
 8005e4a:	e0d0      	b.n	8005fee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e4c:	f7fe fc08 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 8005e50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	469a      	mov	sl, r3
 8005e56:	f04f 0b00 	mov.w	fp, #0
 8005e5a:	46d0      	mov	r8, sl
 8005e5c:	46d9      	mov	r9, fp
 8005e5e:	eb18 0308 	adds.w	r3, r8, r8
 8005e62:	eb49 0409 	adc.w	r4, r9, r9
 8005e66:	4698      	mov	r8, r3
 8005e68:	46a1      	mov	r9, r4
 8005e6a:	eb18 080a 	adds.w	r8, r8, sl
 8005e6e:	eb49 090b 	adc.w	r9, r9, fp
 8005e72:	f04f 0100 	mov.w	r1, #0
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e86:	4688      	mov	r8, r1
 8005e88:	4691      	mov	r9, r2
 8005e8a:	eb1a 0508 	adds.w	r5, sl, r8
 8005e8e:	eb4b 0609 	adc.w	r6, fp, r9
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	4619      	mov	r1, r3
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	f04f 0400 	mov.w	r4, #0
 8005ea4:	0094      	lsls	r4, r2, #2
 8005ea6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005eaa:	008b      	lsls	r3, r1, #2
 8005eac:	461a      	mov	r2, r3
 8005eae:	4623      	mov	r3, r4
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	f7fa f988 	bl	80001c8 <__aeabi_uldivmod>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	460c      	mov	r4, r1
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	4b50      	ldr	r3, [pc, #320]	; (8006000 <UART_SetConfig+0x6f4>)
 8005ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	469b      	mov	fp, r3
 8005ece:	f04f 0c00 	mov.w	ip, #0
 8005ed2:	46d9      	mov	r9, fp
 8005ed4:	46e2      	mov	sl, ip
 8005ed6:	eb19 0309 	adds.w	r3, r9, r9
 8005eda:	eb4a 040a 	adc.w	r4, sl, sl
 8005ede:	4699      	mov	r9, r3
 8005ee0:	46a2      	mov	sl, r4
 8005ee2:	eb19 090b 	adds.w	r9, r9, fp
 8005ee6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005eea:	f04f 0100 	mov.w	r1, #0
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ef6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005efa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005efe:	4689      	mov	r9, r1
 8005f00:	4692      	mov	sl, r2
 8005f02:	eb1b 0509 	adds.w	r5, fp, r9
 8005f06:	eb4c 060a 	adc.w	r6, ip, sl
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	f04f 0300 	mov.w	r3, #0
 8005f18:	f04f 0400 	mov.w	r4, #0
 8005f1c:	0094      	lsls	r4, r2, #2
 8005f1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f22:	008b      	lsls	r3, r1, #2
 8005f24:	461a      	mov	r2, r3
 8005f26:	4623      	mov	r3, r4
 8005f28:	4628      	mov	r0, r5
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	f7fa f94c 	bl	80001c8 <__aeabi_uldivmod>
 8005f30:	4603      	mov	r3, r0
 8005f32:	460c      	mov	r4, r1
 8005f34:	461a      	mov	r2, r3
 8005f36:	4b32      	ldr	r3, [pc, #200]	; (8006000 <UART_SetConfig+0x6f4>)
 8005f38:	fba3 1302 	umull	r1, r3, r3, r2
 8005f3c:	095b      	lsrs	r3, r3, #5
 8005f3e:	2164      	movs	r1, #100	; 0x64
 8005f40:	fb01 f303 	mul.w	r3, r1, r3
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	3332      	adds	r3, #50	; 0x32
 8005f4a:	4a2d      	ldr	r2, [pc, #180]	; (8006000 <UART_SetConfig+0x6f4>)
 8005f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f56:	4498      	add	r8, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	469b      	mov	fp, r3
 8005f5c:	f04f 0c00 	mov.w	ip, #0
 8005f60:	46d9      	mov	r9, fp
 8005f62:	46e2      	mov	sl, ip
 8005f64:	eb19 0309 	adds.w	r3, r9, r9
 8005f68:	eb4a 040a 	adc.w	r4, sl, sl
 8005f6c:	4699      	mov	r9, r3
 8005f6e:	46a2      	mov	sl, r4
 8005f70:	eb19 090b 	adds.w	r9, r9, fp
 8005f74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f78:	f04f 0100 	mov.w	r1, #0
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f8c:	4689      	mov	r9, r1
 8005f8e:	4692      	mov	sl, r2
 8005f90:	eb1b 0509 	adds.w	r5, fp, r9
 8005f94:	eb4c 060a 	adc.w	r6, ip, sl
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	f04f 0400 	mov.w	r4, #0
 8005faa:	0094      	lsls	r4, r2, #2
 8005fac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fb0:	008b      	lsls	r3, r1, #2
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4623      	mov	r3, r4
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	4631      	mov	r1, r6
 8005fba:	f7fa f905 	bl	80001c8 <__aeabi_uldivmod>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	4b0e      	ldr	r3, [pc, #56]	; (8006000 <UART_SetConfig+0x6f4>)
 8005fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2164      	movs	r1, #100	; 0x64
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	3332      	adds	r3, #50	; 0x32
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <UART_SetConfig+0x6f4>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	f003 020f 	and.w	r2, r3, #15
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4442      	add	r2, r8
 8005fea:	609a      	str	r2, [r3, #8]
}
 8005fec:	e7ff      	b.n	8005fee <UART_SetConfig+0x6e2>
 8005fee:	bf00      	nop
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff8:	40011000 	.word	0x40011000
 8005ffc:	40011400 	.word	0x40011400
 8006000:	51eb851f 	.word	0x51eb851f

08006004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006004:	b084      	sub	sp, #16
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	f107 001c 	add.w	r0, r7, #28
 8006012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	2b01      	cmp	r3, #1
 800601a:	d122      	bne.n	8006062 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006046:	2b01      	cmp	r3, #1
 8006048:	d105      	bne.n	8006056 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f94a 	bl	80062f0 <USB_CoreReset>
 800605c:	4603      	mov	r3, r0
 800605e:	73fb      	strb	r3, [r7, #15]
 8006060:	e01a      	b.n	8006098 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f93e 	bl	80062f0 <USB_CoreReset>
 8006074:	4603      	mov	r3, r0
 8006076:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	639a      	str	r2, [r3, #56]	; 0x38
 800608a:	e005      	b.n	8006098 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	2b01      	cmp	r3, #1
 800609c:	d10b      	bne.n	80060b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f043 0206 	orr.w	r2, r3, #6
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f043 0220 	orr.w	r2, r3, #32
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060c2:	b004      	add	sp, #16
 80060c4:	4770      	bx	lr

080060c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f043 0201 	orr.w	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f023 0201 	bic.w	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	460b      	mov	r3, r1
 8006114:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d106      	bne.n	8006136 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60da      	str	r2, [r3, #12]
 8006134:	e00b      	b.n	800614e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]
 8006148:	e001      	b.n	800614e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e003      	b.n	8006156 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800614e:	2032      	movs	r0, #50	; 0x32
 8006150:	f7fb f8a0 	bl	8001294 <HAL_Delay>

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	019b      	lsls	r3, r3, #6
 8006172:	f043 0220 	orr.w	r2, r3, #32
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3301      	adds	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4a09      	ldr	r2, [pc, #36]	; (80061a8 <USB_FlushTxFifo+0x48>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d901      	bls.n	800618c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e006      	b.n	800619a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b20      	cmp	r3, #32
 8006196:	d0f0      	beq.n	800617a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	00030d40 	.word	0x00030d40

080061ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2210      	movs	r2, #16
 80061bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3301      	adds	r3, #1
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4a09      	ldr	r2, [pc, #36]	; (80061ec <USB_FlushRxFifo+0x40>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d901      	bls.n	80061d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e006      	b.n	80061de <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	2b10      	cmp	r3, #16
 80061da:	d0f0      	beq.n	80061be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	00030d40 	.word	0x00030d40

080061f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b089      	sub	sp, #36	; 0x24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	4611      	mov	r1, r2
 80061fc:	461a      	mov	r2, r3
 80061fe:	460b      	mov	r3, r1
 8006200:	71fb      	strb	r3, [r7, #7]
 8006202:	4613      	mov	r3, r2
 8006204:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800620e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006212:	2b00      	cmp	r3, #0
 8006214:	d11a      	bne.n	800624c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006216:	88bb      	ldrh	r3, [r7, #4]
 8006218:	3303      	adds	r3, #3
 800621a:	089b      	lsrs	r3, r3, #2
 800621c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800621e:	2300      	movs	r3, #0
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	e00f      	b.n	8006244 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006224:	79fb      	ldrb	r3, [r7, #7]
 8006226:	031a      	lsls	r2, r3, #12
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	4413      	add	r3, r2
 800622c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006230:	461a      	mov	r2, r3
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3304      	adds	r3, #4
 800623c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	3301      	adds	r3, #1
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	429a      	cmp	r2, r3
 800624a:	d3eb      	bcc.n	8006224 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3724      	adds	r7, #36	; 0x24
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800625a:	b480      	push	{r7}
 800625c:	b089      	sub	sp, #36	; 0x24
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	4613      	mov	r3, r2
 8006266:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	3303      	adds	r3, #3
 8006274:	089b      	lsrs	r3, r3, #2
 8006276:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006278:	2300      	movs	r3, #0
 800627a:	61bb      	str	r3, [r7, #24]
 800627c:	e00b      	b.n	8006296 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	601a      	str	r2, [r3, #0]
    pDest++;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	3304      	adds	r3, #4
 800628e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	3301      	adds	r3, #1
 8006294:	61bb      	str	r3, [r7, #24]
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	429a      	cmp	r2, r3
 800629c:	d3ef      	bcc.n	800627e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800629e:	69fb      	ldr	r3, [r7, #28]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3724      	adds	r7, #36	; 0x24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4013      	ands	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062c4:	68fb      	ldr	r3, [r7, #12]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	f003 0301 	and.w	r3, r3, #1
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
	...

080062f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4a13      	ldr	r2, [pc, #76]	; (8006354 <USB_CoreReset+0x64>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e01b      	b.n	8006346 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	daf2      	bge.n	80062fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f043 0201 	orr.w	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3301      	adds	r3, #1
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a09      	ldr	r2, [pc, #36]	; (8006354 <USB_CoreReset+0x64>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d901      	bls.n	8006338 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e006      	b.n	8006346 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b01      	cmp	r3, #1
 8006342:	d0f0      	beq.n	8006326 <USB_CoreReset+0x36>

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	00030d40 	.word	0x00030d40

08006358 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006358:	b084      	sub	sp, #16
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	f107 001c 	add.w	r0, r7, #28
 8006366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006374:	461a      	mov	r2, r3
 8006376:	2300      	movs	r3, #0
 8006378:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d018      	beq.n	80063dc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d10a      	bne.n	80063c6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063be:	f043 0304 	orr.w	r3, r3, #4
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	e014      	b.n	80063f0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063d4:	f023 0304 	bic.w	r3, r3, #4
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	e009      	b.n	80063f0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063ea:	f023 0304 	bic.w	r3, r3, #4
 80063ee:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80063f0:	2110      	movs	r1, #16
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff feb4 	bl	8006160 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff fed7 	bl	80061ac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	e015      	b.n	8006430 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4413      	add	r3, r2
 800640c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006410:	461a      	mov	r2, r3
 8006412:	f04f 33ff 	mov.w	r3, #4294967295
 8006416:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	461a      	mov	r2, r3
 8006426:	2300      	movs	r3, #0
 8006428:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3301      	adds	r3, #1
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	429a      	cmp	r2, r3
 8006436:	d3e5      	bcc.n	8006404 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006438:	2101      	movs	r1, #1
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f882 	bl	8006544 <USB_DriveVbus>

  HAL_Delay(200U);
 8006440:	20c8      	movs	r0, #200	; 0xc8
 8006442:	f7fa ff27 	bl	8001294 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f04f 32ff 	mov.w	r2, #4294967295
 8006452:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006466:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a14      	ldr	r2, [pc, #80]	; (80064bc <USB_HostInit+0x164>)
 800646c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a13      	ldr	r2, [pc, #76]	; (80064c0 <USB_HostInit+0x168>)
 8006472:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006476:	e009      	b.n	800648c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2280      	movs	r2, #128	; 0x80
 800647c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a10      	ldr	r2, [pc, #64]	; (80064c4 <USB_HostInit+0x16c>)
 8006482:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a10      	ldr	r2, [pc, #64]	; (80064c8 <USB_HostInit+0x170>)
 8006488:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	2b00      	cmp	r3, #0
 8006490:	d105      	bne.n	800649e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f043 0210 	orr.w	r2, r3, #16
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699a      	ldr	r2, [r3, #24]
 80064a2:	4b0a      	ldr	r3, [pc, #40]	; (80064cc <USB_HostInit+0x174>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064b6:	b004      	add	sp, #16
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	01000200 	.word	0x01000200
 80064c0:	00e00300 	.word	0x00e00300
 80064c4:	00600080 	.word	0x00600080
 80064c8:	004000e0 	.word	0x004000e0
 80064cc:	a3200008 	.word	0xa3200008

080064d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	68f9      	ldr	r1, [r7, #12]
 8006504:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006508:	4313      	orrs	r3, r2
 800650a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d107      	bne.n	8006522 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006518:	461a      	mov	r2, r3
 800651a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800651e:	6053      	str	r3, [r2, #4]
 8006520:	e009      	b.n	8006536 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006522:	78fb      	ldrb	r3, [r7, #3]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d106      	bne.n	8006536 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800652e:	461a      	mov	r2, r3
 8006530:	f241 7370 	movw	r3, #6000	; 0x1770
 8006534:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006568:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d109      	bne.n	8006588 <USB_DriveVbus+0x44>
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d106      	bne.n	8006588 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006582:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006586:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800658e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006592:	d109      	bne.n	80065a8 <USB_DriveVbus+0x64>
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	b29b      	uxth	r3, r3
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	4608      	mov	r0, r1
 80065e2:	4611      	mov	r1, r2
 80065e4:	461a      	mov	r2, r3
 80065e6:	4603      	mov	r3, r0
 80065e8:	70fb      	strb	r3, [r7, #3]
 80065ea:	460b      	mov	r3, r1
 80065ec:	70bb      	strb	r3, [r7, #2]
 80065ee:	4613      	mov	r3, r2
 80065f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	4413      	add	r3, r2
 8006602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006606:	461a      	mov	r2, r3
 8006608:	f04f 33ff 	mov.w	r3, #4294967295
 800660c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800660e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006612:	2b03      	cmp	r3, #3
 8006614:	d87e      	bhi.n	8006714 <USB_HC_Init+0x13c>
 8006616:	a201      	add	r2, pc, #4	; (adr r2, 800661c <USB_HC_Init+0x44>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	0800662d 	.word	0x0800662d
 8006620:	080066d7 	.word	0x080066d7
 8006624:	0800662d 	.word	0x0800662d
 8006628:	08006699 	.word	0x08006699
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4413      	add	r3, r2
 8006634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006638:	461a      	mov	r2, r3
 800663a:	f240 439d 	movw	r3, #1181	; 0x49d
 800663e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006640:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006644:	2b00      	cmp	r3, #0
 8006646:	da10      	bge.n	800666a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4413      	add	r3, r2
 8006650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	78fa      	ldrb	r2, [r7, #3]
 8006658:	0151      	lsls	r1, r2, #5
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	440a      	add	r2, r1
 800665e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006666:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006668:	e057      	b.n	800671a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006672:	2b00      	cmp	r3, #0
 8006674:	d051      	beq.n	800671a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4413      	add	r3, r2
 800667e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	78fa      	ldrb	r2, [r7, #3]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	440a      	add	r2, r1
 800668c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006690:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006694:	60d3      	str	r3, [r2, #12]
      break;
 8006696:	e040      	b.n	800671a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a4:	461a      	mov	r2, r3
 80066a6:	f240 639d 	movw	r3, #1693	; 0x69d
 80066aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80066ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	da34      	bge.n	800671e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	78fa      	ldrb	r2, [r7, #3]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80066d4:	e023      	b.n	800671e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066d6:	78fb      	ldrb	r3, [r7, #3]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e2:	461a      	mov	r2, r3
 80066e4:	f240 2325 	movw	r3, #549	; 0x225
 80066e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80066ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	da17      	bge.n	8006722 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	78fa      	ldrb	r2, [r7, #3]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	440a      	add	r2, r1
 8006708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800670c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006710:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006712:	e006      	b.n	8006722 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	75fb      	strb	r3, [r7, #23]
      break;
 8006718:	e004      	b.n	8006724 <USB_HC_Init+0x14c>
      break;
 800671a:	bf00      	nop
 800671c:	e002      	b.n	8006724 <USB_HC_Init+0x14c>
      break;
 800671e:	bf00      	nop
 8006720:	e000      	b.n	8006724 <USB_HC_Init+0x14c>
      break;
 8006722:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	2101      	movs	r1, #1
 8006734:	fa01 f303 	lsl.w	r3, r1, r3
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800673e:	4313      	orrs	r3, r2
 8006740:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800674e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006752:	2b00      	cmp	r3, #0
 8006754:	da03      	bge.n	800675e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	e001      	b.n	8006762 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006762:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d103      	bne.n	8006772 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800676a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	e001      	b.n	8006776 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006776:	787b      	ldrb	r3, [r7, #1]
 8006778:	059b      	lsls	r3, r3, #22
 800677a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800677e:	78bb      	ldrb	r3, [r7, #2]
 8006780:	02db      	lsls	r3, r3, #11
 8006782:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006786:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006788:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800678c:	049b      	lsls	r3, r3, #18
 800678e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006792:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006794:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006796:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800679a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	0159      	lsls	r1, r3, #5
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	440b      	add	r3, r1
 80067a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ac:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067b2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80067b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d10f      	bne.n	80067dc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	78fa      	ldrb	r2, [r7, #3]
 80067cc:	0151      	lsls	r1, r2, #5
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	440a      	add	r2, r1
 80067d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067da:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop

080067ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08c      	sub	sp, #48	; 0x30
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006808:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006812:	2b00      	cmp	r3, #0
 8006814:	d028      	beq.n	8006868 <USB_HC_StartXfer+0x7c>
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	791b      	ldrb	r3, [r3, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d124      	bne.n	8006868 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10b      	bne.n	800683c <USB_HC_StartXfer+0x50>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	795b      	ldrb	r3, [r3, #5]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d107      	bne.n	800683c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	4619      	mov	r1, r3
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 fa30 	bl	8006c98 <USB_DoPing>
      return HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	e114      	b.n	8006a66 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d112      	bne.n	8006868 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	4413      	add	r3, r2
 800684a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	6a3a      	ldr	r2, [r7, #32]
 8006856:	440a      	add	r2, r1
 8006858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800685c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006860:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2200      	movs	r2, #0
 8006866:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d018      	beq.n	80068a2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	8912      	ldrh	r2, [r2, #8]
 8006878:	4413      	add	r3, r2
 800687a:	3b01      	subs	r3, #1
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	8912      	ldrh	r2, [r2, #8]
 8006880:	fbb3 f3f2 	udiv	r3, r3, r2
 8006884:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006886:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006888:	8b7b      	ldrh	r3, [r7, #26]
 800688a:	429a      	cmp	r2, r3
 800688c:	d90b      	bls.n	80068a6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800688e:	8b7b      	ldrh	r3, [r7, #26]
 8006890:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006892:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	8912      	ldrh	r2, [r2, #8]
 8006898:	fb02 f203 	mul.w	r2, r2, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	611a      	str	r2, [r3, #16]
 80068a0:	e001      	b.n	80068a6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80068a2:	2301      	movs	r3, #1
 80068a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	78db      	ldrb	r3, [r3, #3]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d006      	beq.n	80068bc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80068ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	8912      	ldrh	r2, [r2, #8]
 80068b4:	fb02 f203 	mul.w	r2, r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068c6:	04d9      	lsls	r1, r3, #19
 80068c8:	4b69      	ldr	r3, [pc, #420]	; (8006a70 <USB_HC_StartXfer+0x284>)
 80068ca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80068cc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	7a9b      	ldrb	r3, [r3, #10]
 80068d2:	075b      	lsls	r3, r3, #29
 80068d4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80068d8:	69f9      	ldr	r1, [r7, #28]
 80068da:	0148      	lsls	r0, r1, #5
 80068dc:	6a39      	ldr	r1, [r7, #32]
 80068de:	4401      	add	r1, r0
 80068e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068e4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80068e6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	68d9      	ldr	r1, [r3, #12]
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fe:	460a      	mov	r2, r1
 8006900:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	bf0c      	ite	eq
 8006912:	2301      	moveq	r3, #1
 8006914:	2300      	movne	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	4413      	add	r3, r2
 8006922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	0151      	lsls	r1, r2, #5
 800692c:	6a3a      	ldr	r2, [r7, #32]
 800692e:	440a      	add	r2, r1
 8006930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006934:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006938:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	4413      	add	r3, r2
 8006942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	7e7b      	ldrb	r3, [r7, #25]
 800694a:	075b      	lsls	r3, r3, #29
 800694c:	69f9      	ldr	r1, [r7, #28]
 800694e:	0148      	lsls	r0, r1, #5
 8006950:	6a39      	ldr	r1, [r7, #32]
 8006952:	4401      	add	r1, r0
 8006954:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006958:	4313      	orrs	r3, r2
 800695a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	4413      	add	r3, r2
 8006964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a42      	ldr	r2, [pc, #264]	; (8006a74 <USB_HC_StartXfer+0x288>)
 800696c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800696e:	4b41      	ldr	r3, [pc, #260]	; (8006a74 <USB_HC_StartXfer+0x288>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006976:	4a3f      	ldr	r2, [pc, #252]	; (8006a74 <USB_HC_StartXfer+0x288>)
 8006978:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	78db      	ldrb	r3, [r3, #3]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d006      	beq.n	8006990 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006982:	4b3c      	ldr	r3, [pc, #240]	; (8006a74 <USB_HC_StartXfer+0x288>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698a:	4a3a      	ldr	r2, [pc, #232]	; (8006a74 <USB_HC_StartXfer+0x288>)
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	e005      	b.n	800699c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006990:	4b38      	ldr	r3, [pc, #224]	; (8006a74 <USB_HC_StartXfer+0x288>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006998:	4a36      	ldr	r2, [pc, #216]	; (8006a74 <USB_HC_StartXfer+0x288>)
 800699a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800699c:	4b35      	ldr	r3, [pc, #212]	; (8006a74 <USB_HC_StartXfer+0x288>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069a4:	4a33      	ldr	r2, [pc, #204]	; (8006a74 <USB_HC_StartXfer+0x288>)
 80069a6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b4:	461a      	mov	r2, r3
 80069b6:	4b2f      	ldr	r3, [pc, #188]	; (8006a74 <USB_HC_StartXfer+0x288>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80069bc:	79fb      	ldrb	r3, [r7, #7]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e04f      	b.n	8006a66 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	78db      	ldrb	r3, [r3, #3]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d14a      	bne.n	8006a64 <USB_HC_StartXfer+0x278>
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d046      	beq.n	8006a64 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	79db      	ldrb	r3, [r3, #7]
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d830      	bhi.n	8006a40 <USB_HC_StartXfer+0x254>
 80069de:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <USB_HC_StartXfer+0x1f8>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	080069f5 	.word	0x080069f5
 80069e8:	08006a19 	.word	0x08006a19
 80069ec:	080069f5 	.word	0x080069f5
 80069f0:	08006a19 	.word	0x08006a19
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	3303      	adds	r3, #3
 80069fa:	089b      	lsrs	r3, r3, #2
 80069fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80069fe:	8afa      	ldrh	r2, [r7, #22]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d91c      	bls.n	8006a44 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	f043 0220 	orr.w	r2, r3, #32
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a16:	e015      	b.n	8006a44 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	3303      	adds	r3, #3
 8006a1e:	089b      	lsrs	r3, r3, #2
 8006a20:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006a22:	8afa      	ldrh	r2, [r7, #22]
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d90a      	bls.n	8006a48 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a3e:	e003      	b.n	8006a48 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006a40:	bf00      	nop
 8006a42:	e002      	b.n	8006a4a <USB_HC_StartXfer+0x25e>
        break;
 8006a44:	bf00      	nop
 8006a46:	e000      	b.n	8006a4a <USB_HC_StartXfer+0x25e>
        break;
 8006a48:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	68d9      	ldr	r1, [r3, #12]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	785a      	ldrb	r2, [r3, #1]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	b298      	uxth	r0, r3
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff fbc6 	bl	80061f0 <USB_WritePacket>
  }

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3728      	adds	r7, #40	; 0x28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	1ff80000 	.word	0x1ff80000
 8006a74:	200000b8 	.word	0x200000b8

08006a78 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	b29b      	uxth	r3, r3
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b087      	sub	sp, #28
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	0c9b      	lsrs	r3, r3, #18
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <USB_HC_Halt+0x3a>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d16c      	bne.n	8006bae <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	0151      	lsls	r1, r2, #5
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	440a      	add	r2, r1
 8006aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006af2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d143      	bne.n	8006b88 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	0151      	lsls	r1, r2, #5
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	440a      	add	r2, r1
 8006b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b5e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	3301      	adds	r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b6c:	d81d      	bhi.n	8006baa <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b84:	d0ec      	beq.n	8006b60 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b86:	e080      	b.n	8006c8a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ba6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ba8:	e06f      	b.n	8006c8a <USB_HC_Halt+0x1f0>
          break;
 8006baa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006bac:	e06d      	b.n	8006c8a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	0151      	lsls	r1, r2, #5
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	440a      	add	r2, r1
 8006bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bcc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d143      	bne.n	8006c66 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bfc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c1c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	0151      	lsls	r1, r2, #5
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	440a      	add	r2, r1
 8006c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c3c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	3301      	adds	r3, #1
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c4a:	d81d      	bhi.n	8006c88 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c62:	d0ec      	beq.n	8006c3e <USB_HC_Halt+0x1a4>
 8006c64:	e011      	b.n	8006c8a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	0151      	lsls	r1, r2, #5
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	440a      	add	r2, r1
 8006c7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e000      	b.n	8006c8a <USB_HC_Halt+0x1f0>
          break;
 8006c88:	bf00      	nop
    }
  }

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006cac:	2301      	movs	r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	04da      	lsls	r2, r3, #19
 8006cb4:	4b15      	ldr	r3, [pc, #84]	; (8006d0c <USB_DoPing+0x74>)
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cc8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ce0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ce8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	1ff80000 	.word	0x1ff80000

08006d10 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff f9e1 	bl	80060e8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006d26:	2110      	movs	r1, #16
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff fa19 	bl	8006160 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff fa3c 	bl	80061ac <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006d34:	2300      	movs	r3, #0
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	e01f      	b.n	8006d7a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d50:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d58:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d60:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6e:	461a      	mov	r2, r3
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	3301      	adds	r3, #1
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	2b0f      	cmp	r3, #15
 8006d7e:	d9dc      	bls.n	8006d3a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006d80:	2300      	movs	r3, #0
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	e034      	b.n	8006df0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d9c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006da4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dba:	461a      	mov	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dcc:	d80c      	bhi.n	8006de8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006de4:	d0ec      	beq.n	8006dc0 <USB_StopHost+0xb0>
 8006de6:	e000      	b.n	8006dea <USB_StopHost+0xda>
        break;
 8006de8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3301      	adds	r3, #1
 8006dee:	613b      	str	r3, [r7, #16]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	2b0f      	cmp	r3, #15
 8006df4:	d9c7      	bls.n	8006d86 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8006e02:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff f95a 	bl	80060c6 <USB_EnableGlobalInt>

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006e1c:	b590      	push	{r4, r7, lr}
 8006e1e:	b089      	sub	sp, #36	; 0x24
 8006e20:	af04      	add	r7, sp, #16
 8006e22:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006e24:	2301      	movs	r3, #1
 8006e26:	2202      	movs	r2, #2
 8006e28:	2102      	movs	r1, #2
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fc68 	bl	8007700 <USBH_FindInterface>
 8006e30:	4603      	mov	r3, r0
 8006e32:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	2bff      	cmp	r3, #255	; 0xff
 8006e38:	d002      	beq.n	8006e40 <USBH_CDC_InterfaceInit+0x24>
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d901      	bls.n	8006e44 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e40:	2302      	movs	r3, #2
 8006e42:	e13d      	b.n	80070c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fc3d 	bl	80076c8 <USBH_SelectInterface>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e131      	b.n	80070c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006e62:	2050      	movs	r0, #80	; 0x50
 8006e64:	f001 fb1a 	bl	800849c <malloc>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e11f      	b.n	80070c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006e80:	2250      	movs	r2, #80	; 0x50
 8006e82:	2100      	movs	r1, #0
 8006e84:	68b8      	ldr	r0, [r7, #8]
 8006e86:	f001 fb19 	bl	80084bc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	211a      	movs	r1, #26
 8006e90:	fb01 f303 	mul.w	r3, r1, r3
 8006e94:	4413      	add	r3, r2
 8006e96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	b25b      	sxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	da15      	bge.n	8006ece <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	211a      	movs	r1, #26
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	4413      	add	r3, r2
 8006eae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006eb2:	781a      	ldrb	r2, [r3, #0]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	211a      	movs	r1, #26
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ec8:	881a      	ldrh	r2, [r3, #0]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 ffa0 	bl	8007e1a <USBH_AllocPipe>
 8006eda:	4603      	mov	r3, r0
 8006edc:	461a      	mov	r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	7819      	ldrb	r1, [r3, #0]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	7858      	ldrb	r0, [r3, #1]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	8952      	ldrh	r2, [r2, #10]
 8006efa:	9202      	str	r2, [sp, #8]
 8006efc:	2203      	movs	r2, #3
 8006efe:	9201      	str	r2, [sp, #4]
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	4623      	mov	r3, r4
 8006f04:	4602      	mov	r2, r0
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 ff58 	bl	8007dbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	2200      	movs	r2, #0
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 fa1b 	bl	8008350 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	210a      	movs	r1, #10
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fbed 	bl	8007700 <USBH_FindInterface>
 8006f26:	4603      	mov	r3, r0
 8006f28:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	2bff      	cmp	r3, #255	; 0xff
 8006f2e:	d002      	beq.n	8006f36 <USBH_CDC_InterfaceInit+0x11a>
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d901      	bls.n	8006f3a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f36:	2302      	movs	r3, #2
 8006f38:	e0c2      	b.n	80070c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	211a      	movs	r1, #26
 8006f40:	fb01 f303 	mul.w	r3, r1, r3
 8006f44:	4413      	add	r3, r2
 8006f46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	b25b      	sxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	da16      	bge.n	8006f80 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	211a      	movs	r1, #26
 8006f58:	fb01 f303 	mul.w	r3, r1, r3
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	211a      	movs	r1, #26
 8006f6e:	fb01 f303 	mul.w	r3, r1, r3
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006f78:	881a      	ldrh	r2, [r3, #0]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	835a      	strh	r2, [r3, #26]
 8006f7e:	e015      	b.n	8006fac <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	211a      	movs	r1, #26
 8006f86:	fb01 f303 	mul.w	r3, r1, r3
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f90:	781a      	ldrb	r2, [r3, #0]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	211a      	movs	r1, #26
 8006f9c:	fb01 f303 	mul.w	r3, r1, r3
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006fa6:	881a      	ldrh	r2, [r3, #0]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	211a      	movs	r1, #26
 8006fb2:	fb01 f303 	mul.w	r3, r1, r3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	b25b      	sxtb	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	da16      	bge.n	8006ff2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	211a      	movs	r1, #26
 8006fca:	fb01 f303 	mul.w	r3, r1, r3
 8006fce:	4413      	add	r3, r2
 8006fd0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006fd4:	781a      	ldrb	r2, [r3, #0]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	211a      	movs	r1, #26
 8006fe0:	fb01 f303 	mul.w	r3, r1, r3
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006fea:	881a      	ldrh	r2, [r3, #0]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	835a      	strh	r2, [r3, #26]
 8006ff0:	e015      	b.n	800701e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	211a      	movs	r1, #26
 8006ff8:	fb01 f303 	mul.w	r3, r1, r3
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	211a      	movs	r1, #26
 800700e:	fb01 f303 	mul.w	r3, r1, r3
 8007012:	4413      	add	r3, r2
 8007014:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007018:	881a      	ldrh	r2, [r3, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	7b9b      	ldrb	r3, [r3, #14]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fef8 	bl	8007e1a <USBH_AllocPipe>
 800702a:	4603      	mov	r3, r0
 800702c:	461a      	mov	r2, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	7bdb      	ldrb	r3, [r3, #15]
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 feee 	bl	8007e1a <USBH_AllocPipe>
 800703e:	4603      	mov	r3, r0
 8007040:	461a      	mov	r2, r3
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	7b59      	ldrb	r1, [r3, #13]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	7b98      	ldrb	r0, [r3, #14]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	8b12      	ldrh	r2, [r2, #24]
 800705e:	9202      	str	r2, [sp, #8]
 8007060:	2202      	movs	r2, #2
 8007062:	9201      	str	r2, [sp, #4]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	4623      	mov	r3, r4
 8007068:	4602      	mov	r2, r0
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fea6 	bl	8007dbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	7b19      	ldrb	r1, [r3, #12]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	7bd8      	ldrb	r0, [r3, #15]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	8b52      	ldrh	r2, [r2, #26]
 8007088:	9202      	str	r2, [sp, #8]
 800708a:	2202      	movs	r2, #2
 800708c:	9201      	str	r2, [sp, #4]
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	4623      	mov	r3, r4
 8007092:	4602      	mov	r2, r0
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fe91 	bl	8007dbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	7b5b      	ldrb	r3, [r3, #13]
 80070a6:	2200      	movs	r2, #0
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 f950 	bl	8008350 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	7b1b      	ldrb	r3, [r3, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 f949 	bl	8008350 <USBH_LL_SetToggle>

  return USBH_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd90      	pop	{r4, r7, pc}

080070c8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00e      	beq.n	8007100 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fe86 	bl	8007dfa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 feb1 	bl	8007e5c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	7b1b      	ldrb	r3, [r3, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00e      	beq.n	8007126 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	7b1b      	ldrb	r3, [r3, #12]
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fe73 	bl	8007dfa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	7b1b      	ldrb	r3, [r3, #12]
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fe9e 	bl	8007e5c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	7b5b      	ldrb	r3, [r3, #13]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00e      	beq.n	800714c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	7b5b      	ldrb	r3, [r3, #13]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fe60 	bl	8007dfa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	7b5b      	ldrb	r3, [r3, #13]
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fe8b 	bl	8007e5c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	4618      	mov	r0, r3
 8007162:	f001 f9a3 	bl	80084ac <free>
    phost->pActiveClass->pData = 0U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800716c:	2200      	movs	r2, #0
 800716e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3340      	adds	r3, #64	; 0x40
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f8b1 	bl	80072fa <GetLineCoding>
 8007198:	4603      	mov	r3, r0
 800719a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d105      	bne.n	80071ae <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071a8:	2102      	movs	r1, #2
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80071ae:	7afb      	ldrb	r3, [r7, #11]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d877      	bhi.n	80072cc <USBH_CDC_Process+0x114>
 80071dc:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <USBH_CDC_Process+0x2c>)
 80071de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e2:	bf00      	nop
 80071e4:	080071f9 	.word	0x080071f9
 80071e8:	080071ff 	.word	0x080071ff
 80071ec:	0800722f 	.word	0x0800722f
 80071f0:	080072a3 	.word	0x080072a3
 80071f4:	080072b1 	.word	0x080072b1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	73fb      	strb	r3, [r7, #15]
      break;
 80071fc:	e06d      	b.n	80072da <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f897 	bl	8007338 <SetLineCoding>
 800720a:	4603      	mov	r3, r0
 800720c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800720e:	7bbb      	ldrb	r3, [r7, #14]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800721c:	e058      	b.n	80072d0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d055      	beq.n	80072d0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2204      	movs	r2, #4
 8007228:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800722c:	e050      	b.n	80072d0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	3340      	adds	r3, #64	; 0x40
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f860 	bl	80072fa <GetLineCoding>
 800723a:	4603      	mov	r3, r0
 800723c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d126      	bne.n	8007292 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007256:	791b      	ldrb	r3, [r3, #4]
 8007258:	429a      	cmp	r2, r3
 800725a:	d13b      	bne.n	80072d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007266:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007268:	429a      	cmp	r2, r3
 800726a:	d133      	bne.n	80072d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007276:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007278:	429a      	cmp	r2, r3
 800727a:	d12b      	bne.n	80072d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007284:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007286:	429a      	cmp	r2, r3
 8007288:	d124      	bne.n	80072d4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f95a 	bl	8007544 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007290:	e020      	b.n	80072d4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d01d      	beq.n	80072d4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2204      	movs	r2, #4
 800729c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80072a0:	e018      	b.n	80072d4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f867 	bl	8007376 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f8dc 	bl	8007466 <CDC_ProcessReception>
      break;
 80072ae:	e014      	b.n	80072da <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80072b0:	2100      	movs	r1, #0
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fb0a 	bl	80078cc <USBH_ClrFeature>
 80072b8:	4603      	mov	r3, r0
 80072ba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072bc:	7bbb      	ldrb	r3, [r7, #14]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10a      	bne.n	80072d8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80072ca:	e005      	b.n	80072d8 <USBH_CDC_Process+0x120>

    default:
      break;
 80072cc:	bf00      	nop
 80072ce:	e004      	b.n	80072da <USBH_CDC_Process+0x122>
      break;
 80072d0:	bf00      	nop
 80072d2:	e002      	b.n	80072da <USBH_CDC_Process+0x122>
      break;
 80072d4:	bf00      	nop
 80072d6:	e000      	b.n	80072da <USBH_CDC_Process+0x122>
      break;
 80072d8:	bf00      	nop

  }

  return status;
 80072da:	7bfb      	ldrb	r3, [r7, #15]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	22a1      	movs	r2, #161	; 0xa1
 8007308:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2221      	movs	r2, #33	; 0x21
 800730e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2207      	movs	r2, #7
 8007320:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2207      	movs	r2, #7
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 faf3 	bl	8007914 <USBH_CtlReq>
 800732e:	4603      	mov	r3, r0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2221      	movs	r2, #33	; 0x21
 8007346:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2207      	movs	r2, #7
 800735e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	2207      	movs	r2, #7
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fad4 	bl	8007914 <USBH_CtlReq>
 800736c:	4603      	mov	r3, r0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b086      	sub	sp, #24
 800737a:	af02      	add	r7, sp, #8
 800737c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007388:	2300      	movs	r3, #0
 800738a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007392:	2b01      	cmp	r3, #1
 8007394:	d002      	beq.n	800739c <CDC_ProcessTransmission+0x26>
 8007396:	2b02      	cmp	r3, #2
 8007398:	d025      	beq.n	80073e6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800739a:	e060      	b.n	800745e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	8b12      	ldrh	r2, [r2, #24]
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d90c      	bls.n	80073c2 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	69d9      	ldr	r1, [r3, #28]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8b1a      	ldrh	r2, [r3, #24]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	7b58      	ldrb	r0, [r3, #13]
 80073b4:	2301      	movs	r3, #1
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	4603      	mov	r3, r0
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fcbb 	bl	8007d36 <USBH_BulkSendData>
 80073c0:	e00c      	b.n	80073dc <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	7b58      	ldrb	r0, [r3, #13]
 80073d0:	2301      	movs	r3, #1
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	4603      	mov	r3, r0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fcad 	bl	8007d36 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80073e4:	e03b      	b.n	800745e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	7b5b      	ldrb	r3, [r3, #13]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 ff85 	bl	80082fc <USBH_LL_GetURBState>
 80073f2:	4603      	mov	r3, r0
 80073f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80073f6:	7afb      	ldrb	r3, [r7, #11]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d128      	bne.n	800744e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	8b12      	ldrh	r2, [r2, #24]
 8007404:	4293      	cmp	r3, r2
 8007406:	d90e      	bls.n	8007426 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	8b12      	ldrh	r2, [r2, #24]
 8007410:	1a9a      	subs	r2, r3, r2
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	8b12      	ldrh	r2, [r2, #24]
 800741e:	441a      	add	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	61da      	str	r2, [r3, #28]
 8007424:	e002      	b.n	800742c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800743c:	e00e      	b.n	800745c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f868 	bl	800751c <USBH_CDC_TransmitCallback>
      break;
 800744c:	e006      	b.n	800745c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800744e:	7afb      	ldrb	r3, [r7, #11]
 8007450:	2b02      	cmp	r3, #2
 8007452:	d103      	bne.n	800745c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800745c:	bf00      	nop
  }
}
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b086      	sub	sp, #24
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007478:	2300      	movs	r3, #0
 800747a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007482:	2b03      	cmp	r3, #3
 8007484:	d002      	beq.n	800748c <CDC_ProcessReception+0x26>
 8007486:	2b04      	cmp	r3, #4
 8007488:	d00e      	beq.n	80074a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800748a:	e043      	b.n	8007514 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	6a19      	ldr	r1, [r3, #32]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	8b5a      	ldrh	r2, [r3, #26]
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	7b1b      	ldrb	r3, [r3, #12]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fc71 	bl	8007d80 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2204      	movs	r2, #4
 80074a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80074a6:	e035      	b.n	8007514 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	7b1b      	ldrb	r3, [r3, #12]
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 ff24 	bl	80082fc <USBH_LL_GetURBState>
 80074b4:	4603      	mov	r3, r0
 80074b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80074b8:	7cfb      	ldrb	r3, [r7, #19]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d129      	bne.n	8007512 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	7b1b      	ldrb	r3, [r3, #12]
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fe87 	bl	80081d8 <USBH_LL_GetLastXferSize>
 80074ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d016      	beq.n	8007504 <CDC_ProcessReception+0x9e>
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	8b5b      	ldrh	r3, [r3, #26]
 80074da:	461a      	mov	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4293      	cmp	r3, r2
 80074e0:	d910      	bls.n	8007504 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	1ad2      	subs	r2, r2, r3
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	441a      	add	r2, r3
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2203      	movs	r2, #3
 80074fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007502:	e006      	b.n	8007512 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f80f 	bl	8007530 <USBH_CDC_ReceiveCallback>
      break;
 8007512:	bf00      	nop
  }
}
 8007514:	bf00      	nop
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	4613      	mov	r3, r2
 8007564:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800756c:	2302      	movs	r3, #2
 800756e:	e029      	b.n	80075c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	79fa      	ldrb	r2, [r7, #7]
 8007574:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 f81f 	bl	80075cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 fd99 	bl	80080f4 <USBH_LL_Init>

  return USBH_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80075d8:	2300      	movs	r3, #0
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	e009      	b.n	80075f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	33e0      	adds	r3, #224	; 0xe0
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	2200      	movs	r2, #0
 80075ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3301      	adds	r3, #1
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b0e      	cmp	r3, #14
 80075f6:	d9f2      	bls.n	80075de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80075f8:	2300      	movs	r3, #0
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	e009      	b.n	8007612 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4413      	add	r3, r2
 8007604:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007608:	2200      	movs	r2, #0
 800760a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3301      	adds	r3, #1
 8007610:	60fb      	str	r3, [r7, #12]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007618:	d3f1      	bcc.n	80075fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2240      	movs	r2, #64	; 0x40
 800763e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d016      	beq.n	80076b6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10e      	bne.n	80076b0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007698:	1c59      	adds	r1, r3, #1
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	33de      	adds	r3, #222	; 0xde
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
 80076ae:	e004      	b.n	80076ba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80076b0:	2302      	movs	r3, #2
 80076b2:	73fb      	strb	r3, [r7, #15]
 80076b4:	e001      	b.n	80076ba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80076b6:	2302      	movs	r3, #2
 80076b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80076de:	78fa      	ldrb	r2, [r7, #3]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d204      	bcs.n	80076ee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	78fa      	ldrb	r2, [r7, #3]
 80076e8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80076ec:	e001      	b.n	80076f2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80076ee:	2302      	movs	r3, #2
 80076f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	4608      	mov	r0, r1
 800770a:	4611      	mov	r1, r2
 800770c:	461a      	mov	r2, r3
 800770e:	4603      	mov	r3, r0
 8007710:	70fb      	strb	r3, [r7, #3]
 8007712:	460b      	mov	r3, r1
 8007714:	70bb      	strb	r3, [r7, #2]
 8007716:	4613      	mov	r3, r2
 8007718:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800771e:	2300      	movs	r3, #0
 8007720:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007728:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800772a:	e025      	b.n	8007778 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	221a      	movs	r2, #26
 8007730:	fb02 f303 	mul.w	r3, r2, r3
 8007734:	3308      	adds	r3, #8
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	4413      	add	r3, r2
 800773a:	3302      	adds	r3, #2
 800773c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	795b      	ldrb	r3, [r3, #5]
 8007742:	78fa      	ldrb	r2, [r7, #3]
 8007744:	429a      	cmp	r2, r3
 8007746:	d002      	beq.n	800774e <USBH_FindInterface+0x4e>
 8007748:	78fb      	ldrb	r3, [r7, #3]
 800774a:	2bff      	cmp	r3, #255	; 0xff
 800774c:	d111      	bne.n	8007772 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007752:	78ba      	ldrb	r2, [r7, #2]
 8007754:	429a      	cmp	r2, r3
 8007756:	d002      	beq.n	800775e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007758:	78bb      	ldrb	r3, [r7, #2]
 800775a:	2bff      	cmp	r3, #255	; 0xff
 800775c:	d109      	bne.n	8007772 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007762:	787a      	ldrb	r2, [r7, #1]
 8007764:	429a      	cmp	r2, r3
 8007766:	d002      	beq.n	800776e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007768:	787b      	ldrb	r3, [r7, #1]
 800776a:	2bff      	cmp	r3, #255	; 0xff
 800776c:	d101      	bne.n	8007772 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	e006      	b.n	8007780 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007772:	7dfb      	ldrb	r3, [r7, #23]
 8007774:	3301      	adds	r3, #1
 8007776:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007778:	7dfb      	ldrb	r3, [r7, #23]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d9d6      	bls.n	800772c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800777e:	23ff      	movs	r3, #255	; 0xff
}
 8007780:	4618      	mov	r0, r3
 8007782:	371c      	adds	r7, #28
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fce9 	bl	800816c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800779a:	2101      	movs	r1, #1
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fdc0 	bl	8008322 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b082      	sub	sp, #8
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f804 	bl	80077ee <USBH_HandleSof>
}
 80077e6:	bf00      	nop
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b0b      	cmp	r3, #11
 80077fe:	d10a      	bne.n	8007816 <USBH_HandleSof+0x28>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d005      	beq.n	8007816 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4798      	blx	r3
  }
}
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800782e:	bf00      	nop
}
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800784a:	bf00      	nop
}
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fc7c 	bl	80081a2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	791b      	ldrb	r3, [r3, #4]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fad3 	bl	8007e5c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	795b      	ldrb	r3, [r3, #5]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 facd 	bl	8007e5c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	789b      	ldrb	r3, [r3, #2]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d10f      	bne.n	8007900 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80078f2:	78fb      	ldrb	r3, [r7, #3]
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007900:	2200      	movs	r2, #0
 8007902:	2100      	movs	r1, #0
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f805 	bl	8007914 <USBH_CtlReq>
 800790a:	4603      	mov	r3, r0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007922:	2301      	movs	r3, #1
 8007924:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	789b      	ldrb	r3, [r3, #2]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d002      	beq.n	8007934 <USBH_CtlReq+0x20>
 800792e:	2b02      	cmp	r3, #2
 8007930:	d00f      	beq.n	8007952 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007932:	e027      	b.n	8007984 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	88fa      	ldrh	r2, [r7, #6]
 800793e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2201      	movs	r2, #1
 8007944:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2202      	movs	r2, #2
 800794a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800794c:	2301      	movs	r3, #1
 800794e:	75fb      	strb	r3, [r7, #23]
      break;
 8007950:	e018      	b.n	8007984 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 f81c 	bl	8007990 <USBH_HandleControl>
 8007958:	4603      	mov	r3, r0
 800795a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <USBH_CtlReq+0x54>
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	2b03      	cmp	r3, #3
 8007966:	d106      	bne.n	8007976 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2201      	movs	r2, #1
 800796c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	761a      	strb	r2, [r3, #24]
      break;
 8007974:	e005      	b.n	8007982 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007976:	7dfb      	ldrb	r3, [r7, #23]
 8007978:	2b02      	cmp	r3, #2
 800797a:	d102      	bne.n	8007982 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	709a      	strb	r2, [r3, #2]
      break;
 8007982:	bf00      	nop
  }
  return status;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af02      	add	r7, sp, #8
 8007996:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007998:	2301      	movs	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800799c:	2300      	movs	r3, #0
 800799e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	7e1b      	ldrb	r3, [r3, #24]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	2b0a      	cmp	r3, #10
 80079a8:	f200 8158 	bhi.w	8007c5c <USBH_HandleControl+0x2cc>
 80079ac:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <USBH_HandleControl+0x24>)
 80079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b2:	bf00      	nop
 80079b4:	080079e1 	.word	0x080079e1
 80079b8:	080079fb 	.word	0x080079fb
 80079bc:	08007a65 	.word	0x08007a65
 80079c0:	08007a8b 	.word	0x08007a8b
 80079c4:	08007ac3 	.word	0x08007ac3
 80079c8:	08007aef 	.word	0x08007aef
 80079cc:	08007b41 	.word	0x08007b41
 80079d0:	08007b63 	.word	0x08007b63
 80079d4:	08007b9f 	.word	0x08007b9f
 80079d8:	08007bc7 	.word	0x08007bc7
 80079dc:	08007c05 	.word	0x08007c05
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f103 0110 	add.w	r1, r3, #16
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	795b      	ldrb	r3, [r3, #5]
 80079ea:	461a      	mov	r2, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f945 	bl	8007c7c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2202      	movs	r2, #2
 80079f6:	761a      	strb	r2, [r3, #24]
      break;
 80079f8:	e13b      	b.n	8007c72 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	795b      	ldrb	r3, [r3, #5]
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fc7b 	bl	80082fc <USBH_LL_GetURBState>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d11e      	bne.n	8007a4e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	7c1b      	ldrb	r3, [r3, #16]
 8007a14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a18:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	8adb      	ldrh	r3, [r3, #22]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007a22:	7b7b      	ldrb	r3, [r7, #13]
 8007a24:	2b80      	cmp	r3, #128	; 0x80
 8007a26:	d103      	bne.n	8007a30 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2203      	movs	r2, #3
 8007a2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a2e:	e117      	b.n	8007c60 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2205      	movs	r2, #5
 8007a34:	761a      	strb	r2, [r3, #24]
      break;
 8007a36:	e113      	b.n	8007c60 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8007a38:	7b7b      	ldrb	r3, [r7, #13]
 8007a3a:	2b80      	cmp	r3, #128	; 0x80
 8007a3c:	d103      	bne.n	8007a46 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2209      	movs	r2, #9
 8007a42:	761a      	strb	r2, [r3, #24]
      break;
 8007a44:	e10c      	b.n	8007c60 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2207      	movs	r2, #7
 8007a4a:	761a      	strb	r2, [r3, #24]
      break;
 8007a4c:	e108      	b.n	8007c60 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d003      	beq.n	8007a5c <USBH_HandleControl+0xcc>
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	f040 8102 	bne.w	8007c60 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	220b      	movs	r2, #11
 8007a60:	761a      	strb	r2, [r3, #24]
      break;
 8007a62:	e0fd      	b.n	8007c60 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6899      	ldr	r1, [r3, #8]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	899a      	ldrh	r2, [r3, #12]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	791b      	ldrb	r3, [r3, #4]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f93c 	bl	8007cfa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2204      	movs	r2, #4
 8007a86:	761a      	strb	r2, [r3, #24]
      break;
 8007a88:	e0f3      	b.n	8007c72 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	791b      	ldrb	r3, [r3, #4]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fc33 	bl	80082fc <USBH_LL_GetURBState>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d102      	bne.n	8007aa6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2209      	movs	r2, #9
 8007aa4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b05      	cmp	r3, #5
 8007aaa:	d102      	bne.n	8007ab2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007aac:	2303      	movs	r3, #3
 8007aae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ab0:	e0d8      	b.n	8007c64 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	f040 80d5 	bne.w	8007c64 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	220b      	movs	r2, #11
 8007abe:	761a      	strb	r2, [r3, #24]
      break;
 8007ac0:	e0d0      	b.n	8007c64 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6899      	ldr	r1, [r3, #8]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	899a      	ldrh	r2, [r3, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7958      	ldrb	r0, [r3, #5]
 8007ace:	2301      	movs	r3, #1
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f8eb 	bl	8007cb0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2206      	movs	r2, #6
 8007aea:	761a      	strb	r2, [r3, #24]
      break;
 8007aec:	e0c1      	b.n	8007c72 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	795b      	ldrb	r3, [r3, #5]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fc01 	bl	80082fc <USBH_LL_GetURBState>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d103      	bne.n	8007b0c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2207      	movs	r2, #7
 8007b08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b0a:	e0ad      	b.n	8007c68 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	2b05      	cmp	r3, #5
 8007b10:	d105      	bne.n	8007b1e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	220c      	movs	r2, #12
 8007b16:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b1c:	e0a4      	b.n	8007c68 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d103      	bne.n	8007b2c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2205      	movs	r2, #5
 8007b28:	761a      	strb	r2, [r3, #24]
      break;
 8007b2a:	e09d      	b.n	8007c68 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	f040 809a 	bne.w	8007c68 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	220b      	movs	r2, #11
 8007b38:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b3e:	e093      	b.n	8007c68 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	791b      	ldrb	r3, [r3, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	2100      	movs	r1, #0
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f8d6 	bl	8007cfa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	761a      	strb	r2, [r3, #24]

      break;
 8007b60:	e087      	b.n	8007c72 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	791b      	ldrb	r3, [r3, #4]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fbc7 	bl	80082fc <USBH_LL_GetURBState>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d105      	bne.n	8007b84 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	220d      	movs	r2, #13
 8007b7c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b82:	e073      	b.n	8007c6c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d103      	bne.n	8007b92 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	220b      	movs	r2, #11
 8007b8e:	761a      	strb	r2, [r3, #24]
      break;
 8007b90:	e06c      	b.n	8007c6c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	2b05      	cmp	r3, #5
 8007b96:	d169      	bne.n	8007c6c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b9c:	e066      	b.n	8007c6c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	795a      	ldrb	r2, [r3, #5]
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2100      	movs	r1, #0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f87f 	bl	8007cb0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	220a      	movs	r2, #10
 8007bc2:	761a      	strb	r2, [r3, #24]
      break;
 8007bc4:	e055      	b.n	8007c72 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	795b      	ldrb	r3, [r3, #5]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fb95 	bl	80082fc <USBH_LL_GetURBState>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d105      	bne.n	8007be8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	220d      	movs	r2, #13
 8007be4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007be6:	e043      	b.n	8007c70 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d103      	bne.n	8007bf6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2209      	movs	r2, #9
 8007bf2:	761a      	strb	r2, [r3, #24]
      break;
 8007bf4:	e03c      	b.n	8007c70 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d139      	bne.n	8007c70 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	220b      	movs	r2, #11
 8007c00:	761a      	strb	r2, [r3, #24]
      break;
 8007c02:	e035      	b.n	8007c70 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	7e5b      	ldrb	r3, [r3, #25]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	765a      	strb	r2, [r3, #25]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	7e5b      	ldrb	r3, [r3, #25]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d806      	bhi.n	8007c26 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007c24:	e025      	b.n	8007c72 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c2c:	2106      	movs	r1, #6
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	795b      	ldrb	r3, [r3, #5]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f90c 	bl	8007e5c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	791b      	ldrb	r3, [r3, #4]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f906 	bl	8007e5c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007c56:	2302      	movs	r3, #2
 8007c58:	73fb      	strb	r3, [r7, #15]
      break;
 8007c5a:	e00a      	b.n	8007c72 <USBH_HandleControl+0x2e2>

    default:
      break;
 8007c5c:	bf00      	nop
 8007c5e:	e008      	b.n	8007c72 <USBH_HandleControl+0x2e2>
      break;
 8007c60:	bf00      	nop
 8007c62:	e006      	b.n	8007c72 <USBH_HandleControl+0x2e2>
      break;
 8007c64:	bf00      	nop
 8007c66:	e004      	b.n	8007c72 <USBH_HandleControl+0x2e2>
      break;
 8007c68:	bf00      	nop
 8007c6a:	e002      	b.n	8007c72 <USBH_HandleControl+0x2e2>
      break;
 8007c6c:	bf00      	nop
 8007c6e:	e000      	b.n	8007c72 <USBH_HandleControl+0x2e2>
      break;
 8007c70:	bf00      	nop
  }

  return status;
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af04      	add	r7, sp, #16
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	4613      	mov	r3, r2
 8007c88:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c8a:	79f9      	ldrb	r1, [r7, #7]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9303      	str	r3, [sp, #12]
 8007c90:	2308      	movs	r3, #8
 8007c92:	9302      	str	r3, [sp, #8]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 fafa 	bl	800829a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af04      	add	r7, sp, #16
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	4611      	mov	r1, r2
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	80fb      	strh	r3, [r7, #6]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007cd4:	7979      	ldrb	r1, [r7, #5]
 8007cd6:	7e3b      	ldrb	r3, [r7, #24]
 8007cd8:	9303      	str	r3, [sp, #12]
 8007cda:	88fb      	ldrh	r3, [r7, #6]
 8007cdc:	9302      	str	r3, [sp, #8]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2200      	movs	r2, #0
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 fad5 	bl	800829a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b088      	sub	sp, #32
 8007cfe:	af04      	add	r7, sp, #16
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	4611      	mov	r1, r2
 8007d06:	461a      	mov	r2, r3
 8007d08:	460b      	mov	r3, r1
 8007d0a:	80fb      	strh	r3, [r7, #6]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d10:	7979      	ldrb	r1, [r7, #5]
 8007d12:	2300      	movs	r3, #0
 8007d14:	9303      	str	r3, [sp, #12]
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	9302      	str	r3, [sp, #8]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	2301      	movs	r3, #1
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	2300      	movs	r3, #0
 8007d24:	2201      	movs	r2, #1
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 fab7 	bl	800829a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007d2c:	2300      	movs	r3, #0

}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b088      	sub	sp, #32
 8007d3a:	af04      	add	r7, sp, #16
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	4611      	mov	r1, r2
 8007d42:	461a      	mov	r2, r3
 8007d44:	460b      	mov	r3, r1
 8007d46:	80fb      	strh	r3, [r7, #6]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d5a:	7979      	ldrb	r1, [r7, #5]
 8007d5c:	7e3b      	ldrb	r3, [r7, #24]
 8007d5e:	9303      	str	r3, [sp, #12]
 8007d60:	88fb      	ldrh	r3, [r7, #6]
 8007d62:	9302      	str	r3, [sp, #8]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	9301      	str	r3, [sp, #4]
 8007d68:	2301      	movs	r3, #1
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	2200      	movs	r2, #0
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 fa92 	bl	800829a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b088      	sub	sp, #32
 8007d84:	af04      	add	r7, sp, #16
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	460b      	mov	r3, r1
 8007d90:	80fb      	strh	r3, [r7, #6]
 8007d92:	4613      	mov	r3, r2
 8007d94:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d96:	7979      	ldrb	r1, [r7, #5]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	9303      	str	r3, [sp, #12]
 8007d9c:	88fb      	ldrh	r3, [r7, #6]
 8007d9e:	9302      	str	r3, [sp, #8]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	2301      	movs	r3, #1
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	2302      	movs	r3, #2
 8007daa:	2201      	movs	r2, #1
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 fa74 	bl	800829a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af04      	add	r7, sp, #16
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	4608      	mov	r0, r1
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4603      	mov	r3, r0
 8007dcc:	70fb      	strb	r3, [r7, #3]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	70bb      	strb	r3, [r7, #2]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007dd6:	7878      	ldrb	r0, [r7, #1]
 8007dd8:	78ba      	ldrb	r2, [r7, #2]
 8007dda:	78f9      	ldrb	r1, [r7, #3]
 8007ddc:	8b3b      	ldrh	r3, [r7, #24]
 8007dde:	9302      	str	r3, [sp, #8]
 8007de0:	7d3b      	ldrb	r3, [r7, #20]
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	7c3b      	ldrb	r3, [r7, #16]
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	4603      	mov	r3, r0
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa07 	bl	80081fe <USBH_LL_OpenPipe>

  return USBH_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	460b      	mov	r3, r1
 8007e04:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007e06:	78fb      	ldrb	r3, [r7, #3]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fa26 	bl	800825c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	460b      	mov	r3, r1
 8007e24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f836 	bl	8007e98 <USBH_GetFreePipe>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007e30:	89fb      	ldrh	r3, [r7, #14]
 8007e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00a      	beq.n	8007e50 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007e3a:	78fa      	ldrb	r2, [r7, #3]
 8007e3c:	89fb      	ldrh	r3, [r7, #14]
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	33e0      	adds	r3, #224	; 0xe0
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	440b      	add	r3, r1
 8007e4e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007e50:	89fb      	ldrh	r3, [r7, #14]
 8007e52:	b2db      	uxtb	r3, r3
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	2b0a      	cmp	r3, #10
 8007e6c:	d80d      	bhi.n	8007e8a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007e6e:	78fb      	ldrb	r3, [r7, #3]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	33e0      	adds	r3, #224	; 0xe0
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	78fb      	ldrb	r3, [r7, #3]
 8007e7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	33e0      	adds	r3, #224	; 0xe0
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	440b      	add	r3, r1
 8007e88:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]
 8007ea8:	e00f      	b.n	8007eca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	33e0      	adds	r3, #224	; 0xe0
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d102      	bne.n	8007ec4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	e007      	b.n	8007ed4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	73fb      	strb	r3, [r7, #15]
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
 8007ecc:	2b0a      	cmp	r3, #10
 8007ece:	d9ec      	bls.n	8007eaa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	490e      	ldr	r1, [pc, #56]	; (8007f20 <MX_USB_HOST_Init+0x40>)
 8007ee8:	480e      	ldr	r0, [pc, #56]	; (8007f24 <MX_USB_HOST_Init+0x44>)
 8007eea:	f7ff fb35 	bl	8007558 <USBH_Init>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007ef4:	f7f8 ff0e 	bl	8000d14 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007ef8:	490b      	ldr	r1, [pc, #44]	; (8007f28 <MX_USB_HOST_Init+0x48>)
 8007efa:	480a      	ldr	r0, [pc, #40]	; (8007f24 <MX_USB_HOST_Init+0x44>)
 8007efc:	f7ff fbba 	bl	8007674 <USBH_RegisterClass>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007f06:	f7f8 ff05 	bl	8000d14 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007f0a:	4806      	ldr	r0, [pc, #24]	; (8007f24 <MX_USB_HOST_Init+0x44>)
 8007f0c:	f7ff fc3e 	bl	800778c <USBH_Start>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007f16:	f7f8 fefd 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007f1a:	bf00      	nop
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	08007f2d 	.word	0x08007f2d
 8007f24:	20000280 	.word	0x20000280
 8007f28:	2000000c 	.word	0x2000000c

08007f2c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007f38:	78fb      	ldrb	r3, [r7, #3]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d819      	bhi.n	8007f74 <USBH_UserProcess+0x48>
 8007f40:	a201      	add	r2, pc, #4	; (adr r2, 8007f48 <USBH_UserProcess+0x1c>)
 8007f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f46:	bf00      	nop
 8007f48:	08007f75 	.word	0x08007f75
 8007f4c:	08007f65 	.word	0x08007f65
 8007f50:	08007f75 	.word	0x08007f75
 8007f54:	08007f6d 	.word	0x08007f6d
 8007f58:	08007f5d 	.word	0x08007f5d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007f5c:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <USBH_UserProcess+0x58>)
 8007f5e:	2203      	movs	r2, #3
 8007f60:	701a      	strb	r2, [r3, #0]
  break;
 8007f62:	e008      	b.n	8007f76 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007f64:	4b07      	ldr	r3, [pc, #28]	; (8007f84 <USBH_UserProcess+0x58>)
 8007f66:	2202      	movs	r2, #2
 8007f68:	701a      	strb	r2, [r3, #0]
  break;
 8007f6a:	e004      	b.n	8007f76 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007f6c:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <USBH_UserProcess+0x58>)
 8007f6e:	2201      	movs	r2, #1
 8007f70:	701a      	strb	r2, [r3, #0]
  break;
 8007f72:	e000      	b.n	8007f76 <USBH_UserProcess+0x4a>

  default:
  break;
 8007f74:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	200000bc 	.word	0x200000bc

08007f88 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08a      	sub	sp, #40	; 0x28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f90:	f107 0314 	add.w	r3, r7, #20
 8007f94:	2200      	movs	r2, #0
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	605a      	str	r2, [r3, #4]
 8007f9a:	609a      	str	r2, [r3, #8]
 8007f9c:	60da      	str	r2, [r3, #12]
 8007f9e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fa8:	d147      	bne.n	800803a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007faa:	2300      	movs	r3, #0
 8007fac:	613b      	str	r3, [r7, #16]
 8007fae:	4b25      	ldr	r3, [pc, #148]	; (8008044 <HAL_HCD_MspInit+0xbc>)
 8007fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb2:	4a24      	ldr	r2, [pc, #144]	; (8008044 <HAL_HCD_MspInit+0xbc>)
 8007fb4:	f043 0301 	orr.w	r3, r3, #1
 8007fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8007fba:	4b22      	ldr	r3, [pc, #136]	; (8008044 <HAL_HCD_MspInit+0xbc>)
 8007fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007fd4:	f107 0314 	add.w	r3, r7, #20
 8007fd8:	4619      	mov	r1, r3
 8007fda:	481b      	ldr	r0, [pc, #108]	; (8008048 <HAL_HCD_MspInit+0xc0>)
 8007fdc:	f7f9 fa8e 	bl	80014fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007fe0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ff2:	230a      	movs	r3, #10
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ff6:	f107 0314 	add.w	r3, r7, #20
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4812      	ldr	r0, [pc, #72]	; (8008048 <HAL_HCD_MspInit+0xc0>)
 8007ffe:	f7f9 fa7d 	bl	80014fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008002:	4b10      	ldr	r3, [pc, #64]	; (8008044 <HAL_HCD_MspInit+0xbc>)
 8008004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008006:	4a0f      	ldr	r2, [pc, #60]	; (8008044 <HAL_HCD_MspInit+0xbc>)
 8008008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800c:	6353      	str	r3, [r2, #52]	; 0x34
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <HAL_HCD_MspInit+0xbc>)
 8008014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008016:	4a0b      	ldr	r2, [pc, #44]	; (8008044 <HAL_HCD_MspInit+0xbc>)
 8008018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800801c:	6453      	str	r3, [r2, #68]	; 0x44
 800801e:	4b09      	ldr	r3, [pc, #36]	; (8008044 <HAL_HCD_MspInit+0xbc>)
 8008020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800802a:	2200      	movs	r2, #0
 800802c:	2100      	movs	r1, #0
 800802e:	2043      	movs	r0, #67	; 0x43
 8008030:	f7f9 fa2d 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008034:	2043      	movs	r0, #67	; 0x43
 8008036:	f7f9 fa46 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800803a:	bf00      	nop
 800803c:	3728      	adds	r7, #40	; 0x28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	40023800 	.word	0x40023800
 8008048:	40020000 	.word	0x40020000

0800804c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800805a:	4618      	mov	r0, r3
 800805c:	f7ff fbb5 	bl	80077ca <USBH_LL_IncTimer>
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff fbed 	bl	8007856 <USBH_LL_Connect>
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008092:	4618      	mov	r0, r3
 8008094:	f7ff fbf6 	bl	8007884 <USBH_LL_Disconnect>
}
 8008098:	bf00      	nop
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
 80080ac:	4613      	mov	r3, r2
 80080ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff fba7 	bl	800781e <USBH_LL_PortEnabled>
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff fba7 	bl	800783a <USBH_LL_PortDisabled>
}
 80080ec:	bf00      	nop
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008102:	2b01      	cmp	r3, #1
 8008104:	d12a      	bne.n	800815c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008106:	4a18      	ldr	r2, [pc, #96]	; (8008168 <USBH_LL_Init+0x74>)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a15      	ldr	r2, [pc, #84]	; (8008168 <USBH_LL_Init+0x74>)
 8008112:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008116:	4b14      	ldr	r3, [pc, #80]	; (8008168 <USBH_LL_Init+0x74>)
 8008118:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800811c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800811e:	4b12      	ldr	r3, [pc, #72]	; (8008168 <USBH_LL_Init+0x74>)
 8008120:	2208      	movs	r2, #8
 8008122:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008124:	4b10      	ldr	r3, [pc, #64]	; (8008168 <USBH_LL_Init+0x74>)
 8008126:	2201      	movs	r2, #1
 8008128:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800812a:	4b0f      	ldr	r3, [pc, #60]	; (8008168 <USBH_LL_Init+0x74>)
 800812c:	2200      	movs	r2, #0
 800812e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008130:	4b0d      	ldr	r3, [pc, #52]	; (8008168 <USBH_LL_Init+0x74>)
 8008132:	2202      	movs	r2, #2
 8008134:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008136:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <USBH_LL_Init+0x74>)
 8008138:	2200      	movs	r2, #0
 800813a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800813c:	480a      	ldr	r0, [pc, #40]	; (8008168 <USBH_LL_Init+0x74>)
 800813e:	f7f9 fba8 	bl	8001892 <HAL_HCD_Init>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008148:	f7f8 fde4 	bl	8000d14 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800814c:	4806      	ldr	r0, [pc, #24]	; (8008168 <USBH_LL_Init+0x74>)
 800814e:	f7f9 ff9d 	bl	800208c <HAL_HCD_GetCurrentFrame>
 8008152:	4603      	mov	r3, r0
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff fb28 	bl	80077ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000658 	.word	0x20000658

0800816c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008182:	4618      	mov	r0, r3
 8008184:	f7f9 ff18 	bl	8001fb8 <HAL_HCD_Start>
 8008188:	4603      	mov	r3, r0
 800818a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	4618      	mov	r0, r3
 8008190:	f000 f912 	bl	80083b8 <USBH_Get_USB_Status>
 8008194:	4603      	mov	r3, r0
 8008196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008198:	7bbb      	ldrb	r3, [r7, #14]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7f9 ff20 	bl	8001ffe <HAL_HCD_Stop>
 80081be:	4603      	mov	r3, r0
 80081c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 f8f7 	bl	80083b8 <USBH_Get_USB_Status>
 80081ca:	4603      	mov	r3, r0
 80081cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ea:	78fa      	ldrb	r2, [r7, #3]
 80081ec:	4611      	mov	r1, r2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7f9 ff37 	bl	8002062 <HAL_HCD_HC_GetXferCount>
 80081f4:	4603      	mov	r3, r0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081fe:	b590      	push	{r4, r7, lr}
 8008200:	b089      	sub	sp, #36	; 0x24
 8008202:	af04      	add	r7, sp, #16
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	4608      	mov	r0, r1
 8008208:	4611      	mov	r1, r2
 800820a:	461a      	mov	r2, r3
 800820c:	4603      	mov	r3, r0
 800820e:	70fb      	strb	r3, [r7, #3]
 8008210:	460b      	mov	r3, r1
 8008212:	70bb      	strb	r3, [r7, #2]
 8008214:	4613      	mov	r3, r2
 8008216:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008226:	787c      	ldrb	r4, [r7, #1]
 8008228:	78ba      	ldrb	r2, [r7, #2]
 800822a:	78f9      	ldrb	r1, [r7, #3]
 800822c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800822e:	9302      	str	r3, [sp, #8]
 8008230:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008234:	9301      	str	r3, [sp, #4]
 8008236:	f897 3020 	ldrb.w	r3, [r7, #32]
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	4623      	mov	r3, r4
 800823e:	f7f9 fb8a 	bl	8001956 <HAL_HCD_HC_Init>
 8008242:	4603      	mov	r3, r0
 8008244:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	4618      	mov	r0, r3
 800824a:	f000 f8b5 	bl	80083b8 <USBH_Get_USB_Status>
 800824e:	4603      	mov	r3, r0
 8008250:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008252:	7bbb      	ldrb	r3, [r7, #14]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	bd90      	pop	{r4, r7, pc}

0800825c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008276:	78fa      	ldrb	r2, [r7, #3]
 8008278:	4611      	mov	r1, r2
 800827a:	4618      	mov	r0, r3
 800827c:	f7f9 fc03 	bl	8001a86 <HAL_HCD_HC_Halt>
 8008280:	4603      	mov	r3, r0
 8008282:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f896 	bl	80083b8 <USBH_Get_USB_Status>
 800828c:	4603      	mov	r3, r0
 800828e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008290:	7bbb      	ldrb	r3, [r7, #14]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800829a:	b590      	push	{r4, r7, lr}
 800829c:	b089      	sub	sp, #36	; 0x24
 800829e:	af04      	add	r7, sp, #16
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	4608      	mov	r0, r1
 80082a4:	4611      	mov	r1, r2
 80082a6:	461a      	mov	r2, r3
 80082a8:	4603      	mov	r3, r0
 80082aa:	70fb      	strb	r3, [r7, #3]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70bb      	strb	r3, [r7, #2]
 80082b0:	4613      	mov	r3, r2
 80082b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80082c2:	787c      	ldrb	r4, [r7, #1]
 80082c4:	78ba      	ldrb	r2, [r7, #2]
 80082c6:	78f9      	ldrb	r1, [r7, #3]
 80082c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80082cc:	9303      	str	r3, [sp, #12]
 80082ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082d0:	9302      	str	r3, [sp, #8]
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	4623      	mov	r3, r4
 80082de:	f7f9 fbf5 	bl	8001acc <HAL_HCD_HC_SubmitRequest>
 80082e2:	4603      	mov	r3, r0
 80082e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 f865 	bl	80083b8 <USBH_Get_USB_Status>
 80082ee:	4603      	mov	r3, r0
 80082f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd90      	pop	{r4, r7, pc}

080082fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800830e:	78fa      	ldrb	r2, [r7, #3]
 8008310:	4611      	mov	r1, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f7f9 fe90 	bl	8002038 <HAL_HCD_HC_GetURBState>
 8008318:	4603      	mov	r3, r0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	460b      	mov	r3, r1
 800832c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008334:	2b01      	cmp	r3, #1
 8008336:	d103      	bne.n	8008340 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	4618      	mov	r0, r3
 800833c:	f000 f868 	bl	8008410 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008340:	20c8      	movs	r0, #200	; 0xc8
 8008342:	f7f8 ffa7 	bl	8001294 <HAL_Delay>
  return USBH_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
 800835c:	4613      	mov	r3, r2
 800835e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008366:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008368:	78fa      	ldrb	r2, [r7, #3]
 800836a:	68f9      	ldr	r1, [r7, #12]
 800836c:	4613      	mov	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	440b      	add	r3, r1
 8008376:	333b      	adds	r3, #59	; 0x3b
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00a      	beq.n	8008394 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	68f9      	ldr	r1, [r7, #12]
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	00db      	lsls	r3, r3, #3
 800838a:	440b      	add	r3, r1
 800838c:	3350      	adds	r3, #80	; 0x50
 800838e:	78ba      	ldrb	r2, [r7, #2]
 8008390:	701a      	strb	r2, [r3, #0]
 8008392:	e009      	b.n	80083a8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008394:	78fa      	ldrb	r2, [r7, #3]
 8008396:	68f9      	ldr	r1, [r7, #12]
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	440b      	add	r3, r1
 80083a2:	3351      	adds	r3, #81	; 0x51
 80083a4:	78ba      	ldrb	r2, [r7, #2]
 80083a6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
	...

080083b8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d817      	bhi.n	80083fc <USBH_Get_USB_Status+0x44>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <USBH_Get_USB_Status+0x1c>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	080083e5 	.word	0x080083e5
 80083d8:	080083eb 	.word	0x080083eb
 80083dc:	080083f1 	.word	0x080083f1
 80083e0:	080083f7 	.word	0x080083f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]
    break;
 80083e8:	e00b      	b.n	8008402 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80083ea:	2302      	movs	r3, #2
 80083ec:	73fb      	strb	r3, [r7, #15]
    break;
 80083ee:	e008      	b.n	8008402 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80083f0:	2301      	movs	r3, #1
 80083f2:	73fb      	strb	r3, [r7, #15]
    break;
 80083f4:	e005      	b.n	8008402 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80083f6:	2302      	movs	r3, #2
 80083f8:	73fb      	strb	r3, [r7, #15]
    break;
 80083fa:	e002      	b.n	8008402 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083fc:	2302      	movs	r3, #2
 80083fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008400:	bf00      	nop
  }
  return usb_status;
 8008402:	7bfb      	ldrb	r3, [r7, #15]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008424:	2301      	movs	r3, #1
 8008426:	73fb      	strb	r3, [r7, #15]
 8008428:	e001      	b.n	800842e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	461a      	mov	r2, r3
 8008432:	2101      	movs	r1, #1
 8008434:	4803      	ldr	r0, [pc, #12]	; (8008444 <MX_DriverVbusFS+0x34>)
 8008436:	f7f9 fa13 	bl	8001860 <HAL_GPIO_WritePin>
}
 800843a:	bf00      	nop
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	40020800 	.word	0x40020800

08008448 <__errno>:
 8008448:	4b01      	ldr	r3, [pc, #4]	; (8008450 <__errno+0x8>)
 800844a:	6818      	ldr	r0, [r3, #0]
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	2000002c 	.word	0x2000002c

08008454 <__libc_init_array>:
 8008454:	b570      	push	{r4, r5, r6, lr}
 8008456:	4e0d      	ldr	r6, [pc, #52]	; (800848c <__libc_init_array+0x38>)
 8008458:	4c0d      	ldr	r4, [pc, #52]	; (8008490 <__libc_init_array+0x3c>)
 800845a:	1ba4      	subs	r4, r4, r6
 800845c:	10a4      	asrs	r4, r4, #2
 800845e:	2500      	movs	r5, #0
 8008460:	42a5      	cmp	r5, r4
 8008462:	d109      	bne.n	8008478 <__libc_init_array+0x24>
 8008464:	4e0b      	ldr	r6, [pc, #44]	; (8008494 <__libc_init_array+0x40>)
 8008466:	4c0c      	ldr	r4, [pc, #48]	; (8008498 <__libc_init_array+0x44>)
 8008468:	f000 f8ea 	bl	8008640 <_init>
 800846c:	1ba4      	subs	r4, r4, r6
 800846e:	10a4      	asrs	r4, r4, #2
 8008470:	2500      	movs	r5, #0
 8008472:	42a5      	cmp	r5, r4
 8008474:	d105      	bne.n	8008482 <__libc_init_array+0x2e>
 8008476:	bd70      	pop	{r4, r5, r6, pc}
 8008478:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800847c:	4798      	blx	r3
 800847e:	3501      	adds	r5, #1
 8008480:	e7ee      	b.n	8008460 <__libc_init_array+0xc>
 8008482:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008486:	4798      	blx	r3
 8008488:	3501      	adds	r5, #1
 800848a:	e7f2      	b.n	8008472 <__libc_init_array+0x1e>
 800848c:	0800867c 	.word	0x0800867c
 8008490:	0800867c 	.word	0x0800867c
 8008494:	0800867c 	.word	0x0800867c
 8008498:	08008680 	.word	0x08008680

0800849c <malloc>:
 800849c:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <malloc+0xc>)
 800849e:	4601      	mov	r1, r0
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	f000 b861 	b.w	8008568 <_malloc_r>
 80084a6:	bf00      	nop
 80084a8:	2000002c 	.word	0x2000002c

080084ac <free>:
 80084ac:	4b02      	ldr	r3, [pc, #8]	; (80084b8 <free+0xc>)
 80084ae:	4601      	mov	r1, r0
 80084b0:	6818      	ldr	r0, [r3, #0]
 80084b2:	f000 b80b 	b.w	80084cc <_free_r>
 80084b6:	bf00      	nop
 80084b8:	2000002c 	.word	0x2000002c

080084bc <memset>:
 80084bc:	4402      	add	r2, r0
 80084be:	4603      	mov	r3, r0
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d100      	bne.n	80084c6 <memset+0xa>
 80084c4:	4770      	bx	lr
 80084c6:	f803 1b01 	strb.w	r1, [r3], #1
 80084ca:	e7f9      	b.n	80084c0 <memset+0x4>

080084cc <_free_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4605      	mov	r5, r0
 80084d0:	2900      	cmp	r1, #0
 80084d2:	d045      	beq.n	8008560 <_free_r+0x94>
 80084d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084d8:	1f0c      	subs	r4, r1, #4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	bfb8      	it	lt
 80084de:	18e4      	addlt	r4, r4, r3
 80084e0:	f000 f8ac 	bl	800863c <__malloc_lock>
 80084e4:	4a1f      	ldr	r2, [pc, #124]	; (8008564 <_free_r+0x98>)
 80084e6:	6813      	ldr	r3, [r2, #0]
 80084e8:	4610      	mov	r0, r2
 80084ea:	b933      	cbnz	r3, 80084fa <_free_r+0x2e>
 80084ec:	6063      	str	r3, [r4, #4]
 80084ee:	6014      	str	r4, [r2, #0]
 80084f0:	4628      	mov	r0, r5
 80084f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084f6:	f000 b8a2 	b.w	800863e <__malloc_unlock>
 80084fa:	42a3      	cmp	r3, r4
 80084fc:	d90c      	bls.n	8008518 <_free_r+0x4c>
 80084fe:	6821      	ldr	r1, [r4, #0]
 8008500:	1862      	adds	r2, r4, r1
 8008502:	4293      	cmp	r3, r2
 8008504:	bf04      	itt	eq
 8008506:	681a      	ldreq	r2, [r3, #0]
 8008508:	685b      	ldreq	r3, [r3, #4]
 800850a:	6063      	str	r3, [r4, #4]
 800850c:	bf04      	itt	eq
 800850e:	1852      	addeq	r2, r2, r1
 8008510:	6022      	streq	r2, [r4, #0]
 8008512:	6004      	str	r4, [r0, #0]
 8008514:	e7ec      	b.n	80084f0 <_free_r+0x24>
 8008516:	4613      	mov	r3, r2
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	b10a      	cbz	r2, 8008520 <_free_r+0x54>
 800851c:	42a2      	cmp	r2, r4
 800851e:	d9fa      	bls.n	8008516 <_free_r+0x4a>
 8008520:	6819      	ldr	r1, [r3, #0]
 8008522:	1858      	adds	r0, r3, r1
 8008524:	42a0      	cmp	r0, r4
 8008526:	d10b      	bne.n	8008540 <_free_r+0x74>
 8008528:	6820      	ldr	r0, [r4, #0]
 800852a:	4401      	add	r1, r0
 800852c:	1858      	adds	r0, r3, r1
 800852e:	4282      	cmp	r2, r0
 8008530:	6019      	str	r1, [r3, #0]
 8008532:	d1dd      	bne.n	80084f0 <_free_r+0x24>
 8008534:	6810      	ldr	r0, [r2, #0]
 8008536:	6852      	ldr	r2, [r2, #4]
 8008538:	605a      	str	r2, [r3, #4]
 800853a:	4401      	add	r1, r0
 800853c:	6019      	str	r1, [r3, #0]
 800853e:	e7d7      	b.n	80084f0 <_free_r+0x24>
 8008540:	d902      	bls.n	8008548 <_free_r+0x7c>
 8008542:	230c      	movs	r3, #12
 8008544:	602b      	str	r3, [r5, #0]
 8008546:	e7d3      	b.n	80084f0 <_free_r+0x24>
 8008548:	6820      	ldr	r0, [r4, #0]
 800854a:	1821      	adds	r1, r4, r0
 800854c:	428a      	cmp	r2, r1
 800854e:	bf04      	itt	eq
 8008550:	6811      	ldreq	r1, [r2, #0]
 8008552:	6852      	ldreq	r2, [r2, #4]
 8008554:	6062      	str	r2, [r4, #4]
 8008556:	bf04      	itt	eq
 8008558:	1809      	addeq	r1, r1, r0
 800855a:	6021      	streq	r1, [r4, #0]
 800855c:	605c      	str	r4, [r3, #4]
 800855e:	e7c7      	b.n	80084f0 <_free_r+0x24>
 8008560:	bd38      	pop	{r3, r4, r5, pc}
 8008562:	bf00      	nop
 8008564:	200000c0 	.word	0x200000c0

08008568 <_malloc_r>:
 8008568:	b570      	push	{r4, r5, r6, lr}
 800856a:	1ccd      	adds	r5, r1, #3
 800856c:	f025 0503 	bic.w	r5, r5, #3
 8008570:	3508      	adds	r5, #8
 8008572:	2d0c      	cmp	r5, #12
 8008574:	bf38      	it	cc
 8008576:	250c      	movcc	r5, #12
 8008578:	2d00      	cmp	r5, #0
 800857a:	4606      	mov	r6, r0
 800857c:	db01      	blt.n	8008582 <_malloc_r+0x1a>
 800857e:	42a9      	cmp	r1, r5
 8008580:	d903      	bls.n	800858a <_malloc_r+0x22>
 8008582:	230c      	movs	r3, #12
 8008584:	6033      	str	r3, [r6, #0]
 8008586:	2000      	movs	r0, #0
 8008588:	bd70      	pop	{r4, r5, r6, pc}
 800858a:	f000 f857 	bl	800863c <__malloc_lock>
 800858e:	4a21      	ldr	r2, [pc, #132]	; (8008614 <_malloc_r+0xac>)
 8008590:	6814      	ldr	r4, [r2, #0]
 8008592:	4621      	mov	r1, r4
 8008594:	b991      	cbnz	r1, 80085bc <_malloc_r+0x54>
 8008596:	4c20      	ldr	r4, [pc, #128]	; (8008618 <_malloc_r+0xb0>)
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	b91b      	cbnz	r3, 80085a4 <_malloc_r+0x3c>
 800859c:	4630      	mov	r0, r6
 800859e:	f000 f83d 	bl	800861c <_sbrk_r>
 80085a2:	6020      	str	r0, [r4, #0]
 80085a4:	4629      	mov	r1, r5
 80085a6:	4630      	mov	r0, r6
 80085a8:	f000 f838 	bl	800861c <_sbrk_r>
 80085ac:	1c43      	adds	r3, r0, #1
 80085ae:	d124      	bne.n	80085fa <_malloc_r+0x92>
 80085b0:	230c      	movs	r3, #12
 80085b2:	6033      	str	r3, [r6, #0]
 80085b4:	4630      	mov	r0, r6
 80085b6:	f000 f842 	bl	800863e <__malloc_unlock>
 80085ba:	e7e4      	b.n	8008586 <_malloc_r+0x1e>
 80085bc:	680b      	ldr	r3, [r1, #0]
 80085be:	1b5b      	subs	r3, r3, r5
 80085c0:	d418      	bmi.n	80085f4 <_malloc_r+0x8c>
 80085c2:	2b0b      	cmp	r3, #11
 80085c4:	d90f      	bls.n	80085e6 <_malloc_r+0x7e>
 80085c6:	600b      	str	r3, [r1, #0]
 80085c8:	50cd      	str	r5, [r1, r3]
 80085ca:	18cc      	adds	r4, r1, r3
 80085cc:	4630      	mov	r0, r6
 80085ce:	f000 f836 	bl	800863e <__malloc_unlock>
 80085d2:	f104 000b 	add.w	r0, r4, #11
 80085d6:	1d23      	adds	r3, r4, #4
 80085d8:	f020 0007 	bic.w	r0, r0, #7
 80085dc:	1ac3      	subs	r3, r0, r3
 80085de:	d0d3      	beq.n	8008588 <_malloc_r+0x20>
 80085e0:	425a      	negs	r2, r3
 80085e2:	50e2      	str	r2, [r4, r3]
 80085e4:	e7d0      	b.n	8008588 <_malloc_r+0x20>
 80085e6:	428c      	cmp	r4, r1
 80085e8:	684b      	ldr	r3, [r1, #4]
 80085ea:	bf16      	itet	ne
 80085ec:	6063      	strne	r3, [r4, #4]
 80085ee:	6013      	streq	r3, [r2, #0]
 80085f0:	460c      	movne	r4, r1
 80085f2:	e7eb      	b.n	80085cc <_malloc_r+0x64>
 80085f4:	460c      	mov	r4, r1
 80085f6:	6849      	ldr	r1, [r1, #4]
 80085f8:	e7cc      	b.n	8008594 <_malloc_r+0x2c>
 80085fa:	1cc4      	adds	r4, r0, #3
 80085fc:	f024 0403 	bic.w	r4, r4, #3
 8008600:	42a0      	cmp	r0, r4
 8008602:	d005      	beq.n	8008610 <_malloc_r+0xa8>
 8008604:	1a21      	subs	r1, r4, r0
 8008606:	4630      	mov	r0, r6
 8008608:	f000 f808 	bl	800861c <_sbrk_r>
 800860c:	3001      	adds	r0, #1
 800860e:	d0cf      	beq.n	80085b0 <_malloc_r+0x48>
 8008610:	6025      	str	r5, [r4, #0]
 8008612:	e7db      	b.n	80085cc <_malloc_r+0x64>
 8008614:	200000c0 	.word	0x200000c0
 8008618:	200000c4 	.word	0x200000c4

0800861c <_sbrk_r>:
 800861c:	b538      	push	{r3, r4, r5, lr}
 800861e:	4c06      	ldr	r4, [pc, #24]	; (8008638 <_sbrk_r+0x1c>)
 8008620:	2300      	movs	r3, #0
 8008622:	4605      	mov	r5, r0
 8008624:	4608      	mov	r0, r1
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	f7f8 fd4c 	bl	80010c4 <_sbrk>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d102      	bne.n	8008636 <_sbrk_r+0x1a>
 8008630:	6823      	ldr	r3, [r4, #0]
 8008632:	b103      	cbz	r3, 8008636 <_sbrk_r+0x1a>
 8008634:	602b      	str	r3, [r5, #0]
 8008636:	bd38      	pop	{r3, r4, r5, pc}
 8008638:	2000091c 	.word	0x2000091c

0800863c <__malloc_lock>:
 800863c:	4770      	bx	lr

0800863e <__malloc_unlock>:
 800863e:	4770      	bx	lr

08008640 <_init>:
 8008640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008642:	bf00      	nop
 8008644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008646:	bc08      	pop	{r3}
 8008648:	469e      	mov	lr, r3
 800864a:	4770      	bx	lr

0800864c <_fini>:
 800864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864e:	bf00      	nop
 8008650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008652:	bc08      	pop	{r3}
 8008654:	469e      	mov	lr, r3
 8008656:	4770      	bx	lr
